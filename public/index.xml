<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Maurice的博客</title>
    <link>https://maurice-xx.github.io/</link>
    <description>Recent content on Maurice的博客</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 14 Mar 2025 23:35:22 +0800</lastBuildDate>
    <atom:link href="https://maurice-xx.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Ds</title>
      <link>https://maurice-xx.github.io/posts/ds/</link>
      <pubDate>Fri, 14 Mar 2025 23:35:22 +0800</pubDate>
      <guid>https://maurice-xx.github.io/posts/ds/</guid>
      <description>&lt;h1 id=&#34;简答&#34;&gt;简答&lt;/h1&gt;&#xA;&lt;h2 id=&#34;1绪论&#34;&gt;1.绪论&lt;/h2&gt;&#xA;&lt;h5 id=&#34;1数据的逻辑结构存储结构和运算之间的关系&#34;&gt;1.数据的逻辑结构、存储结构和运算之间的关系&lt;/h5&gt;&#xA;&lt;p&gt;1.逻辑结构为人们想象并且描述出来的数据元素与数据元素之间的关系。&lt;/p&gt;&#xA;&lt;p&gt;2.存储结构则是这种逻辑关系在计算机上的具体实现。所以一种逻辑关系对应了多种存储结构。&lt;/p&gt;&#xA;&lt;p&gt;3.一种逻辑关系对应一种存储结构在数据运算方面也不一样&lt;/p&gt;&#xA;&lt;h5 id=&#34;2线性表的特点&#34;&gt;2.线性表的特点：&lt;/h5&gt;&#xA;&lt;p&gt;一对一 除第一个元素外，每个元素有且仅有一个直接 前驱； 除最后一个元素外，每个元素有且仅有一个直 接后继 线性结构和非线性结构的区别。&lt;/p&gt;&#xA;&lt;h5 id=&#34;3线性结构和非线性结构的区别&#34;&gt;3.线性结构和非线性结构的区别？&lt;/h5&gt;&#xA;&lt;p&gt;线性结构（一对一、除了头尾，只有一个前驱和后继）： 线性表、栈、队列、串、数组&lt;/p&gt;&#xA;&lt;p&gt;非线性结构：一个结点元素可能有多个直接前驱和多个直 接后继 树、图&lt;/p&gt;&#xA;&lt;h5 id=&#34;4为什么在单循环链表中设置尾指针比设置头指针更好&#34;&gt;4.为什么在单循环链表中设置尾指针比设置头指针更好?&lt;/h5&gt;&#xA;&lt;p&gt;答:用尾指针来表示单循环链表可以使得查找链表的第一个数据节点和终端结点都很方便， 其尾指针为 rear, 则第一个数据节点和终端结点的位置分别是 rear-&amp;gt;next-&amp;gt;next 和 rear, 查找时间都 0(1)。 若无尾指针，则查找终端结点的时间为 0(n)。&lt;/p&gt;&#xA;&lt;h5 id=&#34;5头结点不带头结点的代码区别&#34;&gt;5.头结点、不带头结点的代码区别&lt;/h5&gt;&#xA;&lt;p&gt;对带头结点的链表，在表的任何结点之前插入结点或删除表 中任何结点，所要做的都是修改前一结点的指针域，因为任 何元素结点都有前驱结点。 若链表没有头结点，则首元素结点没有前驱结点，在其前插 入结点或删除该结点时需要单独写if语句。&lt;/p&gt;&#xA;&lt;h5 id=&#34;63-个概念的区别头指针头结点首结点第一个数据结点&#34;&gt;6.3 个概念的区别:头指针、头结点、首结点，第一个数据结点。&lt;/h5&gt;&#xA;&lt;p&gt;单链表分为带头结点的单链表和不带头结点的单链表，头结点的值域不存储 任何信息，从其后继结点开始存储信息。 不论带头结点的链表还是不带头结点的链表，头指针都指向链表的第一个结 点，带头结点的单链表头结点就是第一个结点，不带头结点的单链表第一个 结点就是首结点。ps：首结点就是第一个数据节点。&lt;/p&gt;&#xA;&lt;h5 id=&#34;7图片中的文字是顺序表的特点&#34;&gt;7.图片中的文字是：顺序表的特点：&lt;/h5&gt;&#xA;&lt;p&gt;①随机访问，即可以在O(1)&lt;em&gt;O&lt;/em&gt;(1)时间内找到第i个元素。&lt;/p&gt;&#xA;&lt;p&gt;②存储密度高，每个节点只存储数据元素&lt;/p&gt;&#xA;&lt;p&gt;③拓展容量不方便（即便采用动态分配的方式实现，拓展长度的时间复杂度也比较高）&lt;/p&gt;&#xA;&lt;p&gt;④插入、删除操作不方便，需要移动大量元素&lt;/p&gt;&#xA;&lt;h5 id=&#34;8为什么使用共享栈优点&#34;&gt;8.为什么使用共享栈？（优点）&lt;/h5&gt;&#xA;&lt;p&gt;使用栈的时候，我们也不能保证栈有足够 的空间，另外，栈是一个动态的存储结构， 各个栈的实际大小在使用的过程中都会发 生变化的，有时候其中一个已经上溢了， 而另外一个还没用怎么使用。这样必定会 造成空间的利用率降低。 共享栈就是让两个顺序栈，两个栈使用同 一段存储空间，利用“栈底不变，栈顶动 态增加的特性”节省存储空间，共享一个 一维数组空间。&lt;/p&gt;&#xA;&lt;h5 id=&#34;9如何知道循环队列是空还是满-简答题&#34;&gt;9.如何知道循环队列是空还是满 （简答题）&lt;/h5&gt;&#xA;&lt;p&gt;答： 第一，采用计数器来判断，空时，计数器为 0，满时，计数 器为 count;  第二，另设一个布尔变量来匹别队列的空和满;如果因删除导 致front=rear，则队空； 如果因插入导致front=rear，则队满 第三，少用一个元素的空间，约定入队前，测试尾指针在循 环意义下加 1 后 是否等于头指针，若相等则认为队满(注 意:rear 所指的单元始终为空);&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
