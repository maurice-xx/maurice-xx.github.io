<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Maurice的博客</title>
    <link>https://maurice-xx.github.io/</link>
    <description>Recent content on Maurice的博客</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 14 Mar 2025 23:06:28 +0800</lastBuildDate>
    <atom:link href="https://maurice-xx.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>My First Post</title>
      <link>https://maurice-xx.github.io/posts/my-first-post/</link>
      <pubDate>Fri, 14 Mar 2025 23:06:28 +0800</pubDate>
      <guid>https://maurice-xx.github.io/posts/my-first-post/</guid>
      <description>&lt;h2 id=&#34;211-顺序表查找最小值并返回被删元素的值&#34;&gt;2.1.1 顺序表查找最小值并返回被删元素的值&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xA;搜索整个顺序表，查找最小值元素并记住其位置，搜索结束后用最后一个元素填补空出的原最小值元素的位置。&#xA;*/&#xA;bool Del_Min(sqList &amp;amp;L,int &amp;amp;value)&#xA;{&#xA;    if(L.length ==0)&#xA;        return false;&#xA;    value = L.data[0];&#xA;    int pos = 0;&#xA;    for(int i=1;i&amp;lt;L.length;i++)&#xA;    {&#xA;        if(L.data[i]&amp;lt;value)&#xA;        {&#xA;            value = L.data[i];&#xA;            pos = i; //循环找最小值的元素&#xA;        }&#xA;        //空出的位置由最后一个填补&#xA;        L.data[pos] = L.data[L.length -1];&#xA;        L.length--;&#xA;        returm true;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;212-顺序表l所有元素逆置空间复杂度为o1&#34;&gt;2.1.2 顺序表L所有元素逆置，空间复杂度为O(1)&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;void Reverse(Sqlist &amp;amp;L)&#xA;{&#xA;    int temp; &#xA;    for(i=0;i&amp;lt;L.length/2;i++)&#xA;    {&#xA;        temp = L.data[i]; //交换变量&#xA;        L.data[i] = L.data[L.length - i - 1];&#xA;        L.data[L.length - i -1] = temp;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;213-顺序表删除所有值为x的数据元素时间复杂度on空间复杂度o1&#34;&gt;2.1.3 顺序表删除所有值为x的数据元素，时间复杂度O(n)，空间复杂度O(1)&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xA;用 k 记录顺序表L中不等于x的元素个数(即需要保存的元素个数)，边扫描L边统计k，并将不等于x的元素向前移动 k 个位置，最后修改L的长度。&#xA;*/&#xA;void del_x1(Sqlist &amp;amp;L，int x)&#xA;{&#xA;    int k=0; //记录值不等于x的元素个数&#xA;    for(i=0;i&amp;lt;L.length;i++)&#xA;        if(L.data[i]!=x)&#xA;        {&#xA;            L.data[k] = L.data[i];&#xA;            k++; //不等于x的元素增1&#xA;        }&#xA;    L.length = k; //顺序表L的长度等于k&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;214-有序顺序表中删除给定值-s-与-t-之间的所有元素&#34;&gt;2.1.4 有序顺序表中删除给定值 s 与 t 之间的所有元素&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xA;本题与上题的区别，因为是有序表，所有删除的元素必须是相连的整体。从前向后扫描顺序表L，用k记录下元素值在s到t之间的元素的个数。若其值不在s到t之间，则前移k个位置;否则执行k++.&#xA;*/&#xA;bool Del_s_t(SqList &amp;amp;L,int s,int t)&#xA;{&#xA;    int i,k=0;&#xA;    if(L.length==0||s&amp;gt;=t)&#xA;        return false;&#xA;    for(i=0;i&amp;lt;L.length;i++)&#xA;    {&#xA;        if(L.data[i]&amp;gt;=s &amp;amp;&amp;amp; L.data[i]&amp;lt;=t)&#xA;            k++;&#xA;        else&#xA;            L.data[i-k] = L.data[i];//当前元素前移k个位置&#xA;    }&#xA;    L.length -= k; //长度减小&#xA;    return true;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;215-有序顺序表中删除所有值重复的元素使所有元素的值均不同&#34;&gt;2.1.5 有序顺序表中删除所有值重复的元素，使所有元素的值均不同&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xA;有序顺序表，值相同的元素在连续的位置上，用类似直接插入排序的思想，初始时将第一个元素视为非重复的有序表。之后依次判断后面的元素是否与前面非重复有序表的最后一个元素相同，若相同则继续向后判断，若不同则插入到前面的非重复有序表的最后，直到判断到表尾为止。&#xA;*/&#xA;bool Delete_Same(SeqList &amp;amp;L)&#xA;{&#xA;    if(L.length == 0)&#xA;        return false;&#xA;    int i,j;&#xA;    for(i=0;j=1; j&amp;lt;L.length;j++)&#xA;        if(L.data[i]!=L.data[j])&#xA;            L.data[++i] = L.data[j];&#xA;    L.length = i+1;&#xA;    return true;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;216-两个有序顺序表合并为一个新的有序顺序表由函数返回结果顺序表&#34;&gt;2.1.6 两个有序顺序表合并为一个新的有序顺序表，由函数返回结果顺序表&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xA;按顺序不断取下两个顺序表表头较小的结点存入新的顺序表中。然后，看哪个表还有剩余，将剩余的部分加到新的顺序表后面。&#xA;*/&#xA;bool Merge(SeqList A,SeqList B,Seqlist &amp;amp;C)&#xA;{&#xA;    if(A.length + B.length &amp;gt; C.maxSize)&#xA;        return false;&#xA;    int i=0,j=0,k=0;&#xA;    while(i&amp;lt;A.length &amp;amp;&amp;amp; j&amp;lt;B.length) //循环，两两比较，小者存入结果表&#xA;    {&#xA;        if(A.data[i] &amp;lt;= B.data[j])&#xA;            C.data[k++] = A.data[i++];&#xA;        &#xA;        else&#xA;            C.data[k++] = B.data[j++];&#xA;      }   &#xA;    &#xA;        while(i&amp;lt;A.length)&#xA;            C.data[k++] = A.data[i++];&#xA;        while(j&amp;lt;B.length)&#xA;            C.data[k++] = B.data[j++];&#xA;        C.length = k;&#xA;        return true;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;217-一维数组-amn-中将两个顺序表m和顺序表n-的位置互换&#34;&gt;2.1.7 一维数组 A[m+n] 中将两个顺序表m和顺序表n 的位置互换&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xA;首先将A[m+n]中的全部元素原地逆置，再对前n个元素和后m个元素分别使用逆置算法，即可得到题意。&#xA;*/&#xA;void Reverse(int A[],int left,int right,ing arraysize)&#xA;{&#xA;    if(left&amp;gt;=right || right&amp;gt;=arraySize)&#xA;        return;&#xA;    int mid = (left+right)/2;&#xA;    for(int i=0;i&amp;lt;=mid - left;i++)&#xA;    {&#xA;        int temp = A[left + i];&#xA;        A[left + i] = A[right -i];&#xA;        A[right-i] = temp;&#xA;    }&#xA;}&#xA;&#xA;void Exchange(int A[],int m,int n,int arraySize)&#xA;{&#xA;    Reverse(A,0,m+n-1,arraySize);&#xA;    Reverse(A,0,n-1,arraySize);&#xA;    Reverse(A,n,m+n-1,arraySize);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;218-递增有序顺序表查找数值为-x-的元素若找到则与其后继元素交换位置找不到则将其插入表中&#34;&gt;2.1.8 递增有序顺序表，查找数值为 x 的元素。若找到则与其后继元素交换位置，找不到则将其插入表中。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xA;题目要求“用最少的时间在表中查找数值为x的元素”，这里应使用折半查找法。&#xA;*/&#xA;void SearchExchangeInsert(int A[],int x)&#xA;{&#xA;    int low=0,high = n-1,mid;&#xA;    while(low &amp;lt;= high)&#xA;    {&#xA;        mid = (low+high)/2; //找中间位置&#xA;        if(A[mid] == x) break;//找到x，退出while循环&#xA;        else if(A[mid]&amp;lt;x) low = mid+1;//到中点mid的右半部去查&#xA;        else high = mid -1; //到中点mid的左半部分去查&#xA;    }&#xA;    if(A[mid] == x &amp;amp;&amp;amp; mid != n-1) //若最后一个元素与x相等，则不存在与其后继交换的操作&#xA;    {&#xA;        t=A[mid];&#xA;        A[mid] = A[mid+1];&#xA;        A[mid+1] = t;&#xA;    }&#xA;    if(low&amp;gt;high)  //查找失败，插入数据元素x&#xA;    {&#xA;        for(i = n-1;i&amp;gt;high;i--) &#xA;            A[i+1] = A[i]; //后移元素&#xA;        A[i+1] = x; //插入x&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;221-一维数组r的序列循环左移p个位置空间和时间上都尽量高效&#34;&gt;2.2.1 一维数组R的序列循环左移p个位置，空间和时间上都尽量高效。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xA;将问题视为数组ab转换成数组ba.(a代表数组的前p个元素，b代表数组中余下的n-p个元素)，先将a逆置得到 (a的逆置+b)，再将b逆置得到(a的逆置+b的逆置),最后将整个(a的逆置+b的逆置)逆置得到ba。&#xA;*/&#xA;void Revserse(int R[],int from,int to)&#xA;{&#xA;    int i,temp;&#xA;    for(i=0;i&amp;lt;(to-from+1)/2;i++)&#xA;    {&#xA;        temp = R[from+i];&#xA;        R[from+i] = R[to-i];&#xA;        R[to-i] = temp;&#xA;    }&#xA;}&#xA;&#xA;void Converse(int R[],int n,int p)&#xA;{&#xA;    Revserse(R,0,p-1); //时间复杂度为O(p/2)&#xA;    Revserse(R,p,n-1); //时间复杂度为O((n-p)/2)&#xA;    Revserse(R,0,n-1); //时间复杂度为O(n/2)&#xA;}&#xA;//时间复杂度O(n),空间复杂度O(1)&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;222-找出数组中未出现的最小正整数时间上尽可能高效&#34;&gt;2.2.2 找出数组中未出现的最小正整数，时间上尽可能高效。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xA;要求时间上尽可能高效，因此采用空间换时间的办法。分配一个用于标记的数组B[n],用来记录A中是否出现了1~n的正整数。B[0]对应正整数1,B[n-1]对应正整数n,初始化B中全部为0。由于A中含有n个整数，因此可能返回的值是1~n+1,当A中n个数恰好为1~n时返回n+1。当数组A中出现了小于等于0或大于n的值可以不采取任何操作。&#xA;算法流程:&#xA;从A[0]开始遍历，若0&amp;lt;A[i]&amp;lt;=n,则令B[A[i]-1] = 1;否则不做操作。对A遍历结束后，开始遍历数组B，若能查找第一个满足B[i]全部不为0，返回i+1, (跳出循环时i=n,i+1等于n+1),此时说明A中未出现的最小正整数是n+1。&#xA;*/&#xA;int findMissMin(int A[],int n)&#xA;{&#xA;    int i,*B; //标记数组&#xA;    B = (int *)malloc(sizeof(int) *n); //分配空间&#xA;    memset(B,0,sizeof(int)*n); //赋初值为0&#xA;    for(i=0;i&amp;lt;n;i++)&#xA;    {&#xA;        if(A[i]&amp;gt;0 &amp;amp;&amp;amp; A[i]&amp;lt;n) //若A[i]的值介于1~n，则标记数组B&#xA;            B[A[i]-1] = 1;&#xA;        for(i=0;i&amp;lt;n;i++) //扫描数组B，找到目标值&#xA;            if(B[i] ==0) break;  &#xA;        return i+1;   //返回结果&#xA;    }&#xA;}&#xA;//例子:{-5,3,2,3} ===&amp;gt; return 1&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;231-头插法建立单链表&#34;&gt;2.3.1 头插法建立单链表&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xA;采用头插法建立单链表时，读入数据的顺序与生成的链表中的元素是相反的。每个结点插入的时间为O(1),设单链表长为n，则总时间复杂度为O(n)。&#xA;*/&#xA;LinkList List_HeadInsert(LinkList &amp;amp;L)&#xA;{&#xA;    LNode *s;&#xA;    int x;&#xA;    L = (LinkList)malloc(sizeof(LNode));&#xA;    L-&amp;gt;next = NULL;&#xA;    scanf(&amp;#34;%d&amp;#34;,&amp;amp;x);&#xA;    while(x!=999)&#xA;    {&#xA;        s = (LNode*)malloc(sizeof(LNode));//创建新节点&#xA;        s-&amp;gt;data = x;&#xA;        s-&amp;gt;next = L-&amp;gt;next;&#xA;        L-&amp;gt;next = s;//将新结点插入表中，L为头指针&#xA;        scanf(&amp;#34;%d&amp;#34;,&amp;amp;x);  &#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;232-采用尾插法建立单链表&#34;&gt;2.3.2 采用尾插法建立单链表&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;LinkList List_TailInsert(LinkList &amp;amp;L)&#xA;{&#xA;    int x;&#xA;    L = (LinkList)malloc(sizeof(LNode));&#xA;    LNode *s,*r = L; //r为表尾指针&#xA;    scanf(&amp;#34;%d&amp;#34;,&amp;amp;x);&#xA;    while(x!=999)&#xA;    {&#xA;        s = (LNode*)malloc(sizeof(LNode));&#xA;        s-&amp;gt;data = x;&#xA;        r-&amp;gt;next = s;&#xA;        r=s; //r指向新的表尾结点&#xA;        scanf(&amp;#34;%d&amp;#34;,&amp;amp;x);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;233-不带头结点的单链表l删除所有值为x的结点&#34;&gt;2.3.3 不带头结点的单链表L删除所有值为x的结点&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xA;算法需要借助一个递归工作栈，深度为O(n)，时间复杂度为O(n)。&#xA;*/&#xA;void Del_X_3(LinkList &amp;amp;L,int x)&#xA;{&#xA;&#x9;LNode *p;&#xA;    if(L==NULL)     //p指向待删除结点&#xA;        return;   //递归出口&#xA;    if(L-&amp;gt;data==x)&#xA;    {&#xA;        p=L; //删除*L，并让L指向下一结点&#xA;        L=L-&amp;gt;next;&#xA;        free(p);&#xA;        Del_x_3(L,x);//递归调用&#xA;    }&#xA;    else    //若L所指结点的值不为x&#xA;        Del_X_3(L-&amp;gt;next,x)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;234-带头结点的单链表l删除所有值为-x-的结点释放其空间假设值-x-的结点不唯一&#34;&gt;2.3.4 带头结点的单链表L删除所有值为 x 的结点，释放其空间，假设值 x 的结点不唯一&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xA;用p从头至尾扫描单链表，pre指向*p结点的前驱。若p所指结点的值为x，则删除，并让p移向下一个结点，否则让pre、p指针同步后移一个结点。&#xA;该段代码可以一直使用,if条件可以更改。时间复杂度为O(n),空间复杂度为O(1).&#xA;*/&#xA;void Del_X_1(LinkList &amp;amp;L,int x)&#xA;{&#xA;    LNode *p = L-&amp;gt;next,*pre = L,*q;&#xA;    while(p!=NULL)&#xA;    {&#xA;        if(p-&amp;gt;data ==x)&#xA;        {&#xA;            q = p;  //q指向该结点&#xA;            p = p-&amp;gt;next;&#xA;            pre-&amp;gt;next = p;  //删除*q结点&#xA;            free(q);      &#xA;        }&#xA;        else      //否则,pre和p同步后移&#xA;        {&#xA;            pre= p;&#xA;            p = p-&amp;gt;next;&#xA;        }&#xA;    }//while&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;235-带头结点的单链表l逆向输出每个结点的值&#34;&gt;2.3.5 带头结点的单链表L逆向输出每个结点的值&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;void R_Print(LinkList &amp;amp;L)&#xA;{&#xA;    if(L-&amp;gt;next != NULL)&#xA;    {&#xA;     &#x9;R_Print(L-&amp;gt;next); &#xA;    }&#xA;    print(L-&amp;gt;data);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;236-带头结点的单链表l中删除最小值结点假设最小值结点唯一时间高效&#34;&gt;2.3.6 带头结点的单链表L中删除最小值结点(假设最小值结点唯一)，时间高效&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;LinkList Delete_Min(LinkList &amp;amp;L)&#xA;{&#xA;    LNode *pre = L,*P = pre-&amp;gt;next; //p为工作指针,pre指向其前驱 &#xA;    LNode *minpre = pre,*minp = p; //保存最小值结点及其前驱&#xA;    while(p!=NULL)&#xA;    {&#xA;        if(p-&amp;gt;data &amp;lt; minp-&amp;gt;data)&#xA;        {&#xA;            minp = p;  //找到比之前找到的最小值结点更小的结点&#xA;            minpre = pre;&#xA;        }&#xA;        pre = p;   //继续扫描下一个结点&#xA;        p = p-&amp;gt;next;&#xA;    }&#xA;    minpre-&amp;gt;next = minp-&amp;gt;next; //删除最小值结点&#xA;    free(minp);&#xA;    return L;&#xA;}&#xA;//若本题改为不带头结点的单链表，则实现上会有所不同，请读者自行思考。&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;237-带头结点的单链表就地逆置即辅助空间复杂度为o1&#34;&gt;2.3.7 带头结点的单链表就地逆置，即辅助空间复杂度为O(1)。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xA;将头结点摘下，然后从第一结点开始，依次插入到头结点的后面，直到最后一个结点为止，这样就实现了链表的逆置。&#xA;*/&#xA;LinkList Reverse_1(LinkList L)&#xA;{&#xA;    LNode *p,*r; //p为工作指针，r为p的后继，以防断链&#xA;    p = L-&amp;gt;next; //从第一个元素结点开始&#xA;    L-&amp;gt;next = NULL; //先将头结点L的next域置为NULL&#xA;    while(p!=NULL) //依次将元素结点摘下&#xA;    { &#xA;        r = p-&amp;gt;next;  //暂存p的后继&#xA;        p-&amp;gt;next = L-&amp;gt;next; //将p结点插入到头结点之后&#xA;        L-&amp;gt;next = p;&#xA;        p = r;&#xA;    }&#xA;    return L;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;238-带头结点的单链表l使其元素递增有序&#34;&gt;2.3.8 带头结点的单链表L使其元素递增有序&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xA;采用直接插入排序算法的思想，先构成只含一个数据结点的有序单链表，然后依次扫描单链表中剩下的结点*p (直至p==NULL为止)，在有序表中通过比较查找 *p 的前驱结点*pre，然后*p插入到*pre之后。该算法时间复杂度为O(n^2). &#xA;*/&#xA;void Sort(LinkList &amp;amp;L)&#xA;{&#xA;    LNode *p = L-&amp;gt;next,*pre;&#xA;    LNode *r = p-&amp;gt;next;   //r保持*p后继结点指针，以保证不断链 &#xA;    p-&amp;gt;next = NULL;     //构造只含一个数据结点的有序表&#xA;    p = r;&#xA;    while(p!=NULL)&#xA;    {&#xA;        r = p-&amp;gt;next; //保存*p 的后继结点指针&#xA;        pre = L;&#xA;        while(pre-&amp;gt;next != NULL &amp;amp;&amp;amp; pre-&amp;gt;next-&amp;gt;data &amp;lt; p-&amp;gt;data)&#xA;          pre = pre-&amp;gt;next; //在有序表中查找插入*p的前驱结点*pre&#xA;        p-&amp;gt;next = pre-&amp;gt;next; //将*p插入到*pre之后&#xA;        pre-&amp;gt;next = p;&#xA;        p = r;  //扫描单链表中剩下的结点&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;239-带头结点的单链表l无序删除表中所有介于给定的两个值之间的元素若存在&#34;&gt;2.3.9 带头结点的单链表L无序，删除表中所有介于给定的两个值之间的元素(若存在)&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xA;因为链表是无序的，所以只能逐个结点进行检查，进行删除。 &#xA;*/&#xA;void RangeDelete(LinkList &amp;amp;L,int min,int max)&#xA;{&#xA;    LNode *pr = L,&#xA;    *p = L-&amp;gt;link; //p是检测指针，pr是其前驱&#xA;    while(p!=NULL)&#xA;    {&#xA;        if(p-&amp;gt;data&amp;gt;min &amp;amp;&amp;amp; p-&amp;gt;data&amp;lt;max) //寻找到被删结点，删除&#xA;        {&#xA;            pr-&amp;gt;link = p-&amp;gt;link;&#xA;            free(p);&#xA;            p = pr-&amp;gt;link;&#xA;        }&#xA;        else  //否则继续寻找被删结点&#xA;        {&#xA;            pr = p;&#xA;            p = p-&amp;gt;link;&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;2310-找出两个链表的公共结点&#34;&gt;2.3.10 找出两个链表的公共结点&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xA;两个链表有公共结点，则两条链表的拓扑形状像一条平放的Y。&#xA;算法思路: 首先分别遍历两个链表得到它们的长度，并求出两个长度之差。在长的链表上先遍历长度之差个结点之后，再同步遍历两个链表，直到找到相同的结点，或者一直到链表结束。此时，该方法的时间复杂度为O(len1+len2)。&#xA;*/&#xA;LinkList Search_lst_Common(LinkList L1,LinkList L2)&#xA;{&#xA;    int len1 = Length(L1),len2 = Length(L2);&#xA;    LinkList longList,shortList;&#xA;    if(len1&amp;gt;len2)&#xA;    {&#xA;        longList = L1-&amp;gt;next;&#xA;        shortList = L2-&amp;gt;next;&#xA;        dist = len1 - len2;&#xA;    }&#xA;    else&#xA;    {&#xA;        longList = L2-&amp;gt;next;&#xA;        shortList = L1-&amp;gt;next;&#xA;        dist = len2-len1;&#xA;    }&#xA;    while(dist--)&#xA;        longList = longList-&amp;gt;next;&#xA;    &#xA;    while(longList != NULL)&#xA;    {&#xA;        if(longList == shortList)&#xA;            return longList;&#xA;        else&#xA;        {&#xA;            longList = longList-&amp;gt;next;&#xA;            shortList = shortList-&amp;gt;next;&#xA;        }&#xA;    }//while&#xA;&#x9;return NULL;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;2311-带头结点的单链表head为头指针递增输出数据元素并释放结点存储空间不允许使用数组作为辅助空间&#34;&gt;2.3.11 带头结点的单链表,head为头指针,递增输出数据元素，并释放结点存储空间。(不允许使用数组作为辅助空间)&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xA;对链表遍历，在每次遍历中找出整个链表的最小值元素，输出并释放结点所占空间;再查找次小值元素，输出并释放空间，如此下去，直至链表为空，最后释放头结点所占存储空间。该算法的时间复杂度为O(n^2)。&#xA;*/&#xA;void Min_Delete(LinkList &amp;amp;head)&#xA;{&#xA;    while(head-&amp;gt;next !=NULL)  //循环到仅剩头结点&#xA;    {&#xA;        pre = head;       //pre为元素最小值结点的前驱结点的指针&#xA;        p = pre-&amp;gt;next;    //p为工作指针&#xA;        while(p-&amp;gt;next != NULL)&#xA;        {&#xA;            if(p-&amp;gt;next-&amp;gt;data &amp;lt; pre-&amp;gt;next-&amp;gt;data);&#xA;            pre = p;   //记住当前最小值结点的前驱&#xA;            p = p-&amp;gt;next; &#xA;        }&#xA;        print(pre-&amp;gt;next-&amp;gt;data); //输出最小值&#xA;        u = pre-&amp;gt;next;    //删除元素值最小的结点，释放结点空间&#xA;        pre-&amp;gt;next = u-&amp;gt;next;&#xA;        free(u);&#xA;    }//while&#xA;    free(head);  //释放头结点&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;2312-带头结点的单链表a分解为使a表中含有原表中序号为奇数的元素b表中含有原表中序号为偶数的元素相对顺序保持不变&#34;&gt;2.3.12 带头结点的单链表A分解为使A表中含有原表中序号为奇数的元素，B表中含有原表中序号为偶数的元素，相对顺序保持不变。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xA;设置一个访问变量(初值为0),每访问一个结点序号自动加1，然后根据序号的奇偶性将结点插入到A表或B表中，重复以上操作直到表尾。&#xA;为了保持原来结点的顺序，采用尾插法建立单链表。此外，本算法完全可以不用设置序号变量。while循环中的代码改为将结点插入到表A中并将下一结点插入到B中，这样while中第一处理的结点就是奇数号结点，第二处理的就是偶数号结点。&#xA;*/&#xA;LinkList DisCreat_1(LinkList &amp;amp;A)&#xA;{&#xA;    int i=0;&#xA;    B = (LinkList)malloc(sizeof(LNode));&#xA;    B-&amp;gt;next = NULL;&#xA;    LNode *ra = A,*rb = B;&#xA;    p = A-&amp;gt;next;&#xA;    A-&amp;gt;next = NULL;&#xA;    while(p!=NULL)&#xA;    {&#xA;        i++;&#xA;        if(i%2==0)&#xA;        {&#xA;            rb-&amp;gt;next = p;&#xA;            rb = p;&#xA;        }&#xA;        else&#xA;        {&#xA;            ra-next = p;&#xA;            ra = p;&#xA;        }&#xA;        p = p-&amp;gt;next;&#xA;    }&#xA;    ra-&amp;gt;next = NULL;&#xA;    rb-next = NULL;&#xA;    return B;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;2313-带头结点的单链表ca1b1a2b2ambn拆解为两个线性表使得aa1a2anb-&#34;&gt;2.3.13 带头结点的单链表C={a1,b1,a2,b2······am,bn}拆解为两个线性表，使得A={a1,a2···an}，B =&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xA;采用上题的思路，不设序号变量，二者的的区别在于对B表的建立采用头插法。这里需要注意的是，采用头插法插入结点后，*p的指针域已改变，若不设变量保存其后继结点则会引起断链，从而导致算法出错。&#xA;*/&#xA;LinkList DisCreat_2(LinkList &amp;amp;A)&#xA;{&#xA;    LinkList B = (LinkList)malloc(sizeof(LNode)); //创建B表表头&#xA;    B-&amp;gt;next = NULL;          // B表的初始化&#xA;    LNode *p = A-&amp;gt;next,*q;   //p为工作指针&#xA;    LNode *ra = A;     //ra始终指向A的尾结点&#xA;    while(p!=NULL)&#xA;    {&#xA;        ra-&amp;gt;next = p;      //将*p链到A的表尾&#xA;     &#x9;ra = p;&#xA;        p = p-&amp;gt;next;&#xA;        q = p-&amp;gt;next;         // 头插后,*p将断链，因此用q记忆*p的后继&#xA;        p-&amp;gt;next = B-&amp;gt;next;   //将*p插入到B的前端&#xA;        B-&amp;gt;next = p;&#xA;        p = q;&#xA;    }&#xA;&#x9;ra-&amp;gt;next = NULL; //A尾结点的next域置空&#xA;    return B;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;2314-递增的单链表去掉表中重复的元素只保留一个数值&#34;&gt;2.3.14 递增的单链表，去掉表中重复的元素，只保留一个数值&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xA;由于是有序表，所有相同值域的结点都是相邻的。用p扫描递增单链表L,若*p结点的值域等于其后继结点的值域，则删除后者，否则p移向下一个结点。实际时间复杂度为O(n),空间复杂度为O(1)。&#xA;*/&#xA;void Del_Same(LinkList &amp;amp;L)&#xA;{&#xA;    LNode *P = L-&amp;gt;next,*q;&#xA;    if(p==NULL)&#xA;    &#x9;return;&#xA;    while(p-&amp;gt;next !=NULL)&#xA;    {&#xA;        q = p-&amp;gt;next;  //q指向*p的后继结点&#xA;        if(p-&amp;gt;data == q-&amp;gt;data) //找到重复的结点&#xA;        {&#xA;            p-&amp;gt;next = q-&amp;gt;next;  //释放*q结点&#xA;            free(q);&#xA;        }&#xA;        else&#xA;            p = p-&amp;gt;next; &#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;2315-两个递增的单链表归并为一个递减的单链表并要求利用原来两个单链表的结点存放归并后的单链表&#34;&gt;2.3.15 两个递增的单链表归并为一个递减的单链表，并要求利用原来两个单链表的结点存放归并后的单链表&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xA;合并时，均从第一个结点起开始比较，将较小的结点链入链表中，同时后移工作指针。该问题要求结果链表按元素值递减次序排列，故新链表的建立应该采用头插法。比较结束后，可能会有一个链表非空，此时用头插法将剩下的结点依次插入新链表中即可。&#xA;*/&#xA;void MergeList(LinkList &amp;amp;La,LinkList &amp;amp;Lb)&#xA;{&#xA;    LNode *r,*pa = La-&amp;gt;next, *pb = Lb-&amp;gt;next;&#xA;    La-&amp;gt;next = NULL; //La作为结构链表的头指针，先将结果链表初始化为空&#xA;    while(pa &amp;amp;&amp;amp; pb) //当两链表不空时，循环&#xA;    {&#xA;        if(pa-&amp;gt;data &amp;lt;= pb-&amp;gt;next)&#xA;        {&#xA;            r = pa-&amp;gt;next;&#xA;&#x9;&#x9;&#x9;pa-&amp;gt;next = La-&amp;gt;next;&#xA;            La-&amp;gt;next = pa;&#xA;            pa = r;&#xA;        }&#xA;        else&#xA;        {&#xA;            r = pb-&amp;gt;next;     //r暂存pb的后继结点指针&#xA;            pb-&amp;gt;next = La-&amp;gt;next;&#xA;            La-&amp;gt;next = pb;   //将pb结点链于结果表中，同时逆置&#xA;            pb =r;   //恢复pb为当前待比较结点&#xA;        }&#xA;        if(pa)&#xA;            pb = pa;     //通常情况下会剩一个链表非空，处理剩余的部分。&#xA;        while(pb)&#x9;&#x9; //处理剩下的一个非空链表&#xA;        {&#x9;&#x9;&#xA;            r = pb-&amp;gt;next; //依次插入到La中&#xA;            pb-&amp;gt;next = La-&amp;gt;next;&#xA;            La-&amp;gt;next = pb;&#xA;            pb =r;&#xA;        }&#xA;        free(Lb);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;2316-两个带头结点并且递增的单链表a和b中产生单链表cc中包含它们的公共元素要求不破坏ab的结点&#34;&gt;2.3.16 两个带头结点并且递增的单链表A和B中产生单链表C，C中包含它们的公共元素，要求不破坏A、B的结点&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xA;表A、B都有序，可从第一个元素起依次比较A、B两表的元素，若元素值不等，则值小的指针往后移。若元素值相等，则创建一个值等于两结点的元素值的新结点，使用尾插法插入到新的链表中，并将两个原表指针后移一位，直到其中一个链表遍历到表尾。&#xA;*/&#xA;void Get_Common(LinkList A,LinkList B)&#xA;{&#xA;    LNode *p = A-&amp;gt;next,*q = B-&amp;gt;next. *r,*s;&#xA;    LinkList C = (LinkList)malloc(sizeof(LNode)); //建立表C&#xA;    r = C;                   //r始终指向C的尾结点&#xA;    while(p!=NULL &amp;amp;&amp;amp; q!=NULL) //循环跳出条件&#xA;    {&#xA;        if(p-&amp;gt;data &amp;lt; q-&amp;gt;data)&#xA;        &#x9;p = p-&amp;gt;next;   //若A的当前元素较小，后移指针&#xA;        else if(p-&amp;gt;data &amp;gt; q-&amp;gt;data) &#xA;            q = q-&amp;gt;next;  //若B的当前元素较小，后移指针&#xA;        else   //找到公共元素结点&#xA;        {&#xA;            s = (LNode*)malloc(sizeof(LNode));&#xA;            s-&amp;gt;data = p-&amp;gt;data; //复制产生结点*s&#xA;            r-next = s; //将*s链接到C上&#xA;            r = s;&#xA;            p = p-&amp;gt;next;  //表A和B继续向后扫描&#xA;            q = q-&amp;gt;next;&#xA;        }&#xA;        r -&amp;gt;next = NULL;   //置C尾结点指针为空&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;2317-两个递增的单链表a和b将a和b的公共元素存放于a链表中&#34;&gt;2.3.17 两个递增的单链表A和B，将A和B的公共元素存放于A链表中&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xA;采用归并的思想，设置两个工作指针pa和pb,对两个链表进行归并扫描，只有同时出现在两集合中的元素才链接到结果表中且仅保留一个，其他的结点全部释放。当一个链表遍历完毕后，释放另一个表中剩下的全部结点。时间复杂度为O(len1+len2),空间复杂度为O(1).&#xA;*/&#xA;LinkList Union(LinkList &amp;amp;la,LinkList &amp;amp;lb)&#xA;{&#xA;    pa = la-&amp;gt;next;&#xA;    pb = lb-&amp;gt;next;&#xA;    pc = la;     //结果表中当前合并结点的前驱指针&#xA;    while(pa &amp;amp;&amp;amp; pb)&#xA;    {&#xA;        if(pa-&amp;gt;data == pb-&amp;gt;data) //交集并入结果表中&#xA;        {&#xA;            pc-&amp;gt;next = pa; //A中结点链表到结果表&#xA;            pc =pa;&#xA;            pa = pa-&amp;gt;next;&#xA;            u = pb;&#xA;            pb = pb-&amp;gt;next;&#xA;            free(u);&#xA;        }&#xA;        else if(pa-&amp;gt;data &amp;lt; pb-&amp;gt;data) //若A中当前结点值小于B中当前结点值&#xA;        {&#xA;            u=pa;&#xA;            pa = pa-&amp;gt;next;&#xA;            free(u);&#xA;        }&#xA;        else   //若B中当前结点值小于A中当前结点值&#xA;        {&#xA;            u = pb;&#xA;            pb = pb-&amp;gt;next;&#xA;            free(u);  //释放B中剩余结点&#xA;        }&#xA;    }//while结束&#xA;    while(pa)  //B已遍历完，A未完&#xA;    {&#xA;        u = pa;&#xA;        pa = pa-&amp;gt;next;  &#xA;        free(u);   //释放A中剩余结点&#xA;    }&#xA;    while(pb){  //A已遍历完，B未完&#xA;        u = pb;&#xA;        pb = pb-&amp;gt;next;&#xA;        free(u);  //释放B中剩余结点&#xA;    }&#xA;    pc-&amp;gt;next = NULL; //置结果链表尾指针为NULL&#xA;    free(lb); //释放B表的头结点&#xA;    return la;&#xA;   &#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;2318-判断单链表b中的序列是否是单链表a中序列的连续子序列&#34;&gt;2.3.18 判断单链表B中的序列是否是单链表A中序列的连续子序列&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xA;操作从两个链表的第一个结点开始，若对应数据相等，则后移指针;若对应数据不等，则A链表从上次开始比较结点的后继开始，B链表仍从第一个结点开始比较，直到B链表表到尾表示匹配成功。A链表到尾而B链表未到尾表示失败。操作中应记住A链表每次的开始结点，以便下次匹配时好从其后继开始。&#xA;*/&#xA;int Pattern(LinkList A,LinkList B)&#xA;{&#xA;    LNode *p = A; //p为A链表的工作指针，本题假定A和B均为结点&#xA;    LNode *pre =p; //pre记住每趟比较中A链表的开始结点&#xA;    LNode *q = B; //q是B链表的工作指针&#xA;    while(p &amp;amp;&amp;amp; q)&#xA;    {&#xA;        if(p-&amp;gt;data == q-&amp;gt;data) //结点值相同&#xA;        {&#xA;            p = p-&amp;gt;next;&#xA;            q = q-&amp;gt;next;&#xA;        }&#xA;        else&#xA;        {&#xA;            pre = pre-&amp;gt;next;&#xA;            p = pre;  //A链表新的开始比较结点&#xA;            q = B;  //q从链表第一个结点开始&#xA;        }&#xA;        if(q==NULL) //B已经比较结束&#xA;           &#x9;return 1;  //说明B是A的子列&#xA;        else&#xA;            return 0;  //B不是A的子列&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;2319-判断带头结点的循环双链表是否对称&#34;&gt;2.3.19 判断带头结点的循环双链表是否对称&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xA;让p从左到右扫描，q从右向左扫描，直到它们指向同一结点(p==q,当循环双链表中结点个数为奇数时)或相邻(p-&amp;gt;next=q 或q-&amp;gt;prior =p,当循环双链表中结点个数为偶数时)为止若它们所指结点值相同，则继续进行下去，否则返回0。若比较全部相等，则返回1。&#xA;*/&#xA;int Symmetry(DLinkList L)&#xA;{&#xA;    DNode *p = L-&amp;gt;next,*q = L-&amp;gt;prior; //两头工作指针&#xA;    while(p!=q &amp;amp;&amp;amp; p-&amp;gt;next!=q)   &#xA;    {   &#xA;        if(p-&amp;gt;data == q-&amp;gt;data) //所指结点值相同则继续比较&#xA;        {&#xA;            p = p-&amp;gt;next;&#xA;            q = q-&amp;gt;prior;&#xA;        }&#xA;        else    //否则，返回0&#xA;            return 0;&#xA;        return 1; //比较结束后返回1&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;2320-将循环单链表h2链接到h1之后要求链接后的链表仍保持循环链表形式&#34;&gt;2.3.20 将循环单链表h2链接到h1之后，要求链接后的链表仍保持循环链表形式&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xA;先找到两个链表的尾指针，将第一个链表的尾指针与第二个链表的头结点链接起来，再使之成为循环的。&#xA;*/&#xA;LinkList Link(LinkList &amp;amp;h1,LinkList &amp;amp;h2)&#xA;{&#xA;    LNode *p,*q; //分别指向两个链表的尾结点&#xA;    p = h1;&#xA;    while(p-&amp;gt;next != h1) //寻找h1的尾结点&#xA;        p = p-&amp;gt;next;&#xA;    q = h2;&#xA;    while(q-&amp;gt;next != h2) //寻找h2的尾结点&#xA;        q = q-&amp;gt;next;&#xA;    p-&amp;gt;next = h2;  //将h2链接到h1之后&#xA;    q-&amp;gt;next = h1;  //令h2的尾结点指向h1&#xA;    return h1;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;2321-带头结点的循环单链表结点值均为正整数反复找出结点值最小的结点输出并删除直到单链表为空再删除表头结点&#34;&gt;2.3.21 带头结点的循环单链表，结点值均为正整数，反复找出结点值最小的结点输出并删除，直到单链表为空，再删除表头结点。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xA;对于循环单链表L，在不空时循环，每循环一次查找一个最小结点(由minp指向最小值结点，minpre指向其前驱结点)并删除它。最后释放头结点。&#xA;*/&#xA;void Del_All(LinkList &amp;amp;L)&#xA;{&#xA;    LNode *p,*pre,*minp,*minpre;&#xA;    while(L-&amp;gt;next != L)&#xA;    {&#xA;        P = l-&amp;gt;next; pre = L; //p为工作指针，pre指向其前驱&#xA;        min = p;        &#xA;        minpre = pre;   //minp指向最小值结点&#xA;        while(p != L)  //循环一遍，查找最小值结点&#xA;        {&#xA;            if(p-&amp;gt;data &amp;lt; minp-&amp;gt;data)&#xA;            {&#xA;                minp = p;   //找到值更小的结点&#xA;                minpre = pre; &#xA;            }&#xA;            pre = p;  //=查找下一个结点&#xA;            p = p-&amp;gt;next;&#xA;        }&#xA;        prinf(&amp;#34;%d&amp;#34;,minp-&amp;gt;data); &#xA;        minpre-&amp;gt;next = minp-&amp;gt;next; //将最小值结点从表中&amp;#34;断开&amp;#34;&#xA;        free(minp);&#xA;    }&#xA;    free(L);   //释放头结点&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;241--查找链表倒数第-k-个位置上的结点-k为正整数若查找成功输出该结点的data域的值并返回1否则只返回0&#34;&gt;2.4.1  查找链表倒数第 k 个位置上的结点 (k为正整数)。若查找成功，输出该结点的data域的值，并返回1;否则只返回0。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xA;描述算法的基本思想:定义两个指针变量p和q,初始时均指向头结点的下一个结点(链表的第一个结点),p指针沿链表移动;当p指针移动到第k个结点时，q指针开始于p指针同步移动;当p指针移动到最后一个结点时，q指针所指示结点为倒数第k个结点。以上过程对链表仅进行一遍扫描。&#xA;描述算法的详细实现步骤:&#xA;① count=0, p和q指向链表表头结点的下一个结点。&#xA;② 若p为空，转⑤&#xA;③ 若count等于k,则q指向下一个结点;否则，count = count +1。&#xA;④ p指向下一个结点，转②&#xA;⑤ 若count等于k,则查找成功，输出该结点的data域的值，返回1;否则，说明超过了线性表的长度,查找长度,返回0。&#xA;⑥ 算法结束。&#xA;程序设计语言描述算法:&#xA;*/&#xA;typedef struct LNode&#xA;{&#xA;&#x9;int data;&#xA;    struct LNode *link;&#xA;}LNode,*LinkList&#xA;&#xA;int Search_k(LinkList list,int k)&#xA;{&#xA;    LNode*p = list-&amp;gt;link,*q = list-&amp;gt;link; //指针p、q指示第一个结点&#xA;    int count =0;&#xA;    while(p!=NULL) //遍历链表直到第一个结点&#xA;    {&#xA;        if(count &amp;lt; k) count++; //计数，若count&amp;lt;k只移动p&#xA;        else q = q-&amp;gt;link;&#xA;        p = p-&amp;gt;link;  //之后让p、q同步移动&#xA;    }//while&#xA;    if(count &amp;lt; k)  //查找失败返回0&#xA;    &#x9;return 0;  //否则打印并返回1&#xA;    else&#xA;    {&#xA;        printf(&amp;#34;%d&amp;#34;,q-&amp;gt;data);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;242-带头结点的单链表保存保存单词当两个单词有相同的后缀时可共享相同的后缀存储空间找出由-str1-和-str2所指向两个链表共同后缀的起始位置&#34;&gt;2.4.2 带头结点的单链表保存保存单词，当两个单词有相同的后缀时，可共享相同的后缀存储空间，找出由 str1 和 str2所指向两个链表共同后缀的起始位置。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xA;描述算法的基本设计思想&#xA;采用程序设计语言描述算法&#xA;说明时间复杂度为O(len1+len2)&#xA;*/&#xA;typedef struct Node&#xA;{&#xA;&#x9;char data;&#xA;    struct Node *next;&#xA;}SNode;&#xA;&#xA;/*求链表长度的函数*/&#xA;int listlen(SNode *head)&#xA;{&#xA;    int len = 0;&#xA;    while(head-&amp;gt;next != NULL)&#xA;    {&#xA;        len++;&#xA;        head = head-&amp;gt;next;&#xA;    }&#xA;    return len;&#xA;}&#xA;/*找出共同后缀的起始地址*/&#xA;SNode* find_addr(SNode *str1,SNode *str2)&#xA;{&#xA;    int m,n;&#xA;    SNode *p,*q;&#xA;    m = listlen(str1);  //求str1的长度&#xA;    n = listen(str2); //求str2的长度&#xA;    for(p = str1; m&amp;gt;n;m--) //若m&amp;gt;n，使q指向链表中的第 n-m+1 个结点&#xA;        p = p-&amp;gt;next;&#xA;    for(q = str2; m&amp;lt;n;n--) //若m&amp;lt;n，使q指向链表中的第 n-m+1 个结点&#xA;        q = q-&amp;gt;next;&#xA;    while(p-&amp;gt;next!= NULL &amp;amp;&amp;amp; p-&amp;gt;next!= q-&amp;gt;next) //将指针p和q同步向后移动&#xA;    {&#xA;        p = p-&amp;gt;next;&#xA;        q = q-&amp;gt;next;&#xA;    }//while&#xA;    return p-&amp;gt;next; //返回共同后缀的起始地址&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;243-带头结点的单链表保存-m-个整数且-datann为正整数-对于链表中绝对值相等的结点仅保留第一次出现的结点而删除其余绝对值相等的结点时间上尽可能高效&#34;&gt;2.4.3 带头结点的单链表保存 m 个整数，且 |data|&amp;lt;=n，(n为正整数), 对于链表中绝对值相等的结点，仅保留第一次出现的结点而删除其余绝对值相等的结点，时间上尽可能高效。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xA;描述算法的基本设计思想是用空间换时间，使用辅助数组记录链表中已出现的数值，从而只需对链表进行一趟扫描。&#xA;因为|data|&amp;lt;=n,故辅助数组q的大小为n+1,各元素的初值均为0。依次扫描链表中的各结点，同时检查q[|data|]的值，若为0则保留该结点，并令q[|data|] = 1，否则将该结点从链表中删除。&#xA;时间复杂度为O(m),空间复杂度为O(n)&#xA;*/&#xA;&#xA;/*使用C或C++给出单链表结点的数据类型定义*/&#xA;typedef int node&#xA;{&#xA;    int *data;&#xA;    struct node *link;&#xA;}NODE;&#xA;Typedef NODE *PNODE;&#xA;void func(PNODE h,int n)&#xA;{&#xA;    PNODE p=h,r;&#xA;    int *q,m;&#xA;    q = (int*)malloc(sizeof(int)*n+1));&#xA;    for(int i=0; i&amp;lt;n+1;i++)&#xA;        *(q+i) = 0;&#xA;    while(p-&amp;gt;link != NULL)&#xA;    {&#xA;        m = p-&amp;gt;link-&amp;gt;data&amp;gt;0 ? p-&amp;gt;link-&amp;gt;data: -p-&amp;gt;link-&amp;gt;data;&#xA;        if(*(q+m)==0)&#xA;        {&#xA;            *(q+m)=1;&#xA;            p = p-&amp;gt;link;&#xA;        }&#xA;        else&#xA;        {&#xA;            r = p-&amp;gt;link;&#xA;            p-&amp;gt;link = r-&amp;gt;link;&#xA;            free(r);&#xA;        }&#xA;    }&#xA;    free(q);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;311-单链表头指针为ldata域为字符型判断链表的全部-n-个字符是否中心对称例如-xyx-是中心对称&#34;&gt;3.1.1 单链表头指针为L，data域为字符型。判断链表的全部 n 个字符是否中心对称。例如 xyx 是中心对称。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xA;让链的前一半元素依次进栈，在处理链表的最后一半元素时，当访问到链表的一个元素后，就从栈中弹出一个元素，两个元素比较，若相等，则将链表中的下一个元素与栈中弹出的元素比较，直至链表到尾。这时若栈是空栈，则得出链表中心对称的结论;否则，当链表中的一个元素与弹出元素不等时，结论为非中心对称。&#xA;*/&#xA;int dc(LinkList L,int n)&#xA;{&#xA;    int i;&#xA;    char s[n/2];   //s字符栈&#xA;    p = L-&amp;gt;next;   //p是链表的工作指针，指向待处理的当前元素&#xA;    for(i=0;i&amp;lt;n/2;i++)  //链表前一半元素进栈&#xA;    {&#xA;        s[i] = p-&amp;gt;data;&#xA;        p = p-&amp;gt;next;&#xA;    }&#xA;    i--;         //恢复最后的i值&#xA;    if(n%2 == 1) //若n是奇数，后移过中心结点&#xA;        p = p-&amp;gt;next;&#xA;    while(p!=NULL &amp;amp;&amp;amp; s[i]==p-&amp;gt;data) //检测是否中心对称&#xA;    {     &#xA;        i--;   //i充当栈顶指针&#xA;        p = p-&amp;gt;next;&#xA;    }&#xA;    if(i==-1)   //栈为空栈&#xA;        return i;  //链表中心对称&#xA;    else&#xA;        return 0;  //链表不中心对称&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;321--循环队列设置一个标志域tag并以-tag-的值为-0-或-1-来区分队头指针-front-和-队尾指针-rear-相同时的队列状态是--空-还是-满试编写此结构相应的入队和出队算法&#34;&gt;3.2.1  循环队列设置一个标志域tag，并以 tag 的值为 0 或 1 来区分队头指针 front 和 队尾指针 rear 相同时的队列状态是 &amp;quot; 空&amp;quot; 还是 “满”,试编写此结构相应的入队和出队算法。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xA;进队时置tag为1,出队时置tag为0。置tag =0、front =rear =0,这样队列的4要素如下:&#xA;队空条件: Q.front == Q.rear且Q.tag ==0&#xA;队满条件: Q.front == Q.rear且Q.tag ==1&#xA;进队操作: Q.data[Q.rear] =x; Q.rear = (Q.rear +1)% MaxSize; Q.tag =1&#xA;出队操作: x = Q.data[Q.front]; Q.front = (Q.front+1) % MaxSize; Q.tag =0&#xA;*/&#xA;&#xA;/*&#xA;设&amp;#34;tag&amp;#34;法循环入队算法&#xA;*/&#xA;int EnQueue1(SqQueue &amp;amp;Q,int x)&#xA;{&#xA;    if(Q.front==Q.rear &amp;amp;&amp;amp; Q.tag==1)&#xA;        return 0;  //两个条件都满足时则队满&#xA;    Q.data[Q.rear] = x;&#xA;    Q.rear = (Q.rear +1) % MaxSize;&#xA;    Q.tag = 0;   //可能队满&#xA;    return 1;&#xA;}&#xA;&#xA;/*&#xA;设&amp;#34;tag&amp;#34;法循环出队算法&#xA;*/&#xA;int DeQueue1(SeQueue &amp;amp;Q,int x)&#xA;{&#xA;    if(Q.front==Q.rear &amp;amp;&amp;amp; Q.tag == 0)&#xA;        return 0; //两个条件都满足时则队空&#xA;    x = Q.data[Q.front];&#xA;    Q.front = (Q.front +1) % MaxSize;&#xA;    Q.tag = 0;   //可能队空&#xA;    return 1;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;322-q是一个队列s是一个空栈实现将队列中的元素逆置的算法&#34;&gt;3.2.2 Q是一个队列，S是一个空栈，实现将队列中的元素逆置的算法。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xA;让队列中的元素逐个出队列,入栈;&#xA;全部入栈后再逐个出栈,入队列。&#xA;*/&#xA;void Inverser(Stack S,Queue Q)&#xA;{&#xA;    while(!QueueEmpty(Q))&#xA;    {&#xA;        x = DeQueue(Q); //栈中全部元素依次出队&#xA;        Push(S,x);   //元素依次入栈&#xA;    }&#xA;    while(!StackEmpty(S))&#xA;    {&#xA;        Pop(S,x);      //栈中全部元素依次出栈&#xA;        EnQueue(Q,x);  //再入队&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;323-利用两个栈-s1s2-来模拟一个队列已知栈的4个运算来实现该队列的-3-个运算&#34;&gt;3.2.3 利用两个栈 S1、S2 来模拟一个队列，已知栈的4个运算来实现该队列的 3 个运算。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xA;4个运算定义如下:&#xA;Push(S,x);&#xA;pop(S,x);&#xA;StackEmpty(S);&#xA;StackOverflow(S);&#xA;队列的3个运算分别是 Enqueue、Dequeue、QueueEmpty&#xA;*/&#xA;//进队算法&#xA;int EnQueue(Stack &amp;amp;S1,Stack &amp;amp;S2,int e)&#xA;{&#xA;    if(!StackOverflow(S1))&#xA;    {&#xA;        Push(S1,e);&#xA;        return 1;&#xA;    }&#xA;    if(StackOverflow(S1) &amp;amp;&amp;amp; !StackEmpty(S2))&#xA;    {&#xA;        while(!StackEmpty(S1))&#xA;        {&#xA;            Pop(S1,x);&#xA;            Push(S2,x);&#xA;        }&#xA;    }&#xA;    Push(S1,e);&#xA;    return 1;&#xA;}&#xA;&#xA;//出队算法&#xA;void DeQueue(Stack &amp;amp;S1,Stack &amp;amp;S2,int &amp;amp;x)&#xA;{&#xA;    if(!StackEmpty(S2))&#xA;    {&#xA;        Pop(S2,x);&#xA;    }&#xA;    else if(StackEmpty(S1))&#xA;    {&#xA;        printf(&amp;#34;队列为空&amp;#34;);&#xA;    }&#xA;    else&#xA;    {&#xA;        while(!StackEmpty(S1))&#xA;        {&#xA;            Pop(S1,x);&#xA;            Push(S2,x);&#xA;        }&#xA;        Pop(S2,x);&#xA;    }&#xA;}&#xA;&#xA;//队列为空&#xA;int QueueEmpty(Stack S1,Stack S2)&#xA;{&#xA;    if(StackEmpty(S1) &amp;amp;&amp;amp; StackEmpty(S2))&#xA;        return 1;&#xA;    else&#xA;        return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;331-判别算法表达式的括号是否配对以字符0作为算术表达式的结束符&#34;&gt;3.3.1 判别算法表达式的括号是否配对，以字符&amp;quot;\0&amp;quot;作为算术表达式的结束符。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;bool BracketCheck(char *str)&#xA;{&#xA;    InitStack(S);  //初始化栈&#xA;    int i =0;&#xA;    while(str[i] !=&amp;#39;\0&amp;#39;)&#xA;    {&#xA;        switch(str[i])&#xA;        {   //左括号入栈&#xA;            case &amp;#39;(&amp;#39;:&#xA;                Push(S,&amp;#39;(&amp;#39;);&#xA;                break;&#xA;            case &amp;#39;[&amp;#39;:&#xA;                Push(S,&amp;#39;(&amp;#39;);&#xA;                break;&#xA;            case &amp;#39;{&amp;#39;:&#xA;                Push(S,&amp;#39;(&amp;#39;);&#xA;                break;&#xA;            //遇到右括号,检测栈顶&#xA;            case &amp;#39;)&amp;#39;:&#xA;                Pop(S,e);&#xA;                if(e!=&amp;#39;(&amp;#39;)&#xA;                    return false;&#xA;                break;&#xA;            case &amp;#39;]&amp;#39;:&#xA;                if(e!=&amp;#39;[&amp;#39;)&#xA;                    return false;&#xA;                Pop(S,e);&#xA;                break;&#xA;            case &amp;#39;}&amp;#39;:&#xA;                Pop(S,e);&#xA;                if(e!=&amp;#39;{&amp;#39;)&#xA;                    return false;&#xA;                break;&#xA;            default:&#xA;                break;&#xA;        }//switch&#xA;    }//while&#xA;    if(!IsEmpty(S))&#xA;    {&#xA;        printf(&amp;#34;括号不匹配\n&amp;#34;);&#xA;        return false;&#xA;    }&#xA;    else&#xA;    {&#xA;        printf(&amp;#34;括号匹配\n&amp;#34;);&#xA;        return true;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;332-过江渡船每次只能载-10-辆车过江过江车辆分为客车类和货车类上渡船有如下规定同类车先到先上船客车先于货车上船且每上4辆客车才允许放上-1-辆货若等待客车不足-4-辆则以货车代替若无货车等待允许客车都上船试设计一个算法模拟渡口管理&#34;&gt;3.3.2 过江渡船每次只能载 10 辆车过江，过江车辆分为客车类和货车类，上渡船有如下规定：同类车先到先上船;客车先于货车上船，且每上4辆客车，才允许放上 1 辆货;若等待客车不足 4 辆，则以货车代替;若无货车等待，允许客车都上船，试设计一个算法模拟渡口管理。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xA;假设数组q的最大下标为10,,恰好是每次载渡的最大量。假设客车的队列为q1,货车的队列为q2。若q1充足，则每取4个q1元素后再取一个q2元素，直到q的长度为10。若q1不充足，则直接用q2补齐。&#xA;*/&#xA;Queue q;   //过江渡船载渡队列&#xA;Queue q1;  //客车队列&#xA;Queue q2;  //货车队列&#xA;void manager()&#xA;{&#xA;    int i=0,j=0; //j表示渡船上的总车辆数&#xA;    while(j&amp;lt;10)  //不足10辆时&#xA;    {&#xA;        if(!QueueEmpty(q1) &amp;amp;&amp;amp; i&amp;lt;4) //客车队列不为空，则未上足4辆&#xA;        {&#xA;            DeQueue(q1,x); //从客车队列出列&#xA;            EnQueue(q,x);  //客车上渡船&#xA;            i++;   //客车数加1&#xA;            j++;   //渡船上的总车辆数加1&#xA;        }&#xA;        else if(i==4 &amp;amp;&amp;amp; !QueueEmpty(q2)) //客车已上足4辆&#xA;        {&#xA;            DeQueue(q2,x); //从货车队列出列&#xA;            EnQueue(q,x);  //货车上渡船&#xA;            j++;    //渡船上的总车辆数加1&#xA;            i = 0;  //每上一辆车，i重新计数&#xA;        }&#xA;        else&#xA;        {&#xA;            while(j&amp;lt;10 &amp;amp;&amp;amp; i&amp;lt;4 &amp;amp;&amp;amp;!QueueEmpty(q2))  //客车队列空&#xA;            {&#xA;                DeQueue(q2,x);  //从货车队列出队&#xA;                EnQueue(q,x);  //货车上渡船&#xA;                i++;&#xA;                j++;  //渡船上的总车辆加1&#xA;            }&#xA;            i = 0;&#xA;        }&#xA;        if(QueueEmpty(q1) &amp;amp;&amp;amp; QueueEmpty(q2))&#xA;            j = 11;   //若货车和客车加起来不足10辆&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;411-编写后序遍历二叉树的非递归算法&#34;&gt;4.1.1 编写后序遍历二叉树的非递归算法&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xA;算法思想：后序非递归遍历二叉树的顺序是先访问左子树，再访问右子树，最后访问根结点。当用堆栈来存储结点时，必须分清返回根结点时是从左子树返回的还是从右子树返回的。所以，使用辅助指针r，其指向最近访问过的结点。也可在结点中增加一个标志域，记录是否已被访问。&#xA;PS:访问一个结点*p时，栈中结点恰好是*p结点的所有祖先。从栈底到栈顶结点再加上*p结点，刚好构成从根结点到*p结点的一条路径。在很多算法设计中都利用了这一特性求解，如求根结点到某结点的路径、求两个结点的最近公共祖先等，都可以利用这个思路来实现。&#xA;*/&#xA;void postOrder(BiTree T)&#xA;{&#xA;    InitStack(S);&#xA;    p = T;&#xA;    r = NULL;&#xA;    while(p|| !IsEmpty(S))&#xA;    {&#xA;        if(p){   //走到最左边&#xA;           push(S,p);&#xA;           p = p-&amp;gt;lchild;&#xA;        }&#xA;        else{  //向右&#xA;            GetTop(S,p);  //取栈顶结点&#xA;            if(p-&amp;gt;rchild &amp;amp;&amp;amp; p-&amp;gt;rchild != r)  //若右子树存在，且未被访问过&#xA;            {&#xA;                p = p-&amp;gt;rchild;  //转向右&#xA;                push(S,p);      //压入栈&#xA;                p = p-&amp;gt;lchild;  //再走到最左&#xA;            }&#xA;            else{               //否则，弹出结点并访问&#xA;                pop(S,p);       //将结点弹出&#xA;                visit(p-&amp;gt;data); //访问该结点&#xA;                r = p;          //记录最近访问过的结点&#xA;                p = NULL;       //结点访问完后，重置该指针&#xA;            }&#xA;        }//else&#xA;    }//while&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;412-编写二叉树的自下而上自右到左的层次遍历算法&#34;&gt;4.1.2 编写二叉树的自下而上、自右到左的层次遍历算法&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xA;一般的二又树层次遍历是自上而下、从左到右，这里的遍历顺序恰好相反。算法思想：利用原有的层次遍历算法，出队的同时将各结点指针入栈在所有结点入栈后再从栈顶开始依次访问即为所求的算法。具体实现如下：&#xA;1）把根结点入队列。&#xA;2）把一个元素出队列，遍历这个元素&#xA;3）依次把这个元素的右孩子、左孩子入队列。&#xA;4）若队列不空，则跳到（2），否则结束。&#xA;*/&#xA;void InvertLevel(BiTree bt){&#xA;&#x9;Stack s;&#xA;    Queue Q;&#xA;    if(bt!=NULL)&#xA;    {&#xA;        InitStack(s);  //栈初始化，栈中存放二叉树结点的指针&#xA;        InitQueue(Q);  //队列初始化，队列中存放二叉树结点的指针&#xA;        EnQueue(Q,bt);&#xA;        while(IsEmpty(Q)==false) //从上而下层次遍历&#xA;        {&#xA;            DeQueue(Q,p);&#xA;            Push(s,p); //出队，入栈&#xA;            if(p-&amp;gt;lchild)&#xA;                EnQueue(Q,p-&amp;gt;lchild); //若左子女不空，则入队列&#xA;            if(p-&amp;gt;rchild)&#xA;                EnQueue(Q,p-&amp;gt;rchild); //若右子女不空，则入队列&#xA;        }&#xA;        while(IsEmpty(s) == false){&#xA;            Pop(s,p);&#xA;            visit(p-&amp;gt;data);&#xA;        }  //自下而上、自右到左的层次遍历&#xA;    }//if结束&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;413-非递归算法求二叉树的高度&#34;&gt;4.1.3 非递归算法求二叉树的高度&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xA;采用层次遍历的算法，设置变量1eve1记录当前结点所在的层数，设置变量last指向当前层的最右结点，每次层次遍历出队时与last 指针比较，若两者相等，则层数加1，并让last指向下一层的最右结点，直到遍历完成。1eve1的值即为二叉树的高度。&#xA;*/&#xA;int Btdepth(BiTree T)&#xA;{&#xA;    if(!T)&#xA;        return 0;  //树空，高度为0&#xA;    int front= -1, rear = -1;&#xA;    int last = 0,level = 0; //last指向下一层第一个结点的位置&#xA;    BiTree Q[MaxSize]; //设置队列Q，元素是二叉树结点指针且容量足够&#xA;    Q[++rear] = T;  //将根结点入队&#xA;    BiTree p;&#xA;    while(front &amp;lt; rear) //队不空，则循环&#xA;    { &#xA;        p = Q[++front]; //队列元素出队，即正在访问的结点&#xA;        if(p-&amp;gt;lchild)&#xA;            Q[++rear] = p-&amp;gt;lchild;  //左孩子入队&#xA;        if(p-&amp;gt;rchild)&#xA;            Q[++rear] = p-&amp;gt;rchild; //右孩子入队&#xA;        if(front == last){  //处理该层的最右结点&#xA;            level++; //层数增1&#xA;            last = rear; //last指向下层&#xA;        }&#xA;     }&#xA;    return level;&#xA;}&#xA;&#xA;/*&#xA;求某层的结点个数、每层的结点个数、树的最大宽度等，都采用与此题类似的思想。当然，此题可编写递归算法，其实现如下&#xA;*/&#xA;int Btdepth2(BiTree T)&#xA;{&#xA;    if(T==NULL)&#xA;        return 0;  //空树，高度为0&#xA;    ldep = Btdepth(T-&amp;gt;lchild); //左子树高度&#xA;    rdep = Btdepth(T-&amp;gt;rchild); //右子树高度&#xA;    if(ldep &amp;gt; rdep)&#xA;        return ldep+1; //树的高度为子树最大高度加根节点&#xA;    else&#xA;        return rdep+1;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;414-二叉树各结点的值互不相同其先序遍历和中序遍历序列分别存于两个一维数组a1n和b1n中试编写算法建立该二叉树的二叉链表&#34;&gt;4.1.4 二叉树各结点的值互不相同，其先序遍历和中序遍历序列分别存于两个一维数组A[1···n]和B[1···n]中，试编写算法建立该二叉树的二叉链表。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xA;由先序序列和中序序列可以唯一确定一棵二叉树。算法的实现步骤如下：&#xA;1) 根据先序序列确定树的根结点。&#xA;2) 根据根结点在中序序列中划分出二叉树的左、右子树包含哪些结点，然后根据左、右子树结点在先序序列中的次序确定子树的根结点，即回到步骤1）。&#xA;3) 如此重复上述步骤，直到每棵子树仅有一个结点（该子树的根结点）为止。&#xA;*/&#xA;BiTree PreInCreat(int A[],int B[],int l1,int h1,int l2,int h2)&#xA;{&#xA;    //11,h1为先序的第一和最后一个结点下标，12,h2为中序的第一和最后一个结点下标&#xA;    //初始调用时,l1=l2=1, h1=h2=n&#xA;&#x9;root = (BiTNode*)malloc(sizeof(BiTNode));&#xA;    root-&amp;gt;data = A[l1];&#xA;    for(i = l2;B[i]!=root-&amp;gt;data;i++);&#xA;    llen = i - l2;&#xA;    rlen = h2 - i;&#xA;    if(llen)&#xA;        root-&amp;gt;lchild = PreInCreat(A,B,l1+1,l1+llen,l2,l2+llen-1);&#xA;    else&#xA;        root-&amp;gt;lchild = NULL;&#xA;    return root;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;415-二叉树按二叉链表形式存储写一个判别给定二叉树是否是完全二叉树的算法&#34;&gt;4.1.5 二叉树按二叉链表形式存储，写一个判别给定二叉树是否是完全二叉树的算法。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xA;根据完全二叉树的定义，具有n个结点的完全二叉树与满二又树中编号从1～n的结点一一对应。&#xA;算法思想：采用层次遍历算法，将所有结点加入队列（包括空结点）。遇到空结点时，查看其后是否有非空结点。若有，则二又树不是完全了叉树。&#xA;*/&#xA;bool IsComplete(BiTree T)&#xA;{&#xA;    InitQueue(Q);&#xA;    if(!T)&#xA;        return 1; //空树为满二叉树&#xA;    EnQueue(Q,T);&#xA;    while(!IsEmpty(Q))&#xA;    {&#xA;        DeQueue(Q,p);&#xA;        if(p)  //结点非空，将其左、右子树入队列&#xA;        {&#xA;            EnQueue(Q,p-&amp;gt;lchild); &#xA;            EnQueue(Q,p-&amp;gt;rchild);&#xA;        }&#xA;        else   //结点为空，检查其后是否有非空结点&#xA;            while(!IsEmpty(Q)){&#xA;                DeQueue(Q,p);&#xA;                if(p)    //结点非空，则二叉树为非完全二叉树&#xA;                    return 0;&#xA;            }&#xA;    }&#xA;    return 1;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;416-二叉树按二叉链表形式存储计算一棵给定二叉树的所有双分支结点个数&#34;&gt;4.1.6 二叉树按二叉链表形式存储，计算一棵给定二叉树的所有双分支结点个数。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xA;计算一棵二叉树b中所有双分支结点个数的递归模型f（b）如下:&#xA;f(b)=0&#x9;&#x9;                            若b=NULL&#xA;f(b)=f(b-&amp;gt;1chi1d) + f(b-&amp;gt;rchild) + 1    若*b为双分支结点&#xA;f(b)=f(b-&amp;gt;1chi1d) + f(b-&amp;gt;rchild)        其他情况（*b为单分支结点或叶子结点）&#xA;*/&#xA;int DsonNodes(BiTree b)&#xA;{&#xA;    if(b==NULL)&#xA;    &#x9;return 0;&#xA;    else if(b-&amp;gt;lchild!=NULL &amp;amp;&amp;amp; b-&amp;gt;rchild!=NULL)&#xA;        return DsonNodes(b-&amp;gt;lchild) + DsonNodes(b-&amp;gt;rchild)+1;&#xA;    else&#xA;        return DsonNodes(b-&amp;gt;lchild) + DsonNodes(b-&amp;gt;rchild);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;417-二叉树b按二叉链表形式存储编写一个树b中所有结点的左右子树进行交换的函数&#34;&gt;4.1.7 二叉树B按二叉链表形式存储，编写一个树B中所有结点的左、右子树进行交换的函数。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xA;采用递归算法实现交换二叉树的左、右子树，首先交换b结点的左孩子的左、右子树，然后交换b结点的右孩子的左、右子树，最后交换b结点的左、右孩子，当结点为空时递归结束（后序遍历的思想）。&#xA;*/&#xA;void swap(BiTree b)&#xA;{&#xA;    if(b){&#xA;        swap(b-&amp;gt;lchild);  //递归地交换左子树&#xA;        swap(b-&amp;gt;rchild);  //递归地交换右子树&#xA;        temp = b-&amp;gt;lchild;  //交换左、右孩子结点&#xA;        b-&amp;gt;lchild = b-&amp;gt;rchild;&#xA;        b-&amp;gt;rchild = temp;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;418--二叉树按二叉链表形式存储求先序遍历序列中第-k-1k二叉树中结点个数-个结点的值&#34;&gt;4.1.8  二叉树按二叉链表形式存储，求先序遍历序列中第 k (1&amp;lt;=k&amp;lt;=二叉树中结点个数) 个结点的值。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xA;设置一个全局变量i记录已访问过的结点的序号，其初值是根结点在先序序列中的序号，即1.当二叉树b为空时返回特殊字符，，当i==k时，表示找到了满足条件的结点，返回b-&amp;gt;data;当ik时，递归地在左子树中查找，若找到则返回该值，否则继续递归地在右子树中查找，并返回其结果。&#xA;本题实质上就是一个遍历算法的实现，只不过用一个全局变量来记录访问的序号，求其他遍历序列的第k个结点也采用相似的方法。二叉树的遍历算法可以引申出大量的算法题，因此考生务必要熟练掌握二又树的遍历算法。&#xA;*/&#xA;int i=1;  //遍历序号的全局变量&#xA;int PreNode(BiTree b,int k)&#xA;{&#xA;    if(b==NULL) //空结点，则返回特殊字符&#xA;        return &amp;#39;#&amp;#39;; //相等，则当前结点即为第k个结点&#xA;    if(i==k)&#xA;        return b-&amp;gt;data;&#xA;    i++; //下一个结点&#xA;    ch = PreNode(b-&amp;gt;lchild,k); //左子树中递归寻找&#xA;    if(ch !=&amp;#39;#&amp;#39;) //在左子树中，则返回该值&#xA;        return ch;&#xA;    ch = PreNode(b-&amp;gt;rchild,k); //在右子树中递归寻找&#xA;    &#x9;return ch;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;419-二叉树按二叉链表形式存储对于树中每个元素值为-x-的结点删去以它为根的子树并释放相应的空间&#34;&gt;4.1.9 二叉树按二叉链表形式存储，对于树中每个元素值为 x 的结点，删去以它为根的子树，并释放相应的空间。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xA;删除以元素值x为根的子树，只要能删除其左、右子树，就可以释放值为x的根结点，因此宜采用后序遍历。&#xA;算法思想：删除值为x的结点，意味着应将其父结点的左（右）子女指针置空，用层次遍历易于找到某结点的父结点。&#xA;本题要求删除树中每个元素值为x的结点的子树，因此要遍历完整棵二叉树。&#xA;*/&#xA; void DeleteXTree(BiTree bt)   //删除以bt为根的子树&#xA; {&#xA;     if(bt){&#xA;         DeleteTree(bt-&amp;gt;lchild);&#xA;         DeleteTree(bt-&amp;gt;rchild); //删除bt的左子树、右子树&#xA;         free(bt);  //释放被删结点所占的存储空间&#xA;     }&#xA; }&#xA;&#xA;//在二叉树上查找所有以x为元素值的结点，并删除以其为根的子树&#xA;void Search(BiTree bt,int x)&#xA;{&#xA;    BiTree Q[]; //Q是存放二叉树结点指针的队列，容量足够大&#xA;    if(bt){&#xA;        if(bt-&amp;gt;data == x){  //若根结点值为x，则删除整棵树&#xA;            DeleteXTree(p-&amp;gt;lchild);&#xA;        &#x9;exit(0);    &#xA;        }&#xA;        Init Queue(Q);&#xA;        EnQueue(Q,bt);&#xA;        while(!IsEmpty(Q)){&#xA;            DeQueue(Q,p);&#xA;            if(p-&amp;gt;lchild) //若左子女非空&#xA;                if(p-&amp;gt;lchild-&amp;gt;data == x){ //左子树符合则删除左子树&#xA;                    DeleteXTree(p-&amp;gt;lchild);&#xA;                    p-&amp;gt;lchild = NULL;&#xA;                }  //父结点的左子女置空&#xA;                else&#xA;            &#x9;&#x9;EnQueue(Q,p-&amp;gt;lchild); //左子树入队列&#xA;            if(p-&amp;gt;rchild) //若右子女非空&#xA;                if(p-&amp;gt;rchild-&amp;gt;data ==x){ //右子女符合则删除右子树&#xA;                    DeleteXTree(p-&amp;gt;rchild);&#xA;                    p-&amp;gt;rchild = NULL; //父结点的右子女置空&#xA;                }&#xA;            &#x9;else&#xA;                    EnQueue(Q,p-&amp;gt;rchild); //右子女入队列&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;4110-二叉树中查找值为-x-的结点打印值为-x-的结点的所有祖先假设值为x的结点不多于一个&#34;&gt;4.1.10 二叉树中查找值为 x 的结点，打印值为 x 的结点的所有祖先，假设值为x的结点不多于一个。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xA;算法思想：采用非递归后序遍历，最后访问根结点，访问到值为x的结点时，栈中所有元素均为该结点的祖先，依次出栈打印即可。因为查找的过程就是后序遍历的过程，因此使用的栈的深度不超过树的深度。&#xA;*/&#xA;typedef struct{&#xA;    BiTree t;&#xA;    int tag; //tag=0表示左子女已被访问，tag=1表示右子女已被访问&#xA;}stack;&#xA;void Search(BiTree bt,int x)&#xA;{&#xA;    stack s[]; //栈容量足够大&#xA;    top = 0;&#xA;    while(bt!=NULL || top&amp;gt;0) &#xA;    {&#xA;        while(bt!=NULL &amp;amp;&amp;amp; bt-&amp;gt;data !=x) //结点入栈&#xA;        {&#xA;            s[++top].t = bt;&#xA;            s[top].tag = 0;&#xA;            bt = bt-&amp;gt;lchild; //沿左分支向下&#xA;        }&#xA;        if(bt-&amp;gt;data ==x)&#xA;        {&#xA;        &#x9;printf(&amp;#34;所查结点的所有祖先结点的值为:\n&amp;#34;); //找到x&#xA;            for(i=1;i&amp;lt;=top;i++)&#xA;                printf(&amp;#34;%d&amp;#34;,s[i].t-&amp;gt;data); //输出祖先值后结束&#xA;            exit(1);&#xA;        }&#xA;        while(top!=0 &amp;amp;&amp;amp; s[top].tag==1)&#xA;            top--;  //退栈（空遍历）&#xA;        if(top!=0)&#xA;        {&#xA;            s[top].tag =1;&#xA;            bt = s[top].t-&amp;gt;rchild;  //沿右分支向下遍历&#xA;        }&#xA;    }//while&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;4111-二叉树中-p-和-q分别为指向该二叉树中任意两个结点的指针试编写算法找到-p-和-q的最近公共祖先结点-r-&#34;&gt;4.1.11 二叉树中 p 和 q分别为指向该二叉树中任意两个结点的指针，试编写算法找到 p 和 q的最近公共祖先结点 r 。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xA;后序遍历最后访问根结点，即在递归算法中，根是压在栈底的。&#xA;本题要找p和q的最近公共祖先结点r，不失一般性，设p在q的左边。&#xA;算法思想：采用后序非递归算法，栈中存放二又树结点的指针，当访问到某结点时，栈中所有元素均为该结点的祖先。后序遍历必然先遍历到结点p，栈中元素均为p的祖先。先将栈复制到另一辅助栈中。继续遍历到结点q时，将栈中元素从栈顶开始逐个到辅助栈中去匹配，第一个匹配（即相等）的元素就是结点p和q的最近公共祖先。&#xA;*/&#xA;typedef struct{&#xA;    BiTree t;&#xA;    int tag; //tag=0表示左子女已被访问，tag=1表示右子女已被访问&#xA;}stack;&#xA;stack s[],s1[]; //栈，容量足够大&#xA;BiTree Ancester(BiTree ROOT,BiTNode *p,BiTNode *q){&#xA;    top = 0;&#xA;    bt = ROOT;&#xA;    while(bt!=NULL &amp;amp;&amp;amp; bt!=p &amp;amp;&amp;amp; bt!=q){    //结点入栈&#xA;        while(bt != NULL){&#xA;            S[++top].t = bt;&#xA;            s[top].tag = 0;&#xA;            bt= bt-&amp;gt;lchild;&#xA;        } //沿左分支向下&#xA;        while(top!=0 &amp;amp;&amp;amp; s[top].tag ==1){&#xA;            //假定p在q的左侧，遇到p时，栈中元素均为p的祖先&#xA;            if(s[top].t ==p){&#xA;                for(i=1;i&amp;lt;=top;i++){&#xA;                    s1[i] = s[i];&#xA;                    top1 = top;&#xA;                }                    //将栈s的元素转入辅助栈s1保存&#xA;                if(s[top].t ==q)     //找到q结点&#xA;                    for(i=top;i&amp;gt;0;i--){  //将栈中元素的树结点到s1中去匹配&#xA;                        for(j=top1;j&amp;gt;0;j--)&#xA;                            if(s1[j].t == s[i].t)&#xA;                                return s[i].t; //p和q的最近公共祖先已找到&#xA;                    }&#xA;                &#x9;top--;  //退栈&#xA;            }//while&#xA;            if(top!=0){&#xA;&#x9;&#x9;&#x9;&#x9;s[top].tag = 1;&#xA;                bt = s[top].t-&amp;gt;rchild;&#xA;            }       //沿右分支向下遍历&#xA;        }//while&#xA;    return NULL;   //p和q无公共祖先&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;4112-二叉树按二叉链表形式存储试求非空二叉树b的宽度-即具有结点数最多的那一层的结点个数&#34;&gt;4.1.12 二叉树按二叉链表形式存储，试求非空二叉树b的宽度 (即具有结点数最多的那一层的结点个数)。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xA;采用层次遍历的方法求出所有结点的层次，并将所有结点和对应的层次放在一个队列中。然后通过扫描队列求出各层的结点总数，最大的层结点总数即为二又树的宽度。&#xA;注意:本题队列中的结点，在出队后仍需要保留在队列中，以便求二又树的宽度，所以设置的队列采用非环形队列，否则在出队后可能被其他结点覆盖，无法再求二又树的宽度。&#xA;*/&#xA;typedef struct（&#xA;    BiTree data[MaxSize];&#x9;//i保存队列中的结点指针&#xA;    int level[MaxSize];&#x9;&#x9;//保存data中相同下标结点的层次&#xA;    int front,rear;&#xA;}Qu;&#xA;&#xA;int BTWidth(BiTree b){&#xA;&#x9;BiTree p;&#xA;&#x9;int k,max,i,n;&#xA;&#x9;Qu.front=Qu.rear= -1;&#x9;&#x9;//队列为空&#xA;&#x9;Qu.rear++;&#xA;&#x9;Qu.data[Qu.rear]=b;&#x9;&#x9;&#x9;//根结点指针入队&#xA;&#x9;Qu.level[Qu.rear]=1; &#x9;&#x9;//根结点层次为1&#xA;&#x9;while(Qu.front&amp;lt;Qu.rear){&#xA;&#x9;&#x9;Qu.front++;&#x9;&#x9;&#x9;&#x9;//出队&#xA;&#x9;&#x9;p=Qu.data[Qu.front];&#x9;//出队结点&#xA;&#x9;&#x9;k=Qu.level[Qu.front];&#x9;//出队结点的层次&#xA;&#x9;if(p-&amp;gt;lchild！=NULL){&#x9;&#x9;//左孩子进队列&#xA;&#x9;&#x9;Qu.rear++;&#xA;&#x9;&#x9;Qu.data[Qu.rear]=p-&amp;gt;lchild;&#xA;&#x9;&#x9;Qu.level[Qu.rear]=k+1;&#xA;    }&#xA;        &#xA;&#x9;if(p-&amp;gt;rchild！=NULL){&#x9;&#x9;//右孩子进队列&#xA;&#x9;&#x9;Qu.rear++;&#xA;&#x9;&#x9;Qu.data [Qu.rear]=p-&amp;gt;rchild;&#xA;&#x9;&#x9;Qu.level[Qu.rear]=k+1;&#xA;&#x9;}&#xA;}//while&#xA;    max=0;i=0;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//max保存同一层最多的结点个数&#xA;    k = 1; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//k表示从第一层开始查找&#xA;    while(i&amp;lt;=Qu.rear){&#x9;&#x9;&#x9;    //i扫描队中所有元素&#xA;        n=0;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//n统计第k层的结点个数&#xA;        while(i&amp;lt;=Qu.rear&amp;amp;6Qu.level[i]==k){&#xA;            n++;&#xA;            i++;&#xA;        }&#xA;        k=Qu.level[i];&#xA;        if(n&amp;gt;max) max=n;&#x9;&#x9;&#x9;//保存最大的n&#xA;    }&#xA;&#x9;return max;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;4113-设有一棵满二叉树所有结点值均不同已知其先序序列为pre设计一个算法求其后序序列post&#34;&gt;4.1.13 设有一棵满二叉树(所有结点值均不同),已知其先序序列为pre,设计一个算法求其后序序列post.&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xA;对一般二叉树，仅根据先序或后序序列，不能确定另一个遍历序列。但对满二叉树，任意一个结点的左、右子树均含有相等的结点数，同时，先序序列的第一个结点作为后序序列的最后一个结点，由此得到将先序序列pre[11..h1]转换为后序序列post[12..h2]的递归模型如下:&#xA;f(pre,l1,h1,post,l2,h2) =不做任何事情           h1&amp;lt;l1时&#xA;f(pre,l1,h1,post,l2,h2) = post[h2] = pre[11]  其他情况&#xA;&#x9;取中间位置half=(h1-12)/2:&#xA;&#x9;将pre[l1+1,l1+ha1f]左子树转换为post[l2,l2+half-1],&#xA;&#x9;即f(pre,l1+1,l1+half,post,12,l2+half-1);&#xA;&#x9;将pre[11+half+1，h1]右子树转换为post[12+half，h2-1]，&#xA;&#x9;即f(pre,l1+half+1,h1,post,l2+half,h2-1)。&#xA;其中,post[h2]=pre[l1]表示后序序列的最后一个结点(根结点)等于先序序列的第一个结点(根结点)。&#xA;*/&#xA;&#xA;void PreToPost(int pre[],int l1,int h1,int post[]，int l2，int h2){&#xA;&#x9;int half;&#xA;&#x9;if(h1&amp;gt;=l1){&#xA;&#x9;&#x9;post[h2]=pre[l1];&#xA;&#x9;&#x9;half = (h1-l1)/2;&#xA;&#x9;&#x9;PreroPost(pre,l1+1,l1+half,post,l2,l2+half-1);//转换左子树&#xA;&#x9;&#x9;PreroPost(pre,l1+half+1,h1,post,l2+half,h2-1;//转换右子树&#xA;     }&#xA;}&#xA;//测试&#xA;char *pre=&amp;#34;ABCDEFG&amp;#34;;&#xA;char post[MaxSize];&#xA;PreToPost(pre,0,6,post,0,6);&#xA;printf(&amp;#34;后序序列：&amp;#34;);&#xA;for(int i=0;i&amp;lt;=6;i++)&#xA;&#x9;printf(&amp;#34;%c&amp;#34;，post[i]);&#xA;printf(&amp;#34;\n&amp;#34;);&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;4114-二叉树按二叉链表形式存储设计算法将二叉树的叶结点按从左到右的顺序连成一个单链表表头指针为head链接时用叶结点的右指针域来存放单链表指针&#34;&gt;4.1.14 二叉树按二叉链表形式存储，设计算法将二叉树的叶结点按从左到右的顺序连成一个单链表，表头指针为head，链接时用叶结点的右指针域来存放单链表指针。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xA;算法思想:设置前驱结点指针pre，初始为空。第一个叶结点由指针head指向，遍历到叶结点时，就将它前驱的rchi1d指针指向它，最后一个叶结点的rchi1d为空。算法的时间复杂度为O(n),辅助变量使用head和pre，栈空间复杂度为O(n)。&#xA;*/&#xA;LinkedList head,pre=NULL;&#x9;&#x9;&#x9;&#x9;//全局变量&#xA;LinkedList InOrder(BiTree bt){&#xA;    if(bt){&#xA;        Inorder(bt-&amp;gt;lchild);&#x9;&#x9;&#x9;//中序遍历左子树&#xA;        if(bt-&amp;gt;lchild==NULL &amp;amp;&amp;amp; bt-&amp;gt;rchild==NULL)//叶结点&#xA;            if(pre==NULL){&#xA;                head=bt;&#xA;                pre=bt;&#xA;            } &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//处理第一个叶结点&#xA;            else{&#xA;                pre-&amp;gt;rchild=bt;&#xA;                pre=bt;&#xA;            }&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//将叶结点链入链表&#xA;    Inorder(bt-&amp;gt;rchild);&#x9;&#x9;&#x9;&#x9;//中序遍历右子树&#xA;    pre-&amp;gt;rchi1d=NULL;&#x9;&#x9;&#x9;&#x9;&#x9;//设置链表尾&#xA;&#x9;return head;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;4115-判断两棵二叉树是否相似的算法所谓二叉树t1和t2相似指的是t1和t2都是空的二叉树或都只有一个根节点或t1的左子树和t2的左子树是相似的且t1的右子树和t2的右子树是相似的&#34;&gt;4.1.15 判断两棵二叉树是否相似的算法，所谓二叉树T1和T2相似，指的是T1和T2都是空的二叉树或都只有一个根节点;或T1的左子树和T2的左子树是相似的，且T1的右子树和T2的右子树是相似的。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xA;本题采用递归的思想求解，若T1和T2都是空树，则相似;若有一个为空另一个不空则必然不相似;否则递归地比较它们的左、右子树是否相似。递归函数的定义如下:&#xA;1) 若T1=T2==NULL,则f(T1,T2) =1;&#xA;2) 若T1和T2之一为NULL,另一个不为NULL,则f(T1,T2) =0;。&#xA;3) 若T1和T2均不为NULL,则f(T1,T2) = f(T1-&amp;gt;1child,T2-&amp;gt;1child) &amp;amp;&amp;amp; f(T1-&amp;gt;rchild,T2-&amp;gt;rchild);&#xA;*/&#xA;int similar(BiTree T1,BiTree T2){&#xA;&#x9;//采用递归的算法判断两个二叉树是否相似&#xA;&#x9;int leftS,rightS;&#xA;&#x9;if(T1==NULL &amp;amp;&amp;amp; T2==NULL)//两树皆空&#xA;&#x9;&#x9;return 1;&#xA;&#x9;else if(T1==NULL||T2==NULL）//只有一树为空&#xA;&#x9;&#x9;return 0;&#xA;&#x9;else{   &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//递归判断&#xA;&#x9;&#x9;leftS = similar(T1-&amp;gt;lchild,T2-&amp;gt;lchild);&#xA;&#x9;&#x9;rightS = similar(T1-&amp;gt;rchild,T2-&amp;gt;rchild);&#xA;&#x9;&#x9;return leftS &amp;amp;&amp;amp; rightS;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;4116-写出在中序线索二叉树里查找指定结点在后序的前驱结点的算法&#34;&gt;4.1.16 写出在中序线索二叉树里查找指定结点在后序的前驱结点的算法。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xA;算法思想：在后序序列中，若结点p有右子女，则右子女是其前驱，若无右子女而有左子女，则左子女是其前驱。若结点p左、右子女均无，设其中序左线索指向某祖先结点f（p是f右子树中按中序遍历的第一个结点），若f有左子女，则其左子女是结点p在后序下的前驱;若f无左子女，则顺其前驱找双亲的双亲，一直找到双亲有左子女（这时左子女是p的前驱）。还有一种情况，若p是中序遍历的第一个结点，则结点p在中序和后序下均无前驱。&#xA;*/&#xA;BiThrTree InPostPre(BiThrTree t,BiThrTree p){&#xA;    BiThrTree q;&#xA;    if(p-&amp;gt;rtag == 0) //若p有右子女，则右子女是其后序前驱&#xA;        q = p-&amp;gt;rchild;&#xA;    else if(p-&amp;gt;ltag ==0) //若p只有左子女，左子女是其后序前驱&#xA;        q = p-&amp;gt;lchild;&#xA;    else if(p-&amp;gt;lchild ==NULL)&#xA;        q = NULL;  //p是中序序列第一结点，无后序前驱&#xA;    else //顺左线索向上找p的祖先，若存在，再找祖先的左子女&#xA;    {&#xA;        while(p-&amp;gt;ltag ==1 &amp;amp;&amp;amp; p-&amp;gt;lchild!=NULL)&#xA;            p = p-&amp;gt;lchild;&#xA;        if(p-&amp;gt;ltag ==0)&#xA;            q = p-&amp;gt;lchild;  //p结点的祖先的左子女是其后序前驱&#xA;        else&#xA;            q = NULL;  //仅有单支树（p是叶子），已到根结点，p无后序前驱&#xA;    }&#xA;    return q;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;421-二叉树按二叉链表形式存储设计求二叉树t的wpl的算法&#34;&gt;4.2.1 二叉树按二叉链表形式存储，设计求二叉树T的WPL的算法&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xA;(1) 给出算法的基本设计思想&#xA;(2) 给出二叉树结点的数据类型定义&#xA;(3) C++语言描述算法,关键之处给出注释&#xA;*/&#xA;&#xA;/*&#xA;考查二叉树的带权路径长度，二叉树的带权路径长度为每个叶结点的深度与权值之积的总和，可以使用先序遍历解决问题。&#xA;1）算法的基本设计思想。&#xA;基于先序递归遍历的算法思想是用一个static变量记录wpl，把每个结点的深度作为递归函数的一个参数传递。&#xA;算法步骤如下：&#xA;① 若该结点是叶结点，则变量wpl加上该结点的深度与权值之积。&#xA;② 若该结点是非叶结点，则左子树不为空时，对左子树调用递归算法，右子树不为空，对右子树调用递归算法，深度参数均为本结点的深度参数加1。&#xA;③最后返回计算出的wpl即可。&#xA;&#xA;PS:当static关键字用于代码块内部的变量的声明时，用于修改变量的存储类型，即从自动变量修改为静态变量，但变量的链接属性和作用域不受影响。用这种方式声明的变量在程序执行之前创建，并在程序的整个执行期间一直存在，而不是每次在代码块开始执行时创建，在代码块执行完毕后销毁。也就是说，它保持局部变量内容的持久。静态局部变量的生存期虽然为整个源程序，但其作用域仍与局部变量相同，即只能在定义该变量的函数内使用该变量。退出该函数后，尽管该变量还继续存在，但不能使用它。&#xA;*/&#xA;// 二叉树结点的数据类型定义如下:&#xA;typedef struct BiTNode{&#xA;    int weight; &#xA;    struct BiTNode *lchild,*rchild;&#xA;}BiTNode,*BiTree;&#xA;&#xA;int WPL(BiTree root){&#xA;&#x9;return wpl_PreOrder(root，0);&#xA;}&#xA;&#xA;int wpl_Preorder(BiTree root,int deep){&#xA;&#x9;static int wpl=0;&#x9;&#x9;&#x9;&#x9;&#x9;//定义一个static变量存储wp1&#xA;&#x9;if(root-&amp;gt;lchild==NULL &amp;amp;&amp;amp; root-&amp;gt;rchild==NULL)&#x9;//若为叶结点，累积wp1&#xA;&#x9;&#x9;wpl += deep*root-&amp;gt;weight;&#xA;    if(root-&amp;gt;lchild !=NULL)&#x9;&#x9;&#x9;&#x9;//若左子树不空，对左子树递归遍历&#xA;        wp1_PreOrder(root-&amp;gt;1child,deep+1);&#xA;     if(root-&amp;gt;rchild !=NULL)&#x9;//若右子树不空，对右子树递归遍历&#xA;        wp1_PreOrder(root-&amp;gt;rchild,deep+1);&#xA;    return wpl;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;422-将给定的表达式二叉树转换为等价的中缀表达式通过括号反映操作符的计算次序并输出&#34;&gt;4.2.2 将给定的表达式(二叉树)转换为等价的中缀表达式(通过括号反映操作符的计算次序)并输出。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xA;题目给定条件：二叉树结点定义如下:&#xA;typedef struct node{&#xA;&#x9;char data[10];&#xA;&#x9;struct node *left,*right;&#xA;}&#xA;(1) 给出算法的基本设计思想&#xA;(2) C++语言描述算法,关键之处给出注释&#xA;*/&#xA;&#xA;/*&#xA;1)算法的基本设计思想:&#xA;表达式树的中序序列加上必要的括号即为等价的中缀表达式。可以基于二叉树的中序遍历策略得到所需的表达式。&#xA;表达式树中分支结点所对应的子表达式的计算次序，由该分支结点所处的位置决定。为得到正确的中缀表达式，需要在生成遍历序列的同时，在适当位置增加必要的括号。显然，表达式的最外层（对应根结点）和操作数（对应叶结点）不需要添加括号。&#xA;2)算法实现:&#xA;将二又树的中序遍历递归算法稍加改造即可得本题的答案。除根结点和叶结点外，遍历到其他结点时在遍历其左子树之前加上左括号，遍历完右子树后加上右括号。&#xA;*/&#xA;void BtreeToE(BTree *root){&#xA;&#x9;BtreeToExp(root，1);  //根的高度为1&#xA;}&#xA;&#xA;void BtreeToExp(BTree*root,int deep)&#xA;{&#xA;    if(root==NULL) return;   //空结点返回&#xA;    else if(root-&amp;gt;left==NULL &amp;amp;&amp;amp; root-&amp;gt;right==NULL) //若为叶结点&#xA;        printf(&amp;#34;%s&amp;#34;,root-&amp;gt;data);&#xA;    else{&#xA;        if(deep&amp;gt;1) printf(&amp;#34;(&amp;#34;);  //输出操作数，不加括号&#xA;        BtreeToExp(root-&amp;gt;left,deep+1); //若有子表达式则加1层括号&#xA;        printf(&amp;#34;%s&amp;#34;,root-&amp;gt;data);  //输出操作符&#xA;        BtreeToExp(root-&amp;gt;right,deep+1);  &#xA;        if(deep&amp;gt;1) printf(&amp;#34;)&amp;#34;);   //若有子表达式则加1层括号&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;431--编程以孩子兄弟表示法存储的森林的叶子结点数&#34;&gt;4.3.1  编程以孩子兄弟表示法存储的森林的叶子结点数&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xA;当森林（树）以孩子兄弟表示法存储时，若结点没有孩(fch=nul1),则它必是叶子，总的叶子结点个数是孩子子树(fch)上的叶子数和兄弟子树(nsib)上的叶结点个数之和。&#xA;*/&#xA;&#xA;typedef struct node&#xA;{&#xA;    int data;&#x9;&#x9;//数据域&#xA;&#x9;int node *fch,*nsib;//孩子与兄弟域&#xA;}*Tree;&#xA;int Leaves(Tree t){  //计算以孩子兄弟表示法存储的森林的叶子数&#xA;if(t==NULL)&#xA;&#x9;return 0;&#x9; //树空返回0&#xA;if(t-&amp;gt;fch==NULL) //若结点无孩子，则该结点必是叶子&#xA;&#x9;return 1+Leaves(t-&amp;gt;nsib);//返回叶子结点和其兄弟子树中的叶子结点数&#xA;else&#x9;&#x9;&#x9;//孩子子树和兄弟子树中叶子数之和&#xA;    return Leaves(t-&amp;gt;fch)+Leaves(t-&amp;gt;nsib);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;432-以孩子兄弟链表为存储结构请设计递归算法求树的深度&#34;&gt;4.3.2 以孩子兄弟链表为存储结构，请设计递归算法求树的深度&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xA;由孩子兄弟链表表示的树，求高度的算法思想如下:采用递归算法，若树为空，高度为零;否则,高度为第一子女树高度加1和兄弟子树高度的大者。其非递归算法使用队列,逐层遍历树,取得树的高度。&#xA;*/&#xA;&#xA;int Height(CSTree bt){&#xA;&#x9;//递归求以孩子兄弟链表表示的树的深度&#xA;&#x9;int hc,hs;&#xA;&#x9;if(bt==NULL)&#xA;&#x9;&#x9;return 0;&#xA;&#x9;else{&#x9;//否则，高度取子女高度+1和兄弟子树高度的大者&#xA;&#x9;&#x9;hc = height(bt-&amp;gt;firstchild);&#x9;//第一子女树高&#xA;&#x9;&#x9;hs = height(bt-&amp;gt;nextsibling);&#x9;//兄弟树高&#xA;    if(hc+1&amp;gt;hs)&#xA;        return hc+1;&#xA;    else&#xA;        return hs;&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;433-已知一棵树的层次序列及每个结点的度编写算法构造此时的孩子-兄弟链接&#34;&gt;4.3.3 已知一棵树的层次序列及每个结点的度，编写算法构造此时的孩子-兄弟链接&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xA;本题与树的层次序列有关。可设立一个辅助数组pointer[]存储新建树的各结点的地址，再根据层次序列与每个结点的度，逐个链接结点。&#xA;*/&#xA;&#xA;#define maxNodes 15&#xA;void createcSTree_Degree(Csfree&amp;amp;T,int e[],int degree[],int n){&#xA;//根据树结点的层次序列e[]和各结点的度degree[]构造树的孩子-兄弟链表&#xA;//参数n是树结点个数&#xA;CSNode *pointer = new CSNode[maxNodes];//判断pointer[i]为空的语句未写&#xA;int i，j，d，k=0;&#xA;for(i=0;i&amp;lt;n;i++){&#x9;&#x9;//初始化&#xA;&#x9;pointer[i]=new csNode;//判断pointer[i]为空的语句未写&#xA;&#x9;pointer[i]-&amp;gt;data=e[i];&#xA;&#x9;pointer[i]-&amp;gt;lchild=pointer[i]-&amp;gt;rsibling=NULL;&#xA;}&#xA;    &#xA;for(i=0;i&amp;lt;n;i++){&#xA;&#x9;d=degree[i];//结点i的度数&#xA;&#x9;if(d){&#xA;&#x9;&#x9;k++;//k为子女结点序号&#xA;&#x9;&#x9;pointer[i]-&amp;gt;1child=pointer[k];//建立i与子女k间的链接&#xA;&#x9;&#x9;for(j=2;j&amp;lt;=d;j++){&#xA;&#x9;&#x9;&#x9;k++;&#xA;&#x9;&#x9;&#x9;pointer[k-1]-&amp;gt;rsibling = pointer[k];&#xA;        }&#xA;    }&#xA;&#x9;T = pointer[0];&#xA;&#x9;delete [] pointer;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;441-判断给定的二叉树是否是二叉排序树&#34;&gt;4.4.1 判断给定的二叉树是否是二叉排序树&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xA;对二叉排序树来说，其中序遍历序列为一个递增有序序列。因此，对给定的二叉树进行中序遍历，若始终能保持前一个值比后一个值小，则说明该二又树是一棵二又排序树。&#xA;*/&#xA;int predt=-32767;//predt为全局变量，保存当前结点中序前驱的值，初值为-无穷。&#xA;int JudgeBST(BiTree bt){&#xA;&#x9;int b1,b2;&#xA;&#x9;if(bt==NULL)//空树&#xA;    &#x9;return 1;&#xA;&#x9;else{&#xA;&#x9;&#x9;b1=JudgeBST(bt-&amp;gt;1child);//判断左子树是否是二又排序树&#xA;&#x9;&#x9;if(b1==0 || predt&amp;gt;=bt-&amp;gt;data)//以若左子树返回值为0或前驱大于等于当前结点&#xA;&#x9;&#x9;&#x9;return 0; //不是二叉排序树&#xA;&#x9;&#x9;predt=bt-&amp;gt;data;//保存当前结点的关键字&#xA;&#x9;&#x9;b2=JudgeBST(bt-&amp;gt;rchild);//判断右子树&#xA;&#x9;&#x9;return b2;   //返回右子树的结果&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;442-设计一个算法求出指定结点在给定二叉排序树中的层次&#34;&gt;4.4.2 设计一个算法，求出指定结点在给定二叉排序树中的层次&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xA;算法思想：设二又树采用二又链表存储结构。在二叉排序树中，查找一次就下降一层。因此，查找该结点所用的次数就是该结点在二又排序树中的层次。采用二叉排序树非递归查找算法，用n保存查找层次，每查找一次，n就加1，直到找到相应的结点。&#xA;*/&#xA;&#xA;int level(BiTree bt,BSTNode *p){&#xA;&#x9;//本算法计算给定结点在二叉排序树中的层次&#xA;&#x9;int n=0;//统计查找次数&#xA;&#x9;BiTree t=bt;&#xA;&#x9;if(bt!=NULL){&#xA;&#x9;&#x9;n++;&#xA;&#x9;&#x9;while(t-&amp;gt;data!=p-&amp;gt;data){&#xA;&#x9;&#x9;&#x9;if(t-&amp;gt;data &amp;lt; p-&amp;gt;data)//在左子树中查找&#xA;&#x9;&#x9;&#x9;&#x9;t = t-&amp;gt;lchild;&#xA;&#x9;&#x9;&#x9;else &#x9;&#x9;&#x9;&#x9; //在右子树中查找&#xA;&#x9;&#x9;&#x9;&#x9;t = t-&amp;gt;rchild;&#xA;&#x9;&#x9;&#x9;n++;//层次加1&#xA;    &#x9;}&#xA;    }&#xA;    return n;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;442-利用二叉树遍历的思想编写一个判断二叉树是否平衡二叉树的算法&#34;&gt;4.4.2 利用二叉树遍历的思想编写一个判断二叉树是否平衡二叉树的算法&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xA;设置二叉树的平衡标记balance，标记返回二又树bt是否为平衡二叉树，若为平衡二叉树，&#xA;则返回1，否则返回0：h为二又树bt的高度。采用后序遍历的递归算法：&#xA;1）若bt为空，则高度为0，balance=1。&#xA;2）若bt仅有根结点，则高度为1，balance=1。&#xA;3）否则，对bt的左、右子树执行递归运算，返回左、右子树的高度和平衡标记，bt的高度&#xA;为最高子树的高度加1。若左、右子树的高度差大于1，则balance=0;若左、右子树的&#xA;高度差小于等于1，且左、右子树都平衡时，balance=1，否则balance=0。&#xA;*/&#xA;&#xA;void Judge AVL（BiTree bt，int &amp;amp;balance，int sh）{&#xA;//本算法判断一个给定的二叉树是否为平衡二叉树&#xA;int b1=0，br=0，hl=0，hr=0;//左、右子树的平衡标记和高度&#xA;if（bt==NULL）{//空树，高度为0&#xA;h=0;&#xA;balance=1;&#xA;else if（bt-&amp;gt;1child==NULL&amp;amp;6bt-&amp;gt;xchild==NULL）{//仅有根结点，则高度为1&#xA;h=1;&#xA;balance=1;&#xA;}&#xA;Judge _AVL（bt-&amp;gt;1child，bl，h1）;//递归判断左子树&#xA;Judge_AVL（bts&amp;gt;rchild，br，hr）;//递归判断右子树&#xA;h=（h1&amp;gt;hr？hl:hr）+1;&#xA;if（abs（hl-hr）&amp;lt;2）//若子树高度差的绝对值&amp;lt;2，则看左、右子树是否都平衡&#xA;balance=bl&amp;amp;&amp;amp;br;//66为逻辑与，即左、右子树都平衡时，二叉树平衡&#xA;else&#xA;balance=0;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;443-设计一个算法求出给定二又排序树中最小和最大的关键字&#34;&gt;4.4.3 设计一个算法,求出给定二又排序树中最小和最大的关键字。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xA;在一棵二又排序树中，最左下结点即为关键字最小的结点，最右下结点即为关键字最大的结点，本算法只要找出这两个结点即可，而不需要比较关键字。&#xA;*/&#xA;&#xA;int MinKey(BSTNode *bt){&#xA;    //求出二叉排序树中最小关键字结点&#xA;    while(bt-&amp;gt;lchild != NULL)&#xA;        bt=bt-&amp;gt;lchild;&#xA;    return bt-&amp;gt;data;&#xA;}&#xA;          &#xA;int MaxKey(BSTNode *bt){&#xA;    //求出二叉排序树中最大关键字结点&#xA;    while(bt-&amp;gt;rchild != NULL)&#xA;    &#x9;bt = bt-&amp;gt;rchild;&#xA;    return bt-&amp;gt;data;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;444-设计一个算法从小到大输出二叉排序树中所有值小于-k-的关键字&#34;&gt;4.4.4 设计一个算法,从小到大输出二叉排序树中所有值小于 k 的关键字&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xA;由二叉排序树的性质可知，右子树中所有的结点值均大于根结点值，左子树中所有的结点值均小于根结点值。为了从大到小输出，先遍历右子树，再访问根结点，后遍历左子树。&#xA;*/&#xA;&#xA;void OutPut(BSTNode *bt, int k)&#xA;{&#xA;    //本算法从大到小输出二叉排序树中所有值不小于k的关键字&#xA;    if(bt==NULL)&#xA;    &#x9;return;&#xA;    if(bt-&amp;gt;rchild != NULL)&#xA;    &#x9;OutPut(bt-&amp;gt;rchild,k);&#x9;//递归输出右子树结点&#xA;    if(bt-&amp;gt;data &amp;gt;= k)&#xA;    &#x9;printf(&amp;#34;%d&amp;#34;,bt-&amp;gt;data);&#x9;//只输出大于等于k的结点值&#xA;    if(bt-&amp;gt;lchild !=NULL)&#xA;    &#x9;OutPut(bt-&amp;gt;lchild,k);//递归输出左子树的结点&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;445-编写一个递归算法在一棵有n个结点的随机建立起来的二又排序树上查找第k-1kn-小的元素并返回指向该结点的指针要求算法的平均时间复杂度为olog2n二又排序树的每个结点中除datalchildrchild等数据成员外增加一个count成员保存以该结点为根的子树上的结点个数&#34;&gt;4.4.5 编写一个递归算法，在一棵有n个结点的、随机建立起来的二又排序树上查找第k (1&amp;lt;k&amp;lt;n) 小的元素，并返回指向该结点的指针。要求算法的平均时间复杂度为O(log2n)，二又排序树的每个结点中除data、lchild、rchild等数据成员外，增加一个count成员，保存以该结点为根的子树上的结点个数。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xA;在以t为根的子树上寻找第k小的元素，返回其所在结点的指针。k从11开始计算,在树结点中增加一个count数据成员，存储以该结点为根的子树的结点个数。&#xA;最大查找长度取决于树的高度。由于二叉排序树是随机生成的，其高度应是O(log2n),时间复杂度为O(log2n)。&#xA;*/&#xA;BSTNode *Search_Small(BSTNode*t,int k){&#xA;    if(k&amp;lt;1 || k&amp;gt;t-&amp;gt;count) return NULL;&#xA;    if(t-&amp;gt;lchild==NULL){&#xA;        if(k==1) return;&#xA;        else return Search_Small(t-&amp;gt;rchild,k-1);&#xA;    }&#xA;    else{&#xA;        if(t-&amp;gt;lchild-&amp;gt;count == k-1) &#xA;            return t;&#xA;        if(t-&amp;gt;lchild-&amp;gt;count &amp;gt; k-1) &#xA;            return Search_Small(t-&amp;gt;lchild,k);&#xA;        if(t-&amp;gt;lchild-&amp;gt;count &amp;lt; k-1)&#xA;        &#x9;return Search_Small(t-&amp;gt;rchild,k-(t-&amp;gt;lchild-&amp;gt;count+1));&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;511-写出从图的邻接表表示转换成邻接矩阵表示的算法&#34;&gt;5.1.1 写出从图的邻接表表示转换成邻接矩阵表示的算法&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xA;算法的基本思想：设图的顶点分别存储在数组v[n]中。首先初始化邻接矩阵。遍历邻接表，在依次遍历顶点v[i]的边链表时，修改邻接矩阵的第i行的元素值。若链表边结点的值为，则置arcs[i][j]=1。遍历完邻接表时，整个转换过程结束。此算法对于无向图、有向图均适用。&#xA;*/&#xA;&#xA;void Convert（ALGraph &amp;amp;G，int arcs[M][N]）{&#xA;    //此算法将邻接表方式表示的图G转换为邻接矩阵arcs&#xA;    for(i=0; i&amp;lt;n; i++){&#x9;&#x9;//依次遍历各顶点表结点为头的边链表&#xA;    &#x9;p =(G-&amp;gt;v[i]).firstarc;&#x9;//取出顶点i的第一条出边&#xA;    &#x9;while(p!=NULL){&#x9;&#x9;&#x9;//遍历边链表&#xA;            arcs[i][p-&amp;gt;data]=1;&#xA;            p=p-&amp;gt;nextarc;&#x9;&#x9;//取下一条出边&#xA;&#x9;}&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;521-写出从图的邻接表表示转换成邻接矩阵表示的算法&#34;&gt;5.2.1 写出从图的邻接表表示转换成邻接矩阵表示的算法&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xA;算法的基本思想：设图的顶点分别存储在数组v[n]中。首先初始化邻接矩阵。遍历邻接表，在依次遍历顶点v[i]的边链表时，修改邻接矩阵的第i行的元素值。若链表边结点的值为，则置arcs[i][j]=1。遍历完邻接表时，整个转换过程结束。此算法对于无向图、有向图均适用。&#xA;*/&#xA;&#xA;void Convert(ALGraph &amp;amp;G,int arcs[M][N]){&#xA;    //此算法将邻接表方式表示的图G转换为邻接矩阵arcs&#xA;    for(i=0; i&amp;lt;n; i++){&#x9;&#x9;//依次遍历各顶点表结点为头的边链表&#xA;    &#x9;p =(G-&amp;gt;v[i]).firstarc;&#x9;//取出顶点i的第一条出边&#xA;    &#x9;while(p!=NULL){&#x9;&#x9;&#x9;//遍历边链表&#xA;            arcs[i][p-&amp;gt;data]=1;&#xA;            p=p-&amp;gt;nextarc;&#x9;&#x9;//取下一条出边&#xA;&#x9;}&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;521-试设计一个算法判断一个无向图g是否为一棵树若是一棵树则算法返回true否则返回false&#34;&gt;5.2.1 试设计一个算法，判断一个无向图G是否为一棵树。若是一棵树，则算法返回true，否则返回false。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xA;一个无向图G是一棵树的条件是，G必须是无回路的连通图或有n-1条边的连通图。这里采用后者作为判断条件。对连通的判定，可用能否遍历全部顶点来实现。可以采用深度优先搜索算法在遍历图的过程中统计可能访问到的顶点个数和边的条数，若一次遍历就能访问到n个顶点和n-1条边，则可断定此图是一棵树。&#xA;*/&#xA;&#xA;bool isTree(Graph&amp;amp; G){&#xA;for(i=1;i&amp;lt;=G.vexnum;i++)&#xA;&#x9;visited[i]=FALSE;&#x9;&#x9; //访问标记visited[]初始化&#xA;int Vnum=0,Enum=0;&#x9;&#x9;&#x9; //记录顶点数和边数&#xA;DFS(G,1,Vnum,Enum,visited);&#xA;if(Vnum==G.vexnum &amp;amp;&amp;amp; Enum==2*(G.vexnum-1))&#xA;&#x9;return true;&#x9;&#x9;&#x9; //符合树的条件&#xA;else&#xA;&#x9;return false;&#x9;&#x9;&#x9; //不符合树的条件&#xA;void DFS(Graph&amp;amp; G,int v,int&amp;amp; Vnum,int&amp;amp; Enum,int visited[]){&#xA;&#x9;//深度优先遍历图G，统计访问过的顶点数和边数，通过Vnum和Enum返回&#xA;&#x9;visited[v]=TRUE;&#xA;    Vnum++;&#x9;&#x9;&#x9;&#x9;&#x9; //作访问标记，顶点计数&#xA;    int w=FirstNeighbor(G,v);//取v的第一个邻接顶点&#xA;&#x9;while(w !=-1){&#x9;&#x9;&#x9; //当邻接顶点存在&#xA;        Enum++;&#x9;&#x9;&#x9;&#x9; //边存在，边计数&#xA;        if(!visited[w])  &#x9;//当该邻接顶点未访问过&#xA;        &#x9;DFS(G,w,Vnum,Enum,visited);&#xA;        w=NextNeighbor(G,v,w);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;522-写出图的深度优先搜索dfs算法的非递归算法图采用邻接表形式--3&#34;&gt;5.2.2 写出图的深度优先搜索DFS算法的非递归算法（图采用邻接表形式）。  3&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xA;在深度优先搜索的非递归算法中使用了一个栈s来记忆下一步可能访问的顶点，同时使用了一个访问标记数组visited[i]来记忆第i个顶点是否在栈内或曾经在栈内，若是则它以后不能再进栈。图采用邻接表形式。&#xA;注意:由于使用了栈，使得遍历的方式从右端到左端进行，不同于常规的从左端到右端，但仍然是深度优先遍历。&#xA;*/&#xA;&#xA;void DFS_Non_RC(AGraph&amp;amp; G,int v){&#xA;    //从顶点v开始进行深度优先搜索，一次遍历一个连通分量的所有顶点&#xA;    int w;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;// 顶点序号&#xA;&#x9;InitStack(S);&#x9;&#x9;&#x9;&#x9;&#x9;// 初始化栈s&#xA;&#x9;for(i=0; i&amp;lt;G.vexnum; i++)&#xA;    &#x9;visited[i]=FALSE;&#x9;&#x9;&#x9;//初始化visited&#xA;    Push(S,v); visited[v]=TRUE;     // v入栈并置Qisited[v]&#xA;    while(!IsEmpty(S)){&#xA;    &#x9;k=Pop(S);&#x9;&#x9;&#x9;&#x9;&#x9;// 栈中退出一个顶点&#xA;   &#x9;&#x9;visit(k);&#x9;&#x9;&#x9;&#x9;&#x9;// 先饰问，再将其子结点入栈&#xA;    &#x9;for(w=FirstNeighbor(G,k); w&amp;gt;=0; w=NextNeighor(G,k,w))&#xA;            &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;// k所有邻接点&#xA;            if(!visited[w]){&#x9;&#x9;// 未进过栈的顶点进栈&#xA;            &#x9;Push(S,w);&#xA;            &#x9;visited[w]=true;&#x9;// 作标记，以免再次入栈&#xA;            }//if&#xA;    }//while&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;523-分别采用基于深度优先遍历和广度优先遍历算法判别以邻接表方式存储的有向图中是否存在由顶点-vi-到顶点-vj-的路径-ij-注意算法中涉及的图的基本操作必须在此存储结构上实现&#34;&gt;5.2.3 分别采用基于深度优先遍历和广度优先遍历算法判别以邻接表方式存储的有向图中是否存在由顶点 vi 到顶点 vj 的路径 (i≠j) 。注意，算法中涉及的图的基本操作必须在此存储结构上实现。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xA;两个不同的遍历算法都采用从顶点v，出发，依次遍历图中每个顶点，直到搜索到顶点vj，若能够搜索到vj，则说明存在由顶点vi到顶点j的路径。&#xA;*/&#xA;&#xA;//深度优先遍历算法的实现如下&#xA;int visited[MAXSIZE]={0};&#x9;&#x9;&#x9;//访问标记数组&#xA;int Exist_Path_DFS(ALGraph G,int i,int j){&#xA;    &#xA;    int p;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//顶点序号&#xA;    if(i==j)&#xA;        return 1;&#x9;&#x9;&#x9;&#x9;&#x9;//i就是j&#xA;    else{&#xA;        visited[i]=1;&#x9;&#x9;&#x9;&#x9;//置访问标记&#xA;        for (p=FirstNeighbor(G,i);p&amp;gt;=0;p=NextNeighbor(G,i,p)){&#xA;            k = p.adjvex;&#xA;            if(!visited[p] &amp;amp;&amp;amp; Exist_Path_DFS(G,p,j))&#xA;                return 1;&#xA;           }//for&#xA;        }//else &#xA;     return 0;&#xA;}&#xA;               &#xA;&#xA;//广度优先遍历算法的实现如下&#xA;int visited[MAXSI2E]={0};&#x9;&#x9;//访问标记数组&#xA;int Exist_Path_BFS(ALGraph G,int i,int j){&#xA;//广度优先判断有同图G中顶点vi到顶点vj是否有路径，是则返回1，否则返回0&#xA;    InitQueue(Q);&#xA;    EnQueue(Q,i);&#x9;&#x9;&#x9;&#x9;//顶点i入队&#xA;    while(!isEmpty(Q)){&#x9;&#x9;&#x9;//非空循环&#xA;        DeQueue(Q,u);&#x9;&#x9;&#x9;//队头顶点出队&#xA;        visited[u]=1;&#x9;&#x9;&#x9;//置访问标记&#xA;    for(p=FirstNeighbor(G,i);p;p=NextNeighbor(G,i,p)){&#xA;                                //检查所有邻接点&#xA;            k=p.adjvex;&#xA;            if(k==j)&#x9;&#x9;&#x9;//若k==j，则查找成功&#xA;                return 1;&#xA;        if(!visited[k])&#x9;&#x9;&#x9;//否则，顶点k入队&#xA;            EnQueue(Q,k);&#xA;    &#x9;}//for&#xA;    }//while&#xA;    return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;524-假设图用邻接表表示设计一个算法输出从顶点-vi-到顶点vj-的所有简单路径&#34;&gt;5.2.4 假设图用邻接表表示，设计一个算法，输出从顶点 Vi 到顶点Vj 的所有简单路径。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xA;本题采用基于递归的深度优先遍历算法，从结点u出发，递归深度优先遍历图中结点，若访问到结点v，则输出该搜索路径上的结点。为此，设置一个path数组来存放路径上的结点(初始为空)，d表示路径长度(初始为-1)。&#xA;*/&#xA;&#xA;void FindPath(AGraph *G,int u,int v,int path[],int d){&#xA;    int w,i;&#xA;    ArcNode *p;&#xA;    d++;   &#x9;&#x9;&#x9;&#x9; &#x9;//路径长度增1&#xA;    path[d]=u;&#x9;&#x9;&#x9; &#x9;//将当前顶点添加到路径中&#xA;    visited[u]=1; &#x9;&#x9; &#x9;//置已访问标记&#xA;    if(u==V)&#x9;&#x9;&#x9;&#x9;//找到一条路径则输出&#xA;    &#x9;print(path[]);&#x9;&#x9;//输出路径上的结点&#xA;    p=G-&amp;gt;adjlist[u].firstarc;//p指向v的第一个相邻点&#xA;    while(p!=NULL){&#xA;        w=p-&amp;gt;adjvex;&#x9;&#x9;//若顶点w未访问，递归访问它&#xA;    if(visited[w]==0)&#xA;    &#x9;FindPath(G,w,V,path,d);&#xA;    &#x9;p = p-&amp;gt;nextarc;&#x9;&#x9;//p指向v的下一个相邻点&#xA;    }&#xA;    visited[u] = 0;&#x9;&#x9;&#x9;//恢复环境，使该顶点可重新使用&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;611-写出折半查找的递归算法初始调用时low为1high为-stlength&#34;&gt;6.1.1 写出折半查找的递归算法。初始调用时，low为1，high为 ST.length。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xA;算法的基本思想：根据查找的起始位置和终止位置，将查找序列一分为二，判断所查找的关键字在哪一部分，然后用新的序列的起始位置和终止位置递归求解。&#xA;算法把规模为n的复杂问题经过多次递归调用转化为规模减半的子问题求解。时间复杂度为O(log2n),算法中用到了一个递归工作栈，其规模与递归深度有关，也是O(log2n)。&#xA;*/&#xA;typedef struct{&#x9;&#x9;//查找表的数据结构&#xA;    int *elem;&#x9;&#x9;//存储空间基址，建表时按实际长度分配，0号留空&#xA;    int length;&#x9;&#x9;//表的长度&#xA;}SSTable;&#xA;&#xA;int BinSearchRec(SSTable ST,int key,int low,int high){&#xA;&#x9;//在有序表中递归折半查找其关键字为key的元素，返回其在表中序号&#xA;    if(low&amp;gt;high)&#xA;    &#x9;return 0;&#xA;    mid=(low+high)/2;&#x9;&#x9; &#x9;//取中间位置&#xA;    if(key&amp;gt;ST.elem[mid])&#x9;&#x9;//向后半部分查找&#xA;    &#x9;Search(ST,key,mid+1,high);&#xA;    else if(key&amp;lt;ST.elem[mid])&#x9;//向前半部分查找&#xA;    &#x9;Search(ST,key,low,mid-1);&#xA;    else&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//查找成功&#xA;   &#x9;&#x9;return mid;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;612-线性表中各结点的检索概率不等时可用如下策略提高顺序检索的效率若找到指定的结点则将该结点和其前驱结点若存在交换使得经常被检索的结点尽量位于表的前端试设计在顺序结构和链式结构的线性表上实现上述策略的顺序检索算法&#34;&gt;6.1.2 线性表中各结点的检索概率不等时，可用如下策略提高顺序检索的效率：若找到指定的结点，则将该结点和其前驱结点（若存在）交换，使得经常被检索的结点尽量位于表的前端。试设计在顺序结构和链式结构的线性表上实现上述策略的顺序检索算法。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xA;算法的基本思想：检索时可先从表头开始向后顺序扫描，若找到指定的结点，则将该结点和其前趋结点（若存在）交换。采用顺序表存储结构的算法实现如下:&#xA;*/&#xA;&#xA;int SeqSrch(int R[],int k){&#xA;&#x9;//顺序查找线性表，找到后和其前面的元素交换&#xA;&#x9;int i=0;&#xA;&#x9;while((R[i].key!=k) &amp;amp;&amp;amp;(i&amp;lt;n))&#xA;        i++;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//从前向后顺序查找指定结点&#xA;&#x9;&#x9;if(i&amp;lt;n &amp;amp;&amp;amp; i&amp;gt;0){&#x9;&#x9;&#x9;&#x9;//若找到，则交换&#xA;&#x9;&#x9;&#x9;temp=R[i];&#xA;            R[i]=R[i-1];&#xA;            R[i-1]=temp;&#xA;&#x9;&#x9;&#x9;return --i;&#x9;&#x9;&#x9;&#x9;//交换成功，返回交换后的位置&#xA;&#x9;&#x9;else &#xA;            return -1;&#x9;&#x9;  &#x9;   //交换失败&#xA;}&#x9;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;711-试重新编写考点精析中的快速排序的划分算法使之每次选取的枢轴值都是随机地从当前子表中选择的&#34;&gt;7.1.1 试重新编写考点精析中的快速排序的划分算法，使之每次选取的枢轴值都是随机地从当前子表中选择的。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xA;这类题目比较简单，为方便起见，可直接先随机地求出枢轴的下标，然后将枢轴值与A[low]交换，而后的思想就与前面的划分算法一样。&#xA;*/&#xA;&#xA;int Partition2(int A[],int low,int high){&#xA;&#x9;int rand_Index=low+rand() %(high-low+1);&#xA;&#x9;Swap(A[rand Index],A[low]);//将枢轴值交换到第一个元素&#xA;&#x9;int pivot=A[low];&#x9;&#x9;&#x9;//置当前表中的第一个元素为枢轴值&#xA;&#x9;int i=low;&#x9;&#x9;&#x9;&#x9;&#x9;//使得表A[low…i]中的所有元素小于pivot，初始为空表&#xA;for(int j=low+1;j&amp;lt;=high;j++)//从第毫个元素开始寻找小于基准的元素&#xA;&#x9;if(A[j]&amp;lt;pivot)&#x9;&#x9;&#x9;&#x9;//找到后，交换到前面&#xA;&#x9;&#x9;swap(A[++i],A[j]);&#xA;&#x9;swap(A[i],A[low]);&#x9;&#x9;&#x9;//将基准元素插入到最终位置&#xA;&#x9;return i;&#x9;&#x9;&#x9;&#x9;&#x9;//返回基准元素的位置&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;712-试编写一个算法使之能够在数组l1n中找出第-k-小的元素即从小到大排序后处于第k个位置的元素&#34;&gt;7.1.2 试编写一个算法，使之能够在数组L[1..n]中找出第 k 小的元素（即从小到大排序后处于第k个位置的元素）。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xA;本题最直接的做法是用排序算法对数组先进行从小到大的排序，然后直接提取L(k)便得到了第k小元素，但其平均时间复杂度将达O(nlog2n)以上。此外，还可采用小顶堆的方法，每次堆顶元素都是最小值元素，时间复杂度为O(n+klog2n)。下面介绍一个更精彩的算法，它基于快速排序的划分操作。&#xA;*/&#xA;int kth_elem(int a[],int low,int high,ing k)&#xA;{&#xA;    int pivot = a[low];&#xA;    int low temp=low;//由于下面会修改low与high，在递归时又要用到它们&#xA;    int high_temp=high;&#xA;    while(low&amp;lt;high){&#xA;    &#x9;while(low&amp;lt;high &amp;amp;&amp;amp; a[high]&amp;gt;=pivot)&#xA;    &#x9;&#x9;--high;&#xA;        a[low] =a[high];&#xA;        while(low&amp;lt;high &amp;amp;&amp;amp; a[low]&amp;lt;=pivot)&#xA;            ++low;&#xA;        a[high]=a[low];&#xA;    }&#xA;    a[low]=pivot;&#xA;    //上面即为快速排序中的划分算法&#xA;    //以下就是本算法思想中所述的内容&#xA;    if(low==k)&#x9;&#x9;&#x9;//由于与k相同，直接返回pivot元素&#xA;    &#x9;return a[low];&#xA;    else if(low&amp;gt;k)&#x9;&#x9;//在前一部分表中递归寻找&#xA;    &#x9;return kth_elem(a,low_temp,low-1,k);&#xA;    else&#x9;&#x9;&#x9;&#x9;//在后一部分表中递归寻找&#xA;    &#x9;return kth_elem(a,low+1,high_temp,k-low);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;713-2016统考真题已知由nn2个正整数构成的集合aak-l-0kn将其划分为两个不相交的子集a1和a2元素个数分别是n1和n2a1和a中的元素之和分别为s1和s设计一个尽可能高效的划分算法满足n1-n2l最小且s1-s2最大要求6&#34;&gt;7.1.3 【2016统考真题】已知由n（n&amp;gt;2）个正整数构成的集合A={ak l 0&amp;lt;=k&amp;lt;n}，将其划分为两个不相交的子集A1和A2，元素个数分别是n1和n2，A1和A₂中的元素之和分别为S1和S₂。设计一个尽可能高效的划分算法，满足|n1-n2l最小且|S1-S2|最大。要求：6&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xA;1）算法的基本设计思想&#xA;由题意知，将最小的L[n/2]个元素放在A1中，其余的元素放在A2中，分组结果即可满足题目要求。仿照快速排序的思想，基于枢轴将n个整数划分为两个子集。根据划分后枢轴所处的位置i分别处理：&#xA;① 若i = L[n/2]，则分组完成，算法结束。&#xA;② 若i &amp;lt; L[n/2]，则枢轴及之前的所有元素均属于A1，继续对i之后的元素进行划分。&#xA;③ 若i &amp;gt; L[n/2]，则枢轴及之后的所有元素均属于A2，继续对i之前的元素进行划分。基于该设计思想实现的算法，无须对全部元素进行全排序。其平均时间复杂度是O(n)，空间复杂度是O(1)。&#xA;*/&#xA;&#xA;int setPartition(int a[],int n){&#xA;&#x9;int pivotkey,low=0,low0=0,high=n-1,high0=n-1,flag=1,k=n/2,i;&#xA;&#x9;int s1=0,s2=0;&#xA;&#x9;while(flag){&#xA;&#x9;&#x9;piovtkey = a[low];&#x9;&#x9;&#x9;&#x9;//选择枢轴&#xA;&#x9;&#x9;while(low&amp;lt;high){&#x9;&#x9;&#x9;&#x9;//基于枢轴对数据进行划分&#xA;&#x9;&#x9;while(low&amp;lt;high &amp;amp;&amp;amp; a[high]&amp;gt;=pivotkey)-high;&#xA;&#x9;&#x9;if(low!=high) a[low]=a[high];&#xA;&#x9;&#x9;while(low&amp;lt;high &amp;amp;&amp;amp; a[low]&amp;lt;=pivotkey)&#xA;            ++low;&#xA;&#x9;&#x9;if(low!=high)&#xA;            a[high]=a[low];&#xA;        }&#xA;&#x9;&#x9;a[low]=pivotkey;&#xA;&#x9;&#x9;if(low==k-1)//若枢轴是第n/2小元素，划分成功&#xA;&#x9;&#x9;&#x9;flag=0;&#xA;&#x9;&#x9;else{&#x9;//是否继续划分&#xA;&#x9;&#x9;&#x9;if(low&amp;lt;k-1){&#xA;&#x9;&#x9;&#x9;&#x9;low0 = ++low;&#xA;&#x9;&#x9;&#x9;&#x9;high = high0;&#xA;           &#x9;}&#xA;            else{&#xA;                    high0 = --high;&#xA;                    low=low0;&#xA;                }&#xA;      &#x9; }&#x9;&#xA;    }&#xA;        for(i=0;i&amp;lt;k;i++) s1 += a[i];&#xA;        for(i=k;i&amp;lt;n;i++) s2 += a[i];&#xA;&#x9;&#x9;return s2-s1;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;714-荷兰国旗问题设有一个仅由红白蓝三种颜色的条块组成的条块序列请编写一个时间复杂度为on的算法使得这些条块按红白蓝的顺序排好即排成荷兰国旗图案&#34;&gt;7.1.4 荷兰国旗问题：设有一个仅由红、白、蓝三种颜色的条块组成的条块序列，请编写一个时间复杂度为O（n）的算法，使得这些条块按红、白、蓝的顺序排好，即排成荷兰国旗图案。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xA;算法思想：顺序扫描线性表，将红色条块交换到线性表的最前面，蓝色条块交换到线性表的最后面。为此，设立三个指针，其中，j为工作指针，表示当前扫描的元素，i以前的元素全部为红色，k以后的元素全部为蓝色。根据所指示元素的颜色，决定将其交换到序列的前部或尾部。&#xA;初始时i=0，k=n-1，算法的实现如下。&#xA;*/&#xA;&#xA;typedef enum(RED,WHITE,BLUE}&#x9;color;&#x9;//设置枚举数组&#xA;void Flag_Arrange(color a[],int n){&#xA;&#x9;int i=0,j=0,k=n-1;&#xA;    while(j&amp;lt;=k)&#xA;&#x9;switch(a[j]){&#x9;&#x9;&#x9;&#x9;//判断条块的颜色&#xA;        case RED:Swap(a[i],a[j]);i++; j++; break;&#xA;&#x9;&#x9;//红色，则和i交换&#xA;        case WHITE:j++;break;&#xA;        case BLUE:Swap(a[j],a[k]);&#x9;k--;&#xA;&#x9;&#x9;//蓝色，则和k交换&#xA;&#x9;&#x9;//这里没有j++语句以防止交换后a[j]仍为蓝色的情况&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;721-编写双向冒泡排序算法在正反两个方向交替进行扫描即第一趟把关键字最大的元素放在序列的最后面第二趟把关键字最小的元素放在序列的最前面如此反复进行&#34;&gt;7.2.1 编写双向冒泡排序算法，在正反两个方向交替进行扫描，即第一趟把关键字最大的元素放在序列的最后面，第二趟把关键字最小的元素放在序列的最前面，如此反复进行。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xA;这种排序方法又称双向起泡。奇数趟时，从前向后比较相邻元素的关键字，遇到逆序即交换，直到把序列中关键字最大的元素移动到序列尾部偶数趟时，从后往前比较相邻元素的关键字，遇到逆序即交换，直到把序列中关键字最小的元素移动到序列前端。程序代码如下：&#xA;*/&#xA;&#xA;void BubbleSort(int A,int n){&#xA;//双向起泡排序，交替进行正反两个方向的起泡过程&#xA;    int low = 0,high = n-1;&#xA;    bool flag = true;//一趟冒泡后记录元素是否交换标志&#xA;    while(low&amp;lt;high &amp;amp;&amp;amp; flag){//循环跳出条件，当flag为false 说明已没有逆序&#xA;    &#x9;flag=false;//每趟初始置flag为false&#xA;    for(i=low;i&amp;lt;high;i++)//从前向后起泡&#xA;    &#x9;if(a[i]&amp;gt;a[i+1]){&#x9;//发生逆序&#xA;    &#x9;&#x9;swap(a[i],a[i+1]);//交换&#xA;    &#x9;&#x9;flag=true;&#x9;//置flag&#xA;   &#x9;&#x9; }&#xA;    high--;&#x9;&#x9;&#x9;&#x9;//更新上界&#xA;    for(i=high;i&amp;gt;low;i--)//从后往前起泡&#xA;        if(a[i]&amp;lt;a[i-1]){&#x9;//发生逆序&#xA;            swap(a[i],a[i-1]);&#x9;//交换&#xA;            flag=true;&#x9;&#x9;   //置flag&#xA;        }&#xA;    low++;&#x9;&#x9;&#x9;&#x9;   &#x9;   //修改下界&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;722已知线性表按顺序存储且每个元素都是不相同的整数型元素设计把所有奇数移动到所有偶数前边的算法要求时间最少辅助空间最少&#34;&gt;7.2.2已知线性表按顺序存储，且每个元素都是不相同的整数型元素，设计把所有奇数移动到所有偶数前边的算法（要求时间最少，辅助空间最少）。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xA;本题可采用基于快速排序的划分思想来设计算法，只需遍历一次即可，其时间复杂度为O(n)，空间复杂度为O(1)。假设表为L[1..n]，基本思想是：先从前向后找到一个偶数元素L(i)，再从后向前找到一个奇数元素L(j),将二者交换;重复上述过程直到i大于。&#xA;*/&#xA;&#xA;void move(int A[],int len){&#xA;&#x9;//对表A按奇偶进行一趟划分&#xA;&#x9;int i=0,j=len-1;//i表示左端偶数元素的下标;j表示右端奇数元素的下标&#xA;&#x9;while(i&amp;lt;j){&#xA;&#x9;&#x9;while(i&amp;lt;j &amp;amp;&amp;amp; A[i]%2!=0) i++;//从前向后找到一个偶数元素&#xA;&#x9;&#x9;while(i&amp;lt;j &amp;amp;&amp;amp; A[j]%2!=1)&#x9;j--;//从后向前找到一个奇数元素&#xA;&#x9;&#x9;if(i&amp;lt;j){&#xA;&#x9;&#x9;&#x9;Swap(A[i],A[j]);//交换这两个元素.&#xA;&#x9;&#x9;&#x9;i++;&#xA;            j--;&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;731-编写一个算法在基于单链表表示的待排序关键字序列上进行简单选择排序&#34;&gt;7.3.1 编写一个算法，在基于单链表表示的待排序关键字序列上进行简单选择排序。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xA;算法的思想是：每趟在原始链表中摘下关键字最大的结点，把它插入到结果链表的最前端。&#xA;由于在原始链表中摘下的关键字越来越小，在结果链表前端插入的关键字也越来越小，因此最后形成的结果链表中的结点将按关键字非递减的顺序有序链接。&#xA;假设单链表不带表头结点。&#xA;*/&#xA;&#xA;void selectSort(LinkedList&amp;amp; L) {&#xA;&#x9;//对不带表头结点的单链表工执行简单选择排序&#xA;&#x9;LinkNode *h=L,*p,*q,*r,*s;&#xA;&#x9;L=NULL;&#xA;&#x9;while(h!=NULL){&#x9;&#x9;//持续扫描原链表&#xA;&#x9;&#x9;p = s = h;&#xA;        q = r = NULL;&#xA;&#x9;&#x9;//指针s和r记忆最大结点和其前驱;p为工作指针，q为其前驱&#xA;&#x9;&#x9;while(p !=NULL){&#x9;//扫描原链表寻找最大结点s&#xA;&#x9;&#x9;if(p-&amp;gt;data&amp;gt;s-&amp;gt;data){ &#xA;            s = p; &#xA;            r = q;&#xA;        }&#x9;&#x9;&#x9;&#x9;&#x9;//找到更大的，记忆它和它的前驱&#xA;&#x9;&#x9;q = p;&#xA;        p = p-&amp;gt;1ink; &#x9;&#x9;//继续寻找&#xA;&#x9;}&#x9;&#xA;&#x9;if(s==h)&#xA;&#x9;&#x9;h = h-&amp;gt;1ink; &#x9;&#x9;//最大结点在原链表前端&#xA;&#x9;else&#xA;&#x9;&#x9;r-&amp;gt;1ink = s-&amp;gt;1ink;&#x9;//最大结点在原链表表内&#xA;&#x9;s-&amp;gt;1ink=L;&#xA;    L=s;&#x9;&#x9;&#x9;&#x9;&#x9;//结点s插入到结果链前端&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;741-试设计一个算法判断一个数据序列是否构成一个小根堆&#34;&gt;7.4.1 试设计一个算法，判断一个数据序列是否构成一个小根堆。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xA;将顺序表L[1..n]视为一个完全二叉树，扫描所有分支结点，遇到孩子结点的关键字小于根结点的关键字时返回false,扫描完后返回true。&#xA;*/&#xA;&#xA;bool IsMinHeap(int A[]，int len){&#xA;    if(len%2 == 0）{&#x9;&#x9;&#x9;//len为偶数，有一个单分支结点&#xA;    &#x9;if(A[len/2]&amp;gt;A[len])&#x9;&#x9;&#x9;//判断单分支结点&#xA;    &#x9;&#x9;return false;&#xA;    for(i=len/2-1; i&amp;gt;=1; i--)&#x9;//判断所有双分支结点&#xA;    &#x9;if(A[i]&amp;gt;A[2*i] || A[i]&amp;gt;A[2*i+1])&#xA;    &#x9;&#x9;return false;&#xA;    else{&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//1en为奇数时，没有单分支结点&#xA;    &#x9;for(i=len/2; i&amp;gt;=1; i--)&#x9;&#x9;//判断所有双分支结点&#xA;    &#x9;&#x9;if(A[i]&amp;gt;A[2*i] || A[i]&amp;gt;A[2*i+1])&#xA;    &#x9;&#x9;&#x9;return false;&#xA;    }&#xA;    return true;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;751-设顺序表用数组a表示表中元素存储在数组下标1mn的范围内前m个元素递增有序后n个元素递增有序设计一个算法使得整个顺序表有序&#34;&gt;7.5.1 设顺序表用数组A[]表示，表中元素存储在数组下标1~m+n的范围内，前m个元素递增有序，后n个元素递增有序，设计一个算法，使得整个顺序表有序。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xA;(1) 给出算法的基本设计思想&#xA;(2) 根据设计思想，采用C/C++描述算法，关键之处给出注释。&#xA;(3) 说明你所设计算法的时间复杂度与空间复杂度。&#xA;*/&#xA;&#xA;/*&#xA;算法的基本设计思想如下：将数组A[1..m+n]视为一个已经过m趟插入排序的表，则从m+l趟开始，将后n个元素依次插入前面的有序表中。&#xA;时间复杂度由m和n共同决定，从上面的算法不难看出，在最坏情况下元素的比较次数为O(mn),而元素移动的次数为O(mn),所以时间复杂度为O(mn),由于算法只用到了常数个辅助空间，所以空间复杂度为O(1)。&#xA;*/&#xA;&#xA;void Insert_Sort(int A[],int m,int n){&#xA;    int i,j;&#xA;    for(i = m+1;i&amp;lt;=m+n;i++）{&#x9;//依次将A[m+1.m+n]插入有序表&#xA;        A[0]=A[i];&#x9;&#x9;&#x9;&#x9;&#x9;// 复制为哨兵&#xA;        for(j=i-1;A[j]&amp;gt;A[0];j--) &#x9;// 从后往前插入&#xA;            A[j+1] = A[j];&#x9;&#x9;&#x9;// 元素后移&#xA;        A[j+1] = A[0];&#x9;&#x9;&#x9;    // 插入&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://maurice-xx.github.io/posts/ds/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://maurice-xx.github.io/posts/ds/</guid>
      <description>&lt;h2 id=&#34;211-顺序表查找最小值并返回被删元素的值&#34;&gt;2.1.1 顺序表查找最小值并返回被删元素的值&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xD;&#xA;搜索整个顺序表，查找最小值元素并记住其位置，搜索结束后用最后一个元素填补空出的原最小值元素的位置。&#xD;&#xA;*/&#xD;&#xA;bool Del_Min(sqList &amp;amp;L,int &amp;amp;value)&#xD;&#xA;{&#xD;&#xA;    if(L.length ==0)&#xD;&#xA;        return false;&#xD;&#xA;    value = L.data[0];&#xD;&#xA;    int pos = 0;&#xD;&#xA;    for(int i=1;i&amp;lt;L.length;i++)&#xD;&#xA;    {&#xD;&#xA;        if(L.data[i]&amp;lt;value)&#xD;&#xA;        {&#xD;&#xA;            value = L.data[i];&#xD;&#xA;            pos = i; //循环找最小值的元素&#xD;&#xA;        }&#xD;&#xA;        //空出的位置由最后一个填补&#xD;&#xA;        L.data[pos] = L.data[L.length -1];&#xD;&#xA;        L.length--;&#xD;&#xA;        returm true;&#xD;&#xA;    }&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;212-顺序表l所有元素逆置空间复杂度为o1&#34;&gt;2.1.2 顺序表L所有元素逆置，空间复杂度为O(1)&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;void Reverse(Sqlist &amp;amp;L)&#xD;&#xA;{&#xD;&#xA;    int temp; &#xD;&#xA;    for(i=0;i&amp;lt;L.length/2;i++)&#xD;&#xA;    {&#xD;&#xA;        temp = L.data[i]; //交换变量&#xD;&#xA;        L.data[i] = L.data[L.length - i - 1];&#xD;&#xA;        L.data[L.length - i -1] = temp;&#xD;&#xA;    }&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;213-顺序表删除所有值为x的数据元素时间复杂度on空间复杂度o1&#34;&gt;2.1.3 顺序表删除所有值为x的数据元素，时间复杂度O(n)，空间复杂度O(1)&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xD;&#xA;用 k 记录顺序表L中不等于x的元素个数(即需要保存的元素个数)，边扫描L边统计k，并将不等于x的元素向前移动 k 个位置，最后修改L的长度。&#xD;&#xA;*/&#xD;&#xA;void del_x1(Sqlist &amp;amp;L，int x)&#xD;&#xA;{&#xD;&#xA;    int k=0; //记录值不等于x的元素个数&#xD;&#xA;    for(i=0;i&amp;lt;L.length;i++)&#xD;&#xA;        if(L.data[i]!=x)&#xD;&#xA;        {&#xD;&#xA;            L.data[k] = L.data[i];&#xD;&#xA;            k++; //不等于x的元素增1&#xD;&#xA;        }&#xD;&#xA;    L.length = k; //顺序表L的长度等于k&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;214-有序顺序表中删除给定值-s-与-t-之间的所有元素&#34;&gt;2.1.4 有序顺序表中删除给定值 s 与 t 之间的所有元素&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xD;&#xA;本题与上题的区别，因为是有序表，所有删除的元素必须是相连的整体。从前向后扫描顺序表L，用k记录下元素值在s到t之间的元素的个数。若其值不在s到t之间，则前移k个位置;否则执行k++.&#xD;&#xA;*/&#xD;&#xA;bool Del_s_t(SqList &amp;amp;L,int s,int t)&#xD;&#xA;{&#xD;&#xA;    int i,k=0;&#xD;&#xA;    if(L.length==0||s&amp;gt;=t)&#xD;&#xA;        return false;&#xD;&#xA;    for(i=0;i&amp;lt;L.length;i++)&#xD;&#xA;    {&#xD;&#xA;        if(L.data[i]&amp;gt;=s &amp;amp;&amp;amp; L.data[i]&amp;lt;=t)&#xD;&#xA;            k++;&#xD;&#xA;        else&#xD;&#xA;            L.data[i-k] = L.data[i];//当前元素前移k个位置&#xD;&#xA;    }&#xD;&#xA;    L.length -= k; //长度减小&#xD;&#xA;    return true;&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;215-有序顺序表中删除所有值重复的元素使所有元素的值均不同&#34;&gt;2.1.5 有序顺序表中删除所有值重复的元素，使所有元素的值均不同&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xD;&#xA;有序顺序表，值相同的元素在连续的位置上，用类似直接插入排序的思想，初始时将第一个元素视为非重复的有序表。之后依次判断后面的元素是否与前面非重复有序表的最后一个元素相同，若相同则继续向后判断，若不同则插入到前面的非重复有序表的最后，直到判断到表尾为止。&#xD;&#xA;*/&#xD;&#xA;bool Delete_Same(SeqList &amp;amp;L)&#xD;&#xA;{&#xD;&#xA;    if(L.length == 0)&#xD;&#xA;        return false;&#xD;&#xA;    int i,j;&#xD;&#xA;    for(i=0;j=1; j&amp;lt;L.length;j++)&#xD;&#xA;        if(L.data[i]!=L.data[j])&#xD;&#xA;            L.data[++i] = L.data[j];&#xD;&#xA;    L.length = i+1;&#xD;&#xA;    return true;&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;216-两个有序顺序表合并为一个新的有序顺序表由函数返回结果顺序表&#34;&gt;2.1.6 两个有序顺序表合并为一个新的有序顺序表，由函数返回结果顺序表&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xD;&#xA;按顺序不断取下两个顺序表表头较小的结点存入新的顺序表中。然后，看哪个表还有剩余，将剩余的部分加到新的顺序表后面。&#xD;&#xA;*/&#xD;&#xA;bool Merge(SeqList A,SeqList B,Seqlist &amp;amp;C)&#xD;&#xA;{&#xD;&#xA;    if(A.length + B.length &amp;gt; C.maxSize)&#xD;&#xA;        return false;&#xD;&#xA;    int i=0,j=0,k=0;&#xD;&#xA;    while(i&amp;lt;A.length &amp;amp;&amp;amp; j&amp;lt;B.length) //循环，两两比较，小者存入结果表&#xD;&#xA;    {&#xD;&#xA;        if(A.data[i] &amp;lt;= B.data[j])&#xD;&#xA;            C.data[k++] = A.data[i++];&#xD;&#xA;        &#xD;&#xA;        else&#xD;&#xA;            C.data[k++] = B.data[j++];&#xD;&#xA;      }   &#xD;&#xA;    &#xD;&#xA;        while(i&amp;lt;A.length)&#xD;&#xA;            C.data[k++] = A.data[i++];&#xD;&#xA;        while(j&amp;lt;B.length)&#xD;&#xA;            C.data[k++] = B.data[j++];&#xD;&#xA;        C.length = k;&#xD;&#xA;        return true;&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;217-一维数组-amn-中将两个顺序表m和顺序表n-的位置互换&#34;&gt;2.1.7 一维数组 A[m+n] 中将两个顺序表m和顺序表n 的位置互换&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xD;&#xA;首先将A[m+n]中的全部元素原地逆置，再对前n个元素和后m个元素分别使用逆置算法，即可得到题意。&#xD;&#xA;*/&#xD;&#xA;void Reverse(int A[],int left,int right,ing arraysize)&#xD;&#xA;{&#xD;&#xA;    if(left&amp;gt;=right || right&amp;gt;=arraySize)&#xD;&#xA;        return;&#xD;&#xA;    int mid = (left+right)/2;&#xD;&#xA;    for(int i=0;i&amp;lt;=mid - left;i++)&#xD;&#xA;    {&#xD;&#xA;        int temp = A[left + i];&#xD;&#xA;        A[left + i] = A[right -i];&#xD;&#xA;        A[right-i] = temp;&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;void Exchange(int A[],int m,int n,int arraySize)&#xD;&#xA;{&#xD;&#xA;    Reverse(A,0,m+n-1,arraySize);&#xD;&#xA;    Reverse(A,0,n-1,arraySize);&#xD;&#xA;    Reverse(A,n,m+n-1,arraySize);&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;218-递增有序顺序表查找数值为-x-的元素若找到则与其后继元素交换位置找不到则将其插入表中&#34;&gt;2.1.8 递增有序顺序表，查找数值为 x 的元素。若找到则与其后继元素交换位置，找不到则将其插入表中。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xD;&#xA;题目要求“用最少的时间在表中查找数值为x的元素”，这里应使用折半查找法。&#xD;&#xA;*/&#xD;&#xA;void SearchExchangeInsert(int A[],int x)&#xD;&#xA;{&#xD;&#xA;    int low=0,high = n-1,mid;&#xD;&#xA;    while(low &amp;lt;= high)&#xD;&#xA;    {&#xD;&#xA;        mid = (low+high)/2; //找中间位置&#xD;&#xA;        if(A[mid] == x) break;//找到x，退出while循环&#xD;&#xA;        else if(A[mid]&amp;lt;x) low = mid+1;//到中点mid的右半部去查&#xD;&#xA;        else high = mid -1; //到中点mid的左半部分去查&#xD;&#xA;    }&#xD;&#xA;    if(A[mid] == x &amp;amp;&amp;amp; mid != n-1) //若最后一个元素与x相等，则不存在与其后继交换的操作&#xD;&#xA;    {&#xD;&#xA;        t=A[mid];&#xD;&#xA;        A[mid] = A[mid+1];&#xD;&#xA;        A[mid+1] = t;&#xD;&#xA;    }&#xD;&#xA;    if(low&amp;gt;high)  //查找失败，插入数据元素x&#xD;&#xA;    {&#xD;&#xA;        for(i = n-1;i&amp;gt;high;i--) &#xD;&#xA;            A[i+1] = A[i]; //后移元素&#xD;&#xA;        A[i+1] = x; //插入x&#xD;&#xA;    }&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;221-一维数组r的序列循环左移p个位置空间和时间上都尽量高效&#34;&gt;2.2.1 一维数组R的序列循环左移p个位置，空间和时间上都尽量高效。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xD;&#xA;将问题视为数组ab转换成数组ba.(a代表数组的前p个元素，b代表数组中余下的n-p个元素)，先将a逆置得到 (a的逆置+b)，再将b逆置得到(a的逆置+b的逆置),最后将整个(a的逆置+b的逆置)逆置得到ba。&#xD;&#xA;*/&#xD;&#xA;void Revserse(int R[],int from,int to)&#xD;&#xA;{&#xD;&#xA;    int i,temp;&#xD;&#xA;    for(i=0;i&amp;lt;(to-from+1)/2;i++)&#xD;&#xA;    {&#xD;&#xA;        temp = R[from+i];&#xD;&#xA;        R[from+i] = R[to-i];&#xD;&#xA;        R[to-i] = temp;&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;void Converse(int R[],int n,int p)&#xD;&#xA;{&#xD;&#xA;    Revserse(R,0,p-1); //时间复杂度为O(p/2)&#xD;&#xA;    Revserse(R,p,n-1); //时间复杂度为O((n-p)/2)&#xD;&#xA;    Revserse(R,0,n-1); //时间复杂度为O(n/2)&#xD;&#xA;}&#xD;&#xA;//时间复杂度O(n),空间复杂度O(1)&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;222-找出数组中未出现的最小正整数时间上尽可能高效&#34;&gt;2.2.2 找出数组中未出现的最小正整数，时间上尽可能高效。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xD;&#xA;要求时间上尽可能高效，因此采用空间换时间的办法。分配一个用于标记的数组B[n],用来记录A中是否出现了1~n的正整数。B[0]对应正整数1,B[n-1]对应正整数n,初始化B中全部为0。由于A中含有n个整数，因此可能返回的值是1~n+1,当A中n个数恰好为1~n时返回n+1。当数组A中出现了小于等于0或大于n的值可以不采取任何操作。&#xD;&#xA;算法流程:&#xD;&#xA;从A[0]开始遍历，若0&amp;lt;A[i]&amp;lt;=n,则令B[A[i]-1] = 1;否则不做操作。对A遍历结束后，开始遍历数组B，若能查找第一个满足B[i]全部不为0，返回i+1, (跳出循环时i=n,i+1等于n+1),此时说明A中未出现的最小正整数是n+1。&#xD;&#xA;*/&#xD;&#xA;int findMissMin(int A[],int n)&#xD;&#xA;{&#xD;&#xA;    int i,*B; //标记数组&#xD;&#xA;    B = (int *)malloc(sizeof(int) *n); //分配空间&#xD;&#xA;    memset(B,0,sizeof(int)*n); //赋初值为0&#xD;&#xA;    for(i=0;i&amp;lt;n;i++)&#xD;&#xA;    {&#xD;&#xA;        if(A[i]&amp;gt;0 &amp;amp;&amp;amp; A[i]&amp;lt;n) //若A[i]的值介于1~n，则标记数组B&#xD;&#xA;            B[A[i]-1] = 1;&#xD;&#xA;        for(i=0;i&amp;lt;n;i++) //扫描数组B，找到目标值&#xD;&#xA;            if(B[i] ==0) break;  &#xD;&#xA;        return i+1;   //返回结果&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;//例子:{-5,3,2,3} ===&amp;gt; return 1&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;231-头插法建立单链表&#34;&gt;2.3.1 头插法建立单链表&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xD;&#xA;采用头插法建立单链表时，读入数据的顺序与生成的链表中的元素是相反的。每个结点插入的时间为O(1),设单链表长为n，则总时间复杂度为O(n)。&#xD;&#xA;*/&#xD;&#xA;LinkList List_HeadInsert(LinkList &amp;amp;L)&#xD;&#xA;{&#xD;&#xA;    LNode *s;&#xD;&#xA;    int x;&#xD;&#xA;    L = (LinkList)malloc(sizeof(LNode));&#xD;&#xA;    L-&amp;gt;next = NULL;&#xD;&#xA;    scanf(&amp;#34;%d&amp;#34;,&amp;amp;x);&#xD;&#xA;    while(x!=999)&#xD;&#xA;    {&#xD;&#xA;        s = (LNode*)malloc(sizeof(LNode));//创建新节点&#xD;&#xA;        s-&amp;gt;data = x;&#xD;&#xA;        s-&amp;gt;next = L-&amp;gt;next;&#xD;&#xA;        L-&amp;gt;next = s;//将新结点插入表中，L为头指针&#xD;&#xA;        scanf(&amp;#34;%d&amp;#34;,&amp;amp;x);  &#xD;&#xA;    }&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;232-采用尾插法建立单链表&#34;&gt;2.3.2 采用尾插法建立单链表&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;LinkList List_TailInsert(LinkList &amp;amp;L)&#xD;&#xA;{&#xD;&#xA;    int x;&#xD;&#xA;    L = (LinkList)malloc(sizeof(LNode));&#xD;&#xA;    LNode *s,*r = L; //r为表尾指针&#xD;&#xA;    scanf(&amp;#34;%d&amp;#34;,&amp;amp;x);&#xD;&#xA;    while(x!=999)&#xD;&#xA;    {&#xD;&#xA;        s = (LNode*)malloc(sizeof(LNode));&#xD;&#xA;        s-&amp;gt;data = x;&#xD;&#xA;        r-&amp;gt;next = s;&#xD;&#xA;        r=s; //r指向新的表尾结点&#xD;&#xA;        scanf(&amp;#34;%d&amp;#34;,&amp;amp;x);&#xD;&#xA;    }&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;233-不带头结点的单链表l删除所有值为x的结点&#34;&gt;2.3.3 不带头结点的单链表L删除所有值为x的结点&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xD;&#xA;算法需要借助一个递归工作栈，深度为O(n)，时间复杂度为O(n)。&#xD;&#xA;*/&#xD;&#xA;void Del_X_3(LinkList &amp;amp;L,int x)&#xD;&#xA;{&#xD;&#xA;&#x9;LNode *p;&#xD;&#xA;    if(L==NULL)     //p指向待删除结点&#xD;&#xA;        return;   //递归出口&#xD;&#xA;    if(L-&amp;gt;data==x)&#xD;&#xA;    {&#xD;&#xA;        p=L; //删除*L，并让L指向下一结点&#xD;&#xA;        L=L-&amp;gt;next;&#xD;&#xA;        free(p);&#xD;&#xA;        Del_x_3(L,x);//递归调用&#xD;&#xA;    }&#xD;&#xA;    else    //若L所指结点的值不为x&#xD;&#xA;        Del_X_3(L-&amp;gt;next,x)&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;234-带头结点的单链表l删除所有值为-x-的结点释放其空间假设值-x-的结点不唯一&#34;&gt;2.3.4 带头结点的单链表L删除所有值为 x 的结点，释放其空间，假设值 x 的结点不唯一&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xD;&#xA;用p从头至尾扫描单链表，pre指向*p结点的前驱。若p所指结点的值为x，则删除，并让p移向下一个结点，否则让pre、p指针同步后移一个结点。&#xD;&#xA;该段代码可以一直使用,if条件可以更改。时间复杂度为O(n),空间复杂度为O(1).&#xD;&#xA;*/&#xD;&#xA;void Del_X_1(LinkList &amp;amp;L,int x)&#xD;&#xA;{&#xD;&#xA;    LNode *p = L-&amp;gt;next,*pre = L,*q;&#xD;&#xA;    while(p!=NULL)&#xD;&#xA;    {&#xD;&#xA;        if(p-&amp;gt;data ==x)&#xD;&#xA;        {&#xD;&#xA;            q = p;  //q指向该结点&#xD;&#xA;            p = p-&amp;gt;next;&#xD;&#xA;            pre-&amp;gt;next = p;  //删除*q结点&#xD;&#xA;            free(q);      &#xD;&#xA;        }&#xD;&#xA;        else      //否则,pre和p同步后移&#xD;&#xA;        {&#xD;&#xA;            pre= p;&#xD;&#xA;            p = p-&amp;gt;next;&#xD;&#xA;        }&#xD;&#xA;    }//while&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;235-带头结点的单链表l逆向输出每个结点的值&#34;&gt;2.3.5 带头结点的单链表L逆向输出每个结点的值&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;void R_Print(LinkList &amp;amp;L)&#xD;&#xA;{&#xD;&#xA;    if(L-&amp;gt;next != NULL)&#xD;&#xA;    {&#xD;&#xA;     &#x9;R_Print(L-&amp;gt;next); &#xD;&#xA;    }&#xD;&#xA;    print(L-&amp;gt;data);&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;236-带头结点的单链表l中删除最小值结点假设最小值结点唯一时间高效&#34;&gt;2.3.6 带头结点的单链表L中删除最小值结点(假设最小值结点唯一)，时间高效&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;LinkList Delete_Min(LinkList &amp;amp;L)&#xD;&#xA;{&#xD;&#xA;    LNode *pre = L,*P = pre-&amp;gt;next; //p为工作指针,pre指向其前驱 &#xD;&#xA;    LNode *minpre = pre,*minp = p; //保存最小值结点及其前驱&#xD;&#xA;    while(p!=NULL)&#xD;&#xA;    {&#xD;&#xA;        if(p-&amp;gt;data &amp;lt; minp-&amp;gt;data)&#xD;&#xA;        {&#xD;&#xA;            minp = p;  //找到比之前找到的最小值结点更小的结点&#xD;&#xA;            minpre = pre;&#xD;&#xA;        }&#xD;&#xA;        pre = p;   //继续扫描下一个结点&#xD;&#xA;        p = p-&amp;gt;next;&#xD;&#xA;    }&#xD;&#xA;    minpre-&amp;gt;next = minp-&amp;gt;next; //删除最小值结点&#xD;&#xA;    free(minp);&#xD;&#xA;    return L;&#xD;&#xA;}&#xD;&#xA;//若本题改为不带头结点的单链表，则实现上会有所不同，请读者自行思考。&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;237-带头结点的单链表就地逆置即辅助空间复杂度为o1&#34;&gt;2.3.7 带头结点的单链表就地逆置，即辅助空间复杂度为O(1)。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xD;&#xA;将头结点摘下，然后从第一结点开始，依次插入到头结点的后面，直到最后一个结点为止，这样就实现了链表的逆置。&#xD;&#xA;*/&#xD;&#xA;LinkList Reverse_1(LinkList L)&#xD;&#xA;{&#xD;&#xA;    LNode *p,*r; //p为工作指针，r为p的后继，以防断链&#xD;&#xA;    p = L-&amp;gt;next; //从第一个元素结点开始&#xD;&#xA;    L-&amp;gt;next = NULL; //先将头结点L的next域置为NULL&#xD;&#xA;    while(p!=NULL) //依次将元素结点摘下&#xD;&#xA;    { &#xD;&#xA;        r = p-&amp;gt;next;  //暂存p的后继&#xD;&#xA;        p-&amp;gt;next = L-&amp;gt;next; //将p结点插入到头结点之后&#xD;&#xA;        L-&amp;gt;next = p;&#xD;&#xA;        p = r;&#xD;&#xA;    }&#xD;&#xA;    return L;&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;238-带头结点的单链表l使其元素递增有序&#34;&gt;2.3.8 带头结点的单链表L使其元素递增有序&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xD;&#xA;采用直接插入排序算法的思想，先构成只含一个数据结点的有序单链表，然后依次扫描单链表中剩下的结点*p (直至p==NULL为止)，在有序表中通过比较查找 *p 的前驱结点*pre，然后*p插入到*pre之后。该算法时间复杂度为O(n^2). &#xD;&#xA;*/&#xD;&#xA;void Sort(LinkList &amp;amp;L)&#xD;&#xA;{&#xD;&#xA;    LNode *p = L-&amp;gt;next,*pre;&#xD;&#xA;    LNode *r = p-&amp;gt;next;   //r保持*p后继结点指针，以保证不断链 &#xD;&#xA;    p-&amp;gt;next = NULL;     //构造只含一个数据结点的有序表&#xD;&#xA;    p = r;&#xD;&#xA;    while(p!=NULL)&#xD;&#xA;    {&#xD;&#xA;        r = p-&amp;gt;next; //保存*p 的后继结点指针&#xD;&#xA;        pre = L;&#xD;&#xA;        while(pre-&amp;gt;next != NULL &amp;amp;&amp;amp; pre-&amp;gt;next-&amp;gt;data &amp;lt; p-&amp;gt;data)&#xD;&#xA;          pre = pre-&amp;gt;next; //在有序表中查找插入*p的前驱结点*pre&#xD;&#xA;        p-&amp;gt;next = pre-&amp;gt;next; //将*p插入到*pre之后&#xD;&#xA;        pre-&amp;gt;next = p;&#xD;&#xA;        p = r;  //扫描单链表中剩下的结点&#xD;&#xA;    }&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;239-带头结点的单链表l无序删除表中所有介于给定的两个值之间的元素若存在&#34;&gt;2.3.9 带头结点的单链表L无序，删除表中所有介于给定的两个值之间的元素(若存在)&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xD;&#xA;因为链表是无序的，所以只能逐个结点进行检查，进行删除。 &#xD;&#xA;*/&#xD;&#xA;void RangeDelete(LinkList &amp;amp;L,int min,int max)&#xD;&#xA;{&#xD;&#xA;    LNode *pr = L,&#xD;&#xA;    *p = L-&amp;gt;link; //p是检测指针，pr是其前驱&#xD;&#xA;    while(p!=NULL)&#xD;&#xA;    {&#xD;&#xA;        if(p-&amp;gt;data&amp;gt;min &amp;amp;&amp;amp; p-&amp;gt;data&amp;lt;max) //寻找到被删结点，删除&#xD;&#xA;        {&#xD;&#xA;            pr-&amp;gt;link = p-&amp;gt;link;&#xD;&#xA;            free(p);&#xD;&#xA;            p = pr-&amp;gt;link;&#xD;&#xA;        }&#xD;&#xA;        else  //否则继续寻找被删结点&#xD;&#xA;        {&#xD;&#xA;            pr = p;&#xD;&#xA;            p = p-&amp;gt;link;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;2310-找出两个链表的公共结点&#34;&gt;2.3.10 找出两个链表的公共结点&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xD;&#xA;两个链表有公共结点，则两条链表的拓扑形状像一条平放的Y。&#xD;&#xA;算法思路: 首先分别遍历两个链表得到它们的长度，并求出两个长度之差。在长的链表上先遍历长度之差个结点之后，再同步遍历两个链表，直到找到相同的结点，或者一直到链表结束。此时，该方法的时间复杂度为O(len1+len2)。&#xD;&#xA;*/&#xD;&#xA;LinkList Search_lst_Common(LinkList L1,LinkList L2)&#xD;&#xA;{&#xD;&#xA;    int len1 = Length(L1),len2 = Length(L2);&#xD;&#xA;    LinkList longList,shortList;&#xD;&#xA;    if(len1&amp;gt;len2)&#xD;&#xA;    {&#xD;&#xA;        longList = L1-&amp;gt;next;&#xD;&#xA;        shortList = L2-&amp;gt;next;&#xD;&#xA;        dist = len1 - len2;&#xD;&#xA;    }&#xD;&#xA;    else&#xD;&#xA;    {&#xD;&#xA;        longList = L2-&amp;gt;next;&#xD;&#xA;        shortList = L1-&amp;gt;next;&#xD;&#xA;        dist = len2-len1;&#xD;&#xA;    }&#xD;&#xA;    while(dist--)&#xD;&#xA;        longList = longList-&amp;gt;next;&#xD;&#xA;    &#xD;&#xA;    while(longList != NULL)&#xD;&#xA;    {&#xD;&#xA;        if(longList == shortList)&#xD;&#xA;            return longList;&#xD;&#xA;        else&#xD;&#xA;        {&#xD;&#xA;            longList = longList-&amp;gt;next;&#xD;&#xA;            shortList = shortList-&amp;gt;next;&#xD;&#xA;        }&#xD;&#xA;    }//while&#xD;&#xA;&#x9;return NULL;&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;2311-带头结点的单链表head为头指针递增输出数据元素并释放结点存储空间不允许使用数组作为辅助空间&#34;&gt;2.3.11 带头结点的单链表,head为头指针,递增输出数据元素，并释放结点存储空间。(不允许使用数组作为辅助空间)&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xD;&#xA;对链表遍历，在每次遍历中找出整个链表的最小值元素，输出并释放结点所占空间;再查找次小值元素，输出并释放空间，如此下去，直至链表为空，最后释放头结点所占存储空间。该算法的时间复杂度为O(n^2)。&#xD;&#xA;*/&#xD;&#xA;void Min_Delete(LinkList &amp;amp;head)&#xD;&#xA;{&#xD;&#xA;    while(head-&amp;gt;next !=NULL)  //循环到仅剩头结点&#xD;&#xA;    {&#xD;&#xA;        pre = head;       //pre为元素最小值结点的前驱结点的指针&#xD;&#xA;        p = pre-&amp;gt;next;    //p为工作指针&#xD;&#xA;        while(p-&amp;gt;next != NULL)&#xD;&#xA;        {&#xD;&#xA;            if(p-&amp;gt;next-&amp;gt;data &amp;lt; pre-&amp;gt;next-&amp;gt;data);&#xD;&#xA;            pre = p;   //记住当前最小值结点的前驱&#xD;&#xA;            p = p-&amp;gt;next; &#xD;&#xA;        }&#xD;&#xA;        print(pre-&amp;gt;next-&amp;gt;data); //输出最小值&#xD;&#xA;        u = pre-&amp;gt;next;    //删除元素值最小的结点，释放结点空间&#xD;&#xA;        pre-&amp;gt;next = u-&amp;gt;next;&#xD;&#xA;        free(u);&#xD;&#xA;    }//while&#xD;&#xA;    free(head);  //释放头结点&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;2312-带头结点的单链表a分解为使a表中含有原表中序号为奇数的元素b表中含有原表中序号为偶数的元素相对顺序保持不变&#34;&gt;2.3.12 带头结点的单链表A分解为使A表中含有原表中序号为奇数的元素，B表中含有原表中序号为偶数的元素，相对顺序保持不变。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xD;&#xA;设置一个访问变量(初值为0),每访问一个结点序号自动加1，然后根据序号的奇偶性将结点插入到A表或B表中，重复以上操作直到表尾。&#xD;&#xA;为了保持原来结点的顺序，采用尾插法建立单链表。此外，本算法完全可以不用设置序号变量。while循环中的代码改为将结点插入到表A中并将下一结点插入到B中，这样while中第一处理的结点就是奇数号结点，第二处理的就是偶数号结点。&#xD;&#xA;*/&#xD;&#xA;LinkList DisCreat_1(LinkList &amp;amp;A)&#xD;&#xA;{&#xD;&#xA;    int i=0;&#xD;&#xA;    B = (LinkList)malloc(sizeof(LNode));&#xD;&#xA;    B-&amp;gt;next = NULL;&#xD;&#xA;    LNode *ra = A,*rb = B;&#xD;&#xA;    p = A-&amp;gt;next;&#xD;&#xA;    A-&amp;gt;next = NULL;&#xD;&#xA;    while(p!=NULL)&#xD;&#xA;    {&#xD;&#xA;        i++;&#xD;&#xA;        if(i%2==0)&#xD;&#xA;        {&#xD;&#xA;            rb-&amp;gt;next = p;&#xD;&#xA;            rb = p;&#xD;&#xA;        }&#xD;&#xA;        else&#xD;&#xA;        {&#xD;&#xA;            ra-next = p;&#xD;&#xA;            ra = p;&#xD;&#xA;        }&#xD;&#xA;        p = p-&amp;gt;next;&#xD;&#xA;    }&#xD;&#xA;    ra-&amp;gt;next = NULL;&#xD;&#xA;    rb-next = NULL;&#xD;&#xA;    return B;&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;2313-带头结点的单链表ca1b1a2b2ambn拆解为两个线性表使得aa1a2anb-&#34;&gt;2.3.13 带头结点的单链表C={a1,b1,a2,b2······am,bn}拆解为两个线性表，使得A={a1,a2···an}，B =&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xD;&#xA;采用上题的思路，不设序号变量，二者的的区别在于对B表的建立采用头插法。这里需要注意的是，采用头插法插入结点后，*p的指针域已改变，若不设变量保存其后继结点则会引起断链，从而导致算法出错。&#xD;&#xA;*/&#xD;&#xA;LinkList DisCreat_2(LinkList &amp;amp;A)&#xD;&#xA;{&#xD;&#xA;    LinkList B = (LinkList)malloc(sizeof(LNode)); //创建B表表头&#xD;&#xA;    B-&amp;gt;next = NULL;          // B表的初始化&#xD;&#xA;    LNode *p = A-&amp;gt;next,*q;   //p为工作指针&#xD;&#xA;    LNode *ra = A;     //ra始终指向A的尾结点&#xD;&#xA;    while(p!=NULL)&#xD;&#xA;    {&#xD;&#xA;        ra-&amp;gt;next = p;      //将*p链到A的表尾&#xD;&#xA;     &#x9;ra = p;&#xD;&#xA;        p = p-&amp;gt;next;&#xD;&#xA;        q = p-&amp;gt;next;         // 头插后,*p将断链，因此用q记忆*p的后继&#xD;&#xA;        p-&amp;gt;next = B-&amp;gt;next;   //将*p插入到B的前端&#xD;&#xA;        B-&amp;gt;next = p;&#xD;&#xA;        p = q;&#xD;&#xA;    }&#xD;&#xA;&#x9;ra-&amp;gt;next = NULL; //A尾结点的next域置空&#xD;&#xA;    return B;&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;2314-递增的单链表去掉表中重复的元素只保留一个数值&#34;&gt;2.3.14 递增的单链表，去掉表中重复的元素，只保留一个数值&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xD;&#xA;由于是有序表，所有相同值域的结点都是相邻的。用p扫描递增单链表L,若*p结点的值域等于其后继结点的值域，则删除后者，否则p移向下一个结点。实际时间复杂度为O(n),空间复杂度为O(1)。&#xD;&#xA;*/&#xD;&#xA;void Del_Same(LinkList &amp;amp;L)&#xD;&#xA;{&#xD;&#xA;    LNode *P = L-&amp;gt;next,*q;&#xD;&#xA;    if(p==NULL)&#xD;&#xA;    &#x9;return;&#xD;&#xA;    while(p-&amp;gt;next !=NULL)&#xD;&#xA;    {&#xD;&#xA;        q = p-&amp;gt;next;  //q指向*p的后继结点&#xD;&#xA;        if(p-&amp;gt;data == q-&amp;gt;data) //找到重复的结点&#xD;&#xA;        {&#xD;&#xA;            p-&amp;gt;next = q-&amp;gt;next;  //释放*q结点&#xD;&#xA;            free(q);&#xD;&#xA;        }&#xD;&#xA;        else&#xD;&#xA;            p = p-&amp;gt;next; &#xD;&#xA;    }&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;2315-两个递增的单链表归并为一个递减的单链表并要求利用原来两个单链表的结点存放归并后的单链表&#34;&gt;2.3.15 两个递增的单链表归并为一个递减的单链表，并要求利用原来两个单链表的结点存放归并后的单链表&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xD;&#xA;合并时，均从第一个结点起开始比较，将较小的结点链入链表中，同时后移工作指针。该问题要求结果链表按元素值递减次序排列，故新链表的建立应该采用头插法。比较结束后，可能会有一个链表非空，此时用头插法将剩下的结点依次插入新链表中即可。&#xD;&#xA;*/&#xD;&#xA;void MergeList(LinkList &amp;amp;La,LinkList &amp;amp;Lb)&#xD;&#xA;{&#xD;&#xA;    LNode *r,*pa = La-&amp;gt;next, *pb = Lb-&amp;gt;next;&#xD;&#xA;    La-&amp;gt;next = NULL; //La作为结构链表的头指针，先将结果链表初始化为空&#xD;&#xA;    while(pa &amp;amp;&amp;amp; pb) //当两链表不空时，循环&#xD;&#xA;    {&#xD;&#xA;        if(pa-&amp;gt;data &amp;lt;= pb-&amp;gt;next)&#xD;&#xA;        {&#xD;&#xA;            r = pa-&amp;gt;next;&#xD;&#xA;&#x9;&#x9;&#x9;pa-&amp;gt;next = La-&amp;gt;next;&#xD;&#xA;            La-&amp;gt;next = pa;&#xD;&#xA;            pa = r;&#xD;&#xA;        }&#xD;&#xA;        else&#xD;&#xA;        {&#xD;&#xA;            r = pb-&amp;gt;next;     //r暂存pb的后继结点指针&#xD;&#xA;            pb-&amp;gt;next = La-&amp;gt;next;&#xD;&#xA;            La-&amp;gt;next = pb;   //将pb结点链于结果表中，同时逆置&#xD;&#xA;            pb =r;   //恢复pb为当前待比较结点&#xD;&#xA;        }&#xD;&#xA;        if(pa)&#xD;&#xA;            pb = pa;     //通常情况下会剩一个链表非空，处理剩余的部分。&#xD;&#xA;        while(pb)&#x9;&#x9; //处理剩下的一个非空链表&#xD;&#xA;        {&#x9;&#x9;&#xD;&#xA;            r = pb-&amp;gt;next; //依次插入到La中&#xD;&#xA;            pb-&amp;gt;next = La-&amp;gt;next;&#xD;&#xA;            La-&amp;gt;next = pb;&#xD;&#xA;            pb =r;&#xD;&#xA;        }&#xD;&#xA;        free(Lb);&#xD;&#xA;    }&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;2316-两个带头结点并且递增的单链表a和b中产生单链表cc中包含它们的公共元素要求不破坏ab的结点&#34;&gt;2.3.16 两个带头结点并且递增的单链表A和B中产生单链表C，C中包含它们的公共元素，要求不破坏A、B的结点&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xD;&#xA;表A、B都有序，可从第一个元素起依次比较A、B两表的元素，若元素值不等，则值小的指针往后移。若元素值相等，则创建一个值等于两结点的元素值的新结点，使用尾插法插入到新的链表中，并将两个原表指针后移一位，直到其中一个链表遍历到表尾。&#xD;&#xA;*/&#xD;&#xA;void Get_Common(LinkList A,LinkList B)&#xD;&#xA;{&#xD;&#xA;    LNode *p = A-&amp;gt;next,*q = B-&amp;gt;next. *r,*s;&#xD;&#xA;    LinkList C = (LinkList)malloc(sizeof(LNode)); //建立表C&#xD;&#xA;    r = C;                   //r始终指向C的尾结点&#xD;&#xA;    while(p!=NULL &amp;amp;&amp;amp; q!=NULL) //循环跳出条件&#xD;&#xA;    {&#xD;&#xA;        if(p-&amp;gt;data &amp;lt; q-&amp;gt;data)&#xD;&#xA;        &#x9;p = p-&amp;gt;next;   //若A的当前元素较小，后移指针&#xD;&#xA;        else if(p-&amp;gt;data &amp;gt; q-&amp;gt;data) &#xD;&#xA;            q = q-&amp;gt;next;  //若B的当前元素较小，后移指针&#xD;&#xA;        else   //找到公共元素结点&#xD;&#xA;        {&#xD;&#xA;            s = (LNode*)malloc(sizeof(LNode));&#xD;&#xA;            s-&amp;gt;data = p-&amp;gt;data; //复制产生结点*s&#xD;&#xA;            r-next = s; //将*s链接到C上&#xD;&#xA;            r = s;&#xD;&#xA;            p = p-&amp;gt;next;  //表A和B继续向后扫描&#xD;&#xA;            q = q-&amp;gt;next;&#xD;&#xA;        }&#xD;&#xA;        r -&amp;gt;next = NULL;   //置C尾结点指针为空&#xD;&#xA;    }&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;2317-两个递增的单链表a和b将a和b的公共元素存放于a链表中&#34;&gt;2.3.17 两个递增的单链表A和B，将A和B的公共元素存放于A链表中&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xD;&#xA;采用归并的思想，设置两个工作指针pa和pb,对两个链表进行归并扫描，只有同时出现在两集合中的元素才链接到结果表中且仅保留一个，其他的结点全部释放。当一个链表遍历完毕后，释放另一个表中剩下的全部结点。时间复杂度为O(len1+len2),空间复杂度为O(1).&#xD;&#xA;*/&#xD;&#xA;LinkList Union(LinkList &amp;amp;la,LinkList &amp;amp;lb)&#xD;&#xA;{&#xD;&#xA;    pa = la-&amp;gt;next;&#xD;&#xA;    pb = lb-&amp;gt;next;&#xD;&#xA;    pc = la;     //结果表中当前合并结点的前驱指针&#xD;&#xA;    while(pa &amp;amp;&amp;amp; pb)&#xD;&#xA;    {&#xD;&#xA;        if(pa-&amp;gt;data == pb-&amp;gt;data) //交集并入结果表中&#xD;&#xA;        {&#xD;&#xA;            pc-&amp;gt;next = pa; //A中结点链表到结果表&#xD;&#xA;            pc =pa;&#xD;&#xA;            pa = pa-&amp;gt;next;&#xD;&#xA;            u = pb;&#xD;&#xA;            pb = pb-&amp;gt;next;&#xD;&#xA;            free(u);&#xD;&#xA;        }&#xD;&#xA;        else if(pa-&amp;gt;data &amp;lt; pb-&amp;gt;data) //若A中当前结点值小于B中当前结点值&#xD;&#xA;        {&#xD;&#xA;            u=pa;&#xD;&#xA;            pa = pa-&amp;gt;next;&#xD;&#xA;            free(u);&#xD;&#xA;        }&#xD;&#xA;        else   //若B中当前结点值小于A中当前结点值&#xD;&#xA;        {&#xD;&#xA;            u = pb;&#xD;&#xA;            pb = pb-&amp;gt;next;&#xD;&#xA;            free(u);  //释放B中剩余结点&#xD;&#xA;        }&#xD;&#xA;    }//while结束&#xD;&#xA;    while(pa)  //B已遍历完，A未完&#xD;&#xA;    {&#xD;&#xA;        u = pa;&#xD;&#xA;        pa = pa-&amp;gt;next;  &#xD;&#xA;        free(u);   //释放A中剩余结点&#xD;&#xA;    }&#xD;&#xA;    while(pb){  //A已遍历完，B未完&#xD;&#xA;        u = pb;&#xD;&#xA;        pb = pb-&amp;gt;next;&#xD;&#xA;        free(u);  //释放B中剩余结点&#xD;&#xA;    }&#xD;&#xA;    pc-&amp;gt;next = NULL; //置结果链表尾指针为NULL&#xD;&#xA;    free(lb); //释放B表的头结点&#xD;&#xA;    return la;&#xD;&#xA;   &#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;2318-判断单链表b中的序列是否是单链表a中序列的连续子序列&#34;&gt;2.3.18 判断单链表B中的序列是否是单链表A中序列的连续子序列&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xD;&#xA;操作从两个链表的第一个结点开始，若对应数据相等，则后移指针;若对应数据不等，则A链表从上次开始比较结点的后继开始，B链表仍从第一个结点开始比较，直到B链表表到尾表示匹配成功。A链表到尾而B链表未到尾表示失败。操作中应记住A链表每次的开始结点，以便下次匹配时好从其后继开始。&#xD;&#xA;*/&#xD;&#xA;int Pattern(LinkList A,LinkList B)&#xD;&#xA;{&#xD;&#xA;    LNode *p = A; //p为A链表的工作指针，本题假定A和B均为结点&#xD;&#xA;    LNode *pre =p; //pre记住每趟比较中A链表的开始结点&#xD;&#xA;    LNode *q = B; //q是B链表的工作指针&#xD;&#xA;    while(p &amp;amp;&amp;amp; q)&#xD;&#xA;    {&#xD;&#xA;        if(p-&amp;gt;data == q-&amp;gt;data) //结点值相同&#xD;&#xA;        {&#xD;&#xA;            p = p-&amp;gt;next;&#xD;&#xA;            q = q-&amp;gt;next;&#xD;&#xA;        }&#xD;&#xA;        else&#xD;&#xA;        {&#xD;&#xA;            pre = pre-&amp;gt;next;&#xD;&#xA;            p = pre;  //A链表新的开始比较结点&#xD;&#xA;            q = B;  //q从链表第一个结点开始&#xD;&#xA;        }&#xD;&#xA;        if(q==NULL) //B已经比较结束&#xD;&#xA;           &#x9;return 1;  //说明B是A的子列&#xD;&#xA;        else&#xD;&#xA;            return 0;  //B不是A的子列&#xD;&#xA;    }&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;2319-判断带头结点的循环双链表是否对称&#34;&gt;2.3.19 判断带头结点的循环双链表是否对称&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xD;&#xA;让p从左到右扫描，q从右向左扫描，直到它们指向同一结点(p==q,当循环双链表中结点个数为奇数时)或相邻(p-&amp;gt;next=q 或q-&amp;gt;prior =p,当循环双链表中结点个数为偶数时)为止若它们所指结点值相同，则继续进行下去，否则返回0。若比较全部相等，则返回1。&#xD;&#xA;*/&#xD;&#xA;int Symmetry(DLinkList L)&#xD;&#xA;{&#xD;&#xA;    DNode *p = L-&amp;gt;next,*q = L-&amp;gt;prior; //两头工作指针&#xD;&#xA;    while(p!=q &amp;amp;&amp;amp; p-&amp;gt;next!=q)   &#xD;&#xA;    {   &#xD;&#xA;        if(p-&amp;gt;data == q-&amp;gt;data) //所指结点值相同则继续比较&#xD;&#xA;        {&#xD;&#xA;            p = p-&amp;gt;next;&#xD;&#xA;            q = q-&amp;gt;prior;&#xD;&#xA;        }&#xD;&#xA;        else    //否则，返回0&#xD;&#xA;            return 0;&#xD;&#xA;        return 1; //比较结束后返回1&#xD;&#xA;    }&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;2320-将循环单链表h2链接到h1之后要求链接后的链表仍保持循环链表形式&#34;&gt;2.3.20 将循环单链表h2链接到h1之后，要求链接后的链表仍保持循环链表形式&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xD;&#xA;先找到两个链表的尾指针，将第一个链表的尾指针与第二个链表的头结点链接起来，再使之成为循环的。&#xD;&#xA;*/&#xD;&#xA;LinkList Link(LinkList &amp;amp;h1,LinkList &amp;amp;h2)&#xD;&#xA;{&#xD;&#xA;    LNode *p,*q; //分别指向两个链表的尾结点&#xD;&#xA;    p = h1;&#xD;&#xA;    while(p-&amp;gt;next != h1) //寻找h1的尾结点&#xD;&#xA;        p = p-&amp;gt;next;&#xD;&#xA;    q = h2;&#xD;&#xA;    while(q-&amp;gt;next != h2) //寻找h2的尾结点&#xD;&#xA;        q = q-&amp;gt;next;&#xD;&#xA;    p-&amp;gt;next = h2;  //将h2链接到h1之后&#xD;&#xA;    q-&amp;gt;next = h1;  //令h2的尾结点指向h1&#xD;&#xA;    return h1;&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;2321-带头结点的循环单链表结点值均为正整数反复找出结点值最小的结点输出并删除直到单链表为空再删除表头结点&#34;&gt;2.3.21 带头结点的循环单链表，结点值均为正整数，反复找出结点值最小的结点输出并删除，直到单链表为空，再删除表头结点。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xD;&#xA;对于循环单链表L，在不空时循环，每循环一次查找一个最小结点(由minp指向最小值结点，minpre指向其前驱结点)并删除它。最后释放头结点。&#xD;&#xA;*/&#xD;&#xA;void Del_All(LinkList &amp;amp;L)&#xD;&#xA;{&#xD;&#xA;    LNode *p,*pre,*minp,*minpre;&#xD;&#xA;    while(L-&amp;gt;next != L)&#xD;&#xA;    {&#xD;&#xA;        P = l-&amp;gt;next; pre = L; //p为工作指针，pre指向其前驱&#xD;&#xA;        min = p;        &#xD;&#xA;        minpre = pre;   //minp指向最小值结点&#xD;&#xA;        while(p != L)  //循环一遍，查找最小值结点&#xD;&#xA;        {&#xD;&#xA;            if(p-&amp;gt;data &amp;lt; minp-&amp;gt;data)&#xD;&#xA;            {&#xD;&#xA;                minp = p;   //找到值更小的结点&#xD;&#xA;                minpre = pre; &#xD;&#xA;            }&#xD;&#xA;            pre = p;  //=查找下一个结点&#xD;&#xA;            p = p-&amp;gt;next;&#xD;&#xA;        }&#xD;&#xA;        prinf(&amp;#34;%d&amp;#34;,minp-&amp;gt;data); &#xD;&#xA;        minpre-&amp;gt;next = minp-&amp;gt;next; //将最小值结点从表中&amp;#34;断开&amp;#34;&#xD;&#xA;        free(minp);&#xD;&#xA;    }&#xD;&#xA;    free(L);   //释放头结点&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;241--查找链表倒数第-k-个位置上的结点-k为正整数若查找成功输出该结点的data域的值并返回1否则只返回0&#34;&gt;2.4.1  查找链表倒数第 k 个位置上的结点 (k为正整数)。若查找成功，输出该结点的data域的值，并返回1;否则只返回0。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xD;&#xA;描述算法的基本思想:定义两个指针变量p和q,初始时均指向头结点的下一个结点(链表的第一个结点),p指针沿链表移动;当p指针移动到第k个结点时，q指针开始于p指针同步移动;当p指针移动到最后一个结点时，q指针所指示结点为倒数第k个结点。以上过程对链表仅进行一遍扫描。&#xD;&#xA;描述算法的详细实现步骤:&#xD;&#xA;① count=0, p和q指向链表表头结点的下一个结点。&#xD;&#xA;② 若p为空，转⑤&#xD;&#xA;③ 若count等于k,则q指向下一个结点;否则，count = count +1。&#xD;&#xA;④ p指向下一个结点，转②&#xD;&#xA;⑤ 若count等于k,则查找成功，输出该结点的data域的值，返回1;否则，说明超过了线性表的长度,查找长度,返回0。&#xD;&#xA;⑥ 算法结束。&#xD;&#xA;程序设计语言描述算法:&#xD;&#xA;*/&#xD;&#xA;typedef struct LNode&#xD;&#xA;{&#xD;&#xA;&#x9;int data;&#xD;&#xA;    struct LNode *link;&#xD;&#xA;}LNode,*LinkList&#xD;&#xA;&#xD;&#xA;int Search_k(LinkList list,int k)&#xD;&#xA;{&#xD;&#xA;    LNode*p = list-&amp;gt;link,*q = list-&amp;gt;link; //指针p、q指示第一个结点&#xD;&#xA;    int count =0;&#xD;&#xA;    while(p!=NULL) //遍历链表直到第一个结点&#xD;&#xA;    {&#xD;&#xA;        if(count &amp;lt; k) count++; //计数，若count&amp;lt;k只移动p&#xD;&#xA;        else q = q-&amp;gt;link;&#xD;&#xA;        p = p-&amp;gt;link;  //之后让p、q同步移动&#xD;&#xA;    }//while&#xD;&#xA;    if(count &amp;lt; k)  //查找失败返回0&#xD;&#xA;    &#x9;return 0;  //否则打印并返回1&#xD;&#xA;    else&#xD;&#xA;    {&#xD;&#xA;        printf(&amp;#34;%d&amp;#34;,q-&amp;gt;data);&#xD;&#xA;    }&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;242-带头结点的单链表保存保存单词当两个单词有相同的后缀时可共享相同的后缀存储空间找出由-str1-和-str2所指向两个链表共同后缀的起始位置&#34;&gt;2.4.2 带头结点的单链表保存保存单词，当两个单词有相同的后缀时，可共享相同的后缀存储空间，找出由 str1 和 str2所指向两个链表共同后缀的起始位置。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xD;&#xA;描述算法的基本设计思想&#xD;&#xA;采用程序设计语言描述算法&#xD;&#xA;说明时间复杂度为O(len1+len2)&#xD;&#xA;*/&#xD;&#xA;typedef struct Node&#xD;&#xA;{&#xD;&#xA;&#x9;char data;&#xD;&#xA;    struct Node *next;&#xD;&#xA;}SNode;&#xD;&#xA;&#xD;&#xA;/*求链表长度的函数*/&#xD;&#xA;int listlen(SNode *head)&#xD;&#xA;{&#xD;&#xA;    int len = 0;&#xD;&#xA;    while(head-&amp;gt;next != NULL)&#xD;&#xA;    {&#xD;&#xA;        len++;&#xD;&#xA;        head = head-&amp;gt;next;&#xD;&#xA;    }&#xD;&#xA;    return len;&#xD;&#xA;}&#xD;&#xA;/*找出共同后缀的起始地址*/&#xD;&#xA;SNode* find_addr(SNode *str1,SNode *str2)&#xD;&#xA;{&#xD;&#xA;    int m,n;&#xD;&#xA;    SNode *p,*q;&#xD;&#xA;    m = listlen(str1);  //求str1的长度&#xD;&#xA;    n = listen(str2); //求str2的长度&#xD;&#xA;    for(p = str1; m&amp;gt;n;m--) //若m&amp;gt;n，使q指向链表中的第 n-m+1 个结点&#xD;&#xA;        p = p-&amp;gt;next;&#xD;&#xA;    for(q = str2; m&amp;lt;n;n--) //若m&amp;lt;n，使q指向链表中的第 n-m+1 个结点&#xD;&#xA;        q = q-&amp;gt;next;&#xD;&#xA;    while(p-&amp;gt;next!= NULL &amp;amp;&amp;amp; p-&amp;gt;next!= q-&amp;gt;next) //将指针p和q同步向后移动&#xD;&#xA;    {&#xD;&#xA;        p = p-&amp;gt;next;&#xD;&#xA;        q = q-&amp;gt;next;&#xD;&#xA;    }//while&#xD;&#xA;    return p-&amp;gt;next; //返回共同后缀的起始地址&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;243-带头结点的单链表保存-m-个整数且-datann为正整数-对于链表中绝对值相等的结点仅保留第一次出现的结点而删除其余绝对值相等的结点时间上尽可能高效&#34;&gt;2.4.3 带头结点的单链表保存 m 个整数，且 |data|&amp;lt;=n，(n为正整数), 对于链表中绝对值相等的结点，仅保留第一次出现的结点而删除其余绝对值相等的结点，时间上尽可能高效。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xD;&#xA;描述算法的基本设计思想是用空间换时间，使用辅助数组记录链表中已出现的数值，从而只需对链表进行一趟扫描。&#xD;&#xA;因为|data|&amp;lt;=n,故辅助数组q的大小为n+1,各元素的初值均为0。依次扫描链表中的各结点，同时检查q[|data|]的值，若为0则保留该结点，并令q[|data|] = 1，否则将该结点从链表中删除。&#xD;&#xA;时间复杂度为O(m),空间复杂度为O(n)&#xD;&#xA;*/&#xD;&#xA;&#xD;&#xA;/*使用C或C++给出单链表结点的数据类型定义*/&#xD;&#xA;typedef int node&#xD;&#xA;{&#xD;&#xA;    int *data;&#xD;&#xA;    struct node *link;&#xD;&#xA;}NODE;&#xD;&#xA;Typedef NODE *PNODE;&#xD;&#xA;void func(PNODE h,int n)&#xD;&#xA;{&#xD;&#xA;    PNODE p=h,r;&#xD;&#xA;    int *q,m;&#xD;&#xA;    q = (int*)malloc(sizeof(int)*n+1));&#xD;&#xA;    for(int i=0; i&amp;lt;n+1;i++)&#xD;&#xA;        *(q+i) = 0;&#xD;&#xA;    while(p-&amp;gt;link != NULL)&#xD;&#xA;    {&#xD;&#xA;        m = p-&amp;gt;link-&amp;gt;data&amp;gt;0 ? p-&amp;gt;link-&amp;gt;data: -p-&amp;gt;link-&amp;gt;data;&#xD;&#xA;        if(*(q+m)==0)&#xD;&#xA;        {&#xD;&#xA;            *(q+m)=1;&#xD;&#xA;            p = p-&amp;gt;link;&#xD;&#xA;        }&#xD;&#xA;        else&#xD;&#xA;        {&#xD;&#xA;            r = p-&amp;gt;link;&#xD;&#xA;            p-&amp;gt;link = r-&amp;gt;link;&#xD;&#xA;            free(r);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    free(q);&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;311-单链表头指针为ldata域为字符型判断链表的全部-n-个字符是否中心对称例如-xyx-是中心对称&#34;&gt;3.1.1 单链表头指针为L，data域为字符型。判断链表的全部 n 个字符是否中心对称。例如 xyx 是中心对称。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xD;&#xA;让链的前一半元素依次进栈，在处理链表的最后一半元素时，当访问到链表的一个元素后，就从栈中弹出一个元素，两个元素比较，若相等，则将链表中的下一个元素与栈中弹出的元素比较，直至链表到尾。这时若栈是空栈，则得出链表中心对称的结论;否则，当链表中的一个元素与弹出元素不等时，结论为非中心对称。&#xD;&#xA;*/&#xD;&#xA;int dc(LinkList L,int n)&#xD;&#xA;{&#xD;&#xA;    int i;&#xD;&#xA;    char s[n/2];   //s字符栈&#xD;&#xA;    p = L-&amp;gt;next;   //p是链表的工作指针，指向待处理的当前元素&#xD;&#xA;    for(i=0;i&amp;lt;n/2;i++)  //链表前一半元素进栈&#xD;&#xA;    {&#xD;&#xA;        s[i] = p-&amp;gt;data;&#xD;&#xA;        p = p-&amp;gt;next;&#xD;&#xA;    }&#xD;&#xA;    i--;         //恢复最后的i值&#xD;&#xA;    if(n%2 == 1) //若n是奇数，后移过中心结点&#xD;&#xA;        p = p-&amp;gt;next;&#xD;&#xA;    while(p!=NULL &amp;amp;&amp;amp; s[i]==p-&amp;gt;data) //检测是否中心对称&#xD;&#xA;    {     &#xD;&#xA;        i--;   //i充当栈顶指针&#xD;&#xA;        p = p-&amp;gt;next;&#xD;&#xA;    }&#xD;&#xA;    if(i==-1)   //栈为空栈&#xD;&#xA;        return i;  //链表中心对称&#xD;&#xA;    else&#xD;&#xA;        return 0;  //链表不中心对称&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;321--循环队列设置一个标志域tag并以-tag-的值为-0-或-1-来区分队头指针-front-和-队尾指针-rear-相同时的队列状态是--空-还是-满试编写此结构相应的入队和出队算法&#34;&gt;3.2.1  循环队列设置一个标志域tag，并以 tag 的值为 0 或 1 来区分队头指针 front 和 队尾指针 rear 相同时的队列状态是 &amp;quot; 空&amp;quot; 还是 “满”,试编写此结构相应的入队和出队算法。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xD;&#xA;进队时置tag为1,出队时置tag为0。置tag =0、front =rear =0,这样队列的4要素如下:&#xD;&#xA;队空条件: Q.front == Q.rear且Q.tag ==0&#xD;&#xA;队满条件: Q.front == Q.rear且Q.tag ==1&#xD;&#xA;进队操作: Q.data[Q.rear] =x; Q.rear = (Q.rear +1)% MaxSize; Q.tag =1&#xD;&#xA;出队操作: x = Q.data[Q.front]; Q.front = (Q.front+1) % MaxSize; Q.tag =0&#xD;&#xA;*/&#xD;&#xA;&#xD;&#xA;/*&#xD;&#xA;设&amp;#34;tag&amp;#34;法循环入队算法&#xD;&#xA;*/&#xD;&#xA;int EnQueue1(SqQueue &amp;amp;Q,int x)&#xD;&#xA;{&#xD;&#xA;    if(Q.front==Q.rear &amp;amp;&amp;amp; Q.tag==1)&#xD;&#xA;        return 0;  //两个条件都满足时则队满&#xD;&#xA;    Q.data[Q.rear] = x;&#xD;&#xA;    Q.rear = (Q.rear +1) % MaxSize;&#xD;&#xA;    Q.tag = 0;   //可能队满&#xD;&#xA;    return 1;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;/*&#xD;&#xA;设&amp;#34;tag&amp;#34;法循环出队算法&#xD;&#xA;*/&#xD;&#xA;int DeQueue1(SeQueue &amp;amp;Q,int x)&#xD;&#xA;{&#xD;&#xA;    if(Q.front==Q.rear &amp;amp;&amp;amp; Q.tag == 0)&#xD;&#xA;        return 0; //两个条件都满足时则队空&#xD;&#xA;    x = Q.data[Q.front];&#xD;&#xA;    Q.front = (Q.front +1) % MaxSize;&#xD;&#xA;    Q.tag = 0;   //可能队空&#xD;&#xA;    return 1;&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;322-q是一个队列s是一个空栈实现将队列中的元素逆置的算法&#34;&gt;3.2.2 Q是一个队列，S是一个空栈，实现将队列中的元素逆置的算法。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xD;&#xA;让队列中的元素逐个出队列,入栈;&#xD;&#xA;全部入栈后再逐个出栈,入队列。&#xD;&#xA;*/&#xD;&#xA;void Inverser(Stack S,Queue Q)&#xD;&#xA;{&#xD;&#xA;    while(!QueueEmpty(Q))&#xD;&#xA;    {&#xD;&#xA;        x = DeQueue(Q); //栈中全部元素依次出队&#xD;&#xA;        Push(S,x);   //元素依次入栈&#xD;&#xA;    }&#xD;&#xA;    while(!StackEmpty(S))&#xD;&#xA;    {&#xD;&#xA;        Pop(S,x);      //栈中全部元素依次出栈&#xD;&#xA;        EnQueue(Q,x);  //再入队&#xD;&#xA;    }&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;323-利用两个栈-s1s2-来模拟一个队列已知栈的4个运算来实现该队列的-3-个运算&#34;&gt;3.2.3 利用两个栈 S1、S2 来模拟一个队列，已知栈的4个运算来实现该队列的 3 个运算。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xD;&#xA;4个运算定义如下:&#xD;&#xA;Push(S,x);&#xD;&#xA;pop(S,x);&#xD;&#xA;StackEmpty(S);&#xD;&#xA;StackOverflow(S);&#xD;&#xA;队列的3个运算分别是 Enqueue、Dequeue、QueueEmpty&#xD;&#xA;*/&#xD;&#xA;//进队算法&#xD;&#xA;int EnQueue(Stack &amp;amp;S1,Stack &amp;amp;S2,int e)&#xD;&#xA;{&#xD;&#xA;    if(!StackOverflow(S1))&#xD;&#xA;    {&#xD;&#xA;        Push(S1,e);&#xD;&#xA;        return 1;&#xD;&#xA;    }&#xD;&#xA;    if(StackOverflow(S1) &amp;amp;&amp;amp; !StackEmpty(S2))&#xD;&#xA;    {&#xD;&#xA;        while(!StackEmpty(S1))&#xD;&#xA;        {&#xD;&#xA;            Pop(S1,x);&#xD;&#xA;            Push(S2,x);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    Push(S1,e);&#xD;&#xA;    return 1;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;//出队算法&#xD;&#xA;void DeQueue(Stack &amp;amp;S1,Stack &amp;amp;S2,int &amp;amp;x)&#xD;&#xA;{&#xD;&#xA;    if(!StackEmpty(S2))&#xD;&#xA;    {&#xD;&#xA;        Pop(S2,x);&#xD;&#xA;    }&#xD;&#xA;    else if(StackEmpty(S1))&#xD;&#xA;    {&#xD;&#xA;        printf(&amp;#34;队列为空&amp;#34;);&#xD;&#xA;    }&#xD;&#xA;    else&#xD;&#xA;    {&#xD;&#xA;        while(!StackEmpty(S1))&#xD;&#xA;        {&#xD;&#xA;            Pop(S1,x);&#xD;&#xA;            Push(S2,x);&#xD;&#xA;        }&#xD;&#xA;        Pop(S2,x);&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;//队列为空&#xD;&#xA;int QueueEmpty(Stack S1,Stack S2)&#xD;&#xA;{&#xD;&#xA;    if(StackEmpty(S1) &amp;amp;&amp;amp; StackEmpty(S2))&#xD;&#xA;        return 1;&#xD;&#xA;    else&#xD;&#xA;        return 0;&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;331-判别算法表达式的括号是否配对以字符0作为算术表达式的结束符&#34;&gt;3.3.1 判别算法表达式的括号是否配对，以字符&amp;quot;\0&amp;quot;作为算术表达式的结束符。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;bool BracketCheck(char *str)&#xD;&#xA;{&#xD;&#xA;    InitStack(S);  //初始化栈&#xD;&#xA;    int i =0;&#xD;&#xA;    while(str[i] !=&amp;#39;\0&amp;#39;)&#xD;&#xA;    {&#xD;&#xA;        switch(str[i])&#xD;&#xA;        {   //左括号入栈&#xD;&#xA;            case &amp;#39;(&amp;#39;:&#xD;&#xA;                Push(S,&amp;#39;(&amp;#39;);&#xD;&#xA;                break;&#xD;&#xA;            case &amp;#39;[&amp;#39;:&#xD;&#xA;                Push(S,&amp;#39;(&amp;#39;);&#xD;&#xA;                break;&#xD;&#xA;            case &amp;#39;{&amp;#39;:&#xD;&#xA;                Push(S,&amp;#39;(&amp;#39;);&#xD;&#xA;                break;&#xD;&#xA;            //遇到右括号,检测栈顶&#xD;&#xA;            case &amp;#39;)&amp;#39;:&#xD;&#xA;                Pop(S,e);&#xD;&#xA;                if(e!=&amp;#39;(&amp;#39;)&#xD;&#xA;                    return false;&#xD;&#xA;                break;&#xD;&#xA;            case &amp;#39;]&amp;#39;:&#xD;&#xA;                if(e!=&amp;#39;[&amp;#39;)&#xD;&#xA;                    return false;&#xD;&#xA;                Pop(S,e);&#xD;&#xA;                break;&#xD;&#xA;            case &amp;#39;}&amp;#39;:&#xD;&#xA;                Pop(S,e);&#xD;&#xA;                if(e!=&amp;#39;{&amp;#39;)&#xD;&#xA;                    return false;&#xD;&#xA;                break;&#xD;&#xA;            default:&#xD;&#xA;                break;&#xD;&#xA;        }//switch&#xD;&#xA;    }//while&#xD;&#xA;    if(!IsEmpty(S))&#xD;&#xA;    {&#xD;&#xA;        printf(&amp;#34;括号不匹配\n&amp;#34;);&#xD;&#xA;        return false;&#xD;&#xA;    }&#xD;&#xA;    else&#xD;&#xA;    {&#xD;&#xA;        printf(&amp;#34;括号匹配\n&amp;#34;);&#xD;&#xA;        return true;&#xD;&#xA;    }&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;332-过江渡船每次只能载-10-辆车过江过江车辆分为客车类和货车类上渡船有如下规定同类车先到先上船客车先于货车上船且每上4辆客车才允许放上-1-辆货若等待客车不足-4-辆则以货车代替若无货车等待允许客车都上船试设计一个算法模拟渡口管理&#34;&gt;3.3.2 过江渡船每次只能载 10 辆车过江，过江车辆分为客车类和货车类，上渡船有如下规定：同类车先到先上船;客车先于货车上船，且每上4辆客车，才允许放上 1 辆货;若等待客车不足 4 辆，则以货车代替;若无货车等待，允许客车都上船，试设计一个算法模拟渡口管理。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xD;&#xA;假设数组q的最大下标为10,,恰好是每次载渡的最大量。假设客车的队列为q1,货车的队列为q2。若q1充足，则每取4个q1元素后再取一个q2元素，直到q的长度为10。若q1不充足，则直接用q2补齐。&#xD;&#xA;*/&#xD;&#xA;Queue q;   //过江渡船载渡队列&#xD;&#xA;Queue q1;  //客车队列&#xD;&#xA;Queue q2;  //货车队列&#xD;&#xA;void manager()&#xD;&#xA;{&#xD;&#xA;    int i=0,j=0; //j表示渡船上的总车辆数&#xD;&#xA;    while(j&amp;lt;10)  //不足10辆时&#xD;&#xA;    {&#xD;&#xA;        if(!QueueEmpty(q1) &amp;amp;&amp;amp; i&amp;lt;4) //客车队列不为空，则未上足4辆&#xD;&#xA;        {&#xD;&#xA;            DeQueue(q1,x); //从客车队列出列&#xD;&#xA;            EnQueue(q,x);  //客车上渡船&#xD;&#xA;            i++;   //客车数加1&#xD;&#xA;            j++;   //渡船上的总车辆数加1&#xD;&#xA;        }&#xD;&#xA;        else if(i==4 &amp;amp;&amp;amp; !QueueEmpty(q2)) //客车已上足4辆&#xD;&#xA;        {&#xD;&#xA;            DeQueue(q2,x); //从货车队列出列&#xD;&#xA;            EnQueue(q,x);  //货车上渡船&#xD;&#xA;            j++;    //渡船上的总车辆数加1&#xD;&#xA;            i = 0;  //每上一辆车，i重新计数&#xD;&#xA;        }&#xD;&#xA;        else&#xD;&#xA;        {&#xD;&#xA;            while(j&amp;lt;10 &amp;amp;&amp;amp; i&amp;lt;4 &amp;amp;&amp;amp;!QueueEmpty(q2))  //客车队列空&#xD;&#xA;            {&#xD;&#xA;                DeQueue(q2,x);  //从货车队列出队&#xD;&#xA;                EnQueue(q,x);  //货车上渡船&#xD;&#xA;                i++;&#xD;&#xA;                j++;  //渡船上的总车辆加1&#xD;&#xA;            }&#xD;&#xA;            i = 0;&#xD;&#xA;        }&#xD;&#xA;        if(QueueEmpty(q1) &amp;amp;&amp;amp; QueueEmpty(q2))&#xD;&#xA;            j = 11;   //若货车和客车加起来不足10辆&#xD;&#xA;    }&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;411-编写后序遍历二叉树的非递归算法&#34;&gt;4.1.1 编写后序遍历二叉树的非递归算法&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xD;&#xA;算法思想：后序非递归遍历二叉树的顺序是先访问左子树，再访问右子树，最后访问根结点。当用堆栈来存储结点时，必须分清返回根结点时是从左子树返回的还是从右子树返回的。所以，使用辅助指针r，其指向最近访问过的结点。也可在结点中增加一个标志域，记录是否已被访问。&#xD;&#xA;PS:访问一个结点*p时，栈中结点恰好是*p结点的所有祖先。从栈底到栈顶结点再加上*p结点，刚好构成从根结点到*p结点的一条路径。在很多算法设计中都利用了这一特性求解，如求根结点到某结点的路径、求两个结点的最近公共祖先等，都可以利用这个思路来实现。&#xD;&#xA;*/&#xD;&#xA;void postOrder(BiTree T)&#xD;&#xA;{&#xD;&#xA;    InitStack(S);&#xD;&#xA;    p = T;&#xD;&#xA;    r = NULL;&#xD;&#xA;    while(p|| !IsEmpty(S))&#xD;&#xA;    {&#xD;&#xA;        if(p){   //走到最左边&#xD;&#xA;           push(S,p);&#xD;&#xA;           p = p-&amp;gt;lchild;&#xD;&#xA;        }&#xD;&#xA;        else{  //向右&#xD;&#xA;            GetTop(S,p);  //取栈顶结点&#xD;&#xA;            if(p-&amp;gt;rchild &amp;amp;&amp;amp; p-&amp;gt;rchild != r)  //若右子树存在，且未被访问过&#xD;&#xA;            {&#xD;&#xA;                p = p-&amp;gt;rchild;  //转向右&#xD;&#xA;                push(S,p);      //压入栈&#xD;&#xA;                p = p-&amp;gt;lchild;  //再走到最左&#xD;&#xA;            }&#xD;&#xA;            else{               //否则，弹出结点并访问&#xD;&#xA;                pop(S,p);       //将结点弹出&#xD;&#xA;                visit(p-&amp;gt;data); //访问该结点&#xD;&#xA;                r = p;          //记录最近访问过的结点&#xD;&#xA;                p = NULL;       //结点访问完后，重置该指针&#xD;&#xA;            }&#xD;&#xA;        }//else&#xD;&#xA;    }//while&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;412-编写二叉树的自下而上自右到左的层次遍历算法&#34;&gt;4.1.2 编写二叉树的自下而上、自右到左的层次遍历算法&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xD;&#xA;一般的二又树层次遍历是自上而下、从左到右，这里的遍历顺序恰好相反。算法思想：利用原有的层次遍历算法，出队的同时将各结点指针入栈在所有结点入栈后再从栈顶开始依次访问即为所求的算法。具体实现如下：&#xD;&#xA;1）把根结点入队列。&#xD;&#xA;2）把一个元素出队列，遍历这个元素&#xD;&#xA;3）依次把这个元素的右孩子、左孩子入队列。&#xD;&#xA;4）若队列不空，则跳到（2），否则结束。&#xD;&#xA;*/&#xD;&#xA;void InvertLevel(BiTree bt){&#xD;&#xA;&#x9;Stack s;&#xD;&#xA;    Queue Q;&#xD;&#xA;    if(bt!=NULL)&#xD;&#xA;    {&#xD;&#xA;        InitStack(s);  //栈初始化，栈中存放二叉树结点的指针&#xD;&#xA;        InitQueue(Q);  //队列初始化，队列中存放二叉树结点的指针&#xD;&#xA;        EnQueue(Q,bt);&#xD;&#xA;        while(IsEmpty(Q)==false) //从上而下层次遍历&#xD;&#xA;        {&#xD;&#xA;            DeQueue(Q,p);&#xD;&#xA;            Push(s,p); //出队，入栈&#xD;&#xA;            if(p-&amp;gt;lchild)&#xD;&#xA;                EnQueue(Q,p-&amp;gt;lchild); //若左子女不空，则入队列&#xD;&#xA;            if(p-&amp;gt;rchild)&#xD;&#xA;                EnQueue(Q,p-&amp;gt;rchild); //若右子女不空，则入队列&#xD;&#xA;        }&#xD;&#xA;        while(IsEmpty(s) == false){&#xD;&#xA;            Pop(s,p);&#xD;&#xA;            visit(p-&amp;gt;data);&#xD;&#xA;        }  //自下而上、自右到左的层次遍历&#xD;&#xA;    }//if结束&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;413-非递归算法求二叉树的高度&#34;&gt;4.1.3 非递归算法求二叉树的高度&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xD;&#xA;采用层次遍历的算法，设置变量1eve1记录当前结点所在的层数，设置变量last指向当前层的最右结点，每次层次遍历出队时与last 指针比较，若两者相等，则层数加1，并让last指向下一层的最右结点，直到遍历完成。1eve1的值即为二叉树的高度。&#xD;&#xA;*/&#xD;&#xA;int Btdepth(BiTree T)&#xD;&#xA;{&#xD;&#xA;    if(!T)&#xD;&#xA;        return 0;  //树空，高度为0&#xD;&#xA;    int front= -1, rear = -1;&#xD;&#xA;    int last = 0,level = 0; //last指向下一层第一个结点的位置&#xD;&#xA;    BiTree Q[MaxSize]; //设置队列Q，元素是二叉树结点指针且容量足够&#xD;&#xA;    Q[++rear] = T;  //将根结点入队&#xD;&#xA;    BiTree p;&#xD;&#xA;    while(front &amp;lt; rear) //队不空，则循环&#xD;&#xA;    { &#xD;&#xA;        p = Q[++front]; //队列元素出队，即正在访问的结点&#xD;&#xA;        if(p-&amp;gt;lchild)&#xD;&#xA;            Q[++rear] = p-&amp;gt;lchild;  //左孩子入队&#xD;&#xA;        if(p-&amp;gt;rchild)&#xD;&#xA;            Q[++rear] = p-&amp;gt;rchild; //右孩子入队&#xD;&#xA;        if(front == last){  //处理该层的最右结点&#xD;&#xA;            level++; //层数增1&#xD;&#xA;            last = rear; //last指向下层&#xD;&#xA;        }&#xD;&#xA;     }&#xD;&#xA;    return level;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;/*&#xD;&#xA;求某层的结点个数、每层的结点个数、树的最大宽度等，都采用与此题类似的思想。当然，此题可编写递归算法，其实现如下&#xD;&#xA;*/&#xD;&#xA;int Btdepth2(BiTree T)&#xD;&#xA;{&#xD;&#xA;    if(T==NULL)&#xD;&#xA;        return 0;  //空树，高度为0&#xD;&#xA;    ldep = Btdepth(T-&amp;gt;lchild); //左子树高度&#xD;&#xA;    rdep = Btdepth(T-&amp;gt;rchild); //右子树高度&#xD;&#xA;    if(ldep &amp;gt; rdep)&#xD;&#xA;        return ldep+1; //树的高度为子树最大高度加根节点&#xD;&#xA;    else&#xD;&#xA;        return rdep+1;&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;414-二叉树各结点的值互不相同其先序遍历和中序遍历序列分别存于两个一维数组a1n和b1n中试编写算法建立该二叉树的二叉链表&#34;&gt;4.1.4 二叉树各结点的值互不相同，其先序遍历和中序遍历序列分别存于两个一维数组A[1···n]和B[1···n]中，试编写算法建立该二叉树的二叉链表。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xD;&#xA;由先序序列和中序序列可以唯一确定一棵二叉树。算法的实现步骤如下：&#xD;&#xA;1) 根据先序序列确定树的根结点。&#xD;&#xA;2) 根据根结点在中序序列中划分出二叉树的左、右子树包含哪些结点，然后根据左、右子树结点在先序序列中的次序确定子树的根结点，即回到步骤1）。&#xD;&#xA;3) 如此重复上述步骤，直到每棵子树仅有一个结点（该子树的根结点）为止。&#xD;&#xA;*/&#xD;&#xA;BiTree PreInCreat(int A[],int B[],int l1,int h1,int l2,int h2)&#xD;&#xA;{&#xD;&#xA;    //11,h1为先序的第一和最后一个结点下标，12,h2为中序的第一和最后一个结点下标&#xD;&#xA;    //初始调用时,l1=l2=1, h1=h2=n&#xD;&#xA;&#x9;root = (BiTNode*)malloc(sizeof(BiTNode));&#xD;&#xA;    root-&amp;gt;data = A[l1];&#xD;&#xA;    for(i = l2;B[i]!=root-&amp;gt;data;i++);&#xD;&#xA;    llen = i - l2;&#xD;&#xA;    rlen = h2 - i;&#xD;&#xA;    if(llen)&#xD;&#xA;        root-&amp;gt;lchild = PreInCreat(A,B,l1+1,l1+llen,l2,l2+llen-1);&#xD;&#xA;    else&#xD;&#xA;        root-&amp;gt;lchild = NULL;&#xD;&#xA;    return root;&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;415-二叉树按二叉链表形式存储写一个判别给定二叉树是否是完全二叉树的算法&#34;&gt;4.1.5 二叉树按二叉链表形式存储，写一个判别给定二叉树是否是完全二叉树的算法。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xD;&#xA;根据完全二叉树的定义，具有n个结点的完全二叉树与满二又树中编号从1～n的结点一一对应。&#xD;&#xA;算法思想：采用层次遍历算法，将所有结点加入队列（包括空结点）。遇到空结点时，查看其后是否有非空结点。若有，则二又树不是完全了叉树。&#xD;&#xA;*/&#xD;&#xA;bool IsComplete(BiTree T)&#xD;&#xA;{&#xD;&#xA;    InitQueue(Q);&#xD;&#xA;    if(!T)&#xD;&#xA;        return 1; //空树为满二叉树&#xD;&#xA;    EnQueue(Q,T);&#xD;&#xA;    while(!IsEmpty(Q))&#xD;&#xA;    {&#xD;&#xA;        DeQueue(Q,p);&#xD;&#xA;        if(p)  //结点非空，将其左、右子树入队列&#xD;&#xA;        {&#xD;&#xA;            EnQueue(Q,p-&amp;gt;lchild); &#xD;&#xA;            EnQueue(Q,p-&amp;gt;rchild);&#xD;&#xA;        }&#xD;&#xA;        else   //结点为空，检查其后是否有非空结点&#xD;&#xA;            while(!IsEmpty(Q)){&#xD;&#xA;                DeQueue(Q,p);&#xD;&#xA;                if(p)    //结点非空，则二叉树为非完全二叉树&#xD;&#xA;                    return 0;&#xD;&#xA;            }&#xD;&#xA;    }&#xD;&#xA;    return 1;&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;416-二叉树按二叉链表形式存储计算一棵给定二叉树的所有双分支结点个数&#34;&gt;4.1.6 二叉树按二叉链表形式存储，计算一棵给定二叉树的所有双分支结点个数。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xD;&#xA;计算一棵二叉树b中所有双分支结点个数的递归模型f（b）如下:&#xD;&#xA;f(b)=0&#x9;&#x9;                            若b=NULL&#xD;&#xA;f(b)=f(b-&amp;gt;1chi1d) + f(b-&amp;gt;rchild) + 1    若*b为双分支结点&#xD;&#xA;f(b)=f(b-&amp;gt;1chi1d) + f(b-&amp;gt;rchild)        其他情况（*b为单分支结点或叶子结点）&#xD;&#xA;*/&#xD;&#xA;int DsonNodes(BiTree b)&#xD;&#xA;{&#xD;&#xA;    if(b==NULL)&#xD;&#xA;    &#x9;return 0;&#xD;&#xA;    else if(b-&amp;gt;lchild!=NULL &amp;amp;&amp;amp; b-&amp;gt;rchild!=NULL)&#xD;&#xA;        return DsonNodes(b-&amp;gt;lchild) + DsonNodes(b-&amp;gt;rchild)+1;&#xD;&#xA;    else&#xD;&#xA;        return DsonNodes(b-&amp;gt;lchild) + DsonNodes(b-&amp;gt;rchild);&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;417-二叉树b按二叉链表形式存储编写一个树b中所有结点的左右子树进行交换的函数&#34;&gt;4.1.7 二叉树B按二叉链表形式存储，编写一个树B中所有结点的左、右子树进行交换的函数。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xD;&#xA;采用递归算法实现交换二叉树的左、右子树，首先交换b结点的左孩子的左、右子树，然后交换b结点的右孩子的左、右子树，最后交换b结点的左、右孩子，当结点为空时递归结束（后序遍历的思想）。&#xD;&#xA;*/&#xD;&#xA;void swap(BiTree b)&#xD;&#xA;{&#xD;&#xA;    if(b){&#xD;&#xA;        swap(b-&amp;gt;lchild);  //递归地交换左子树&#xD;&#xA;        swap(b-&amp;gt;rchild);  //递归地交换右子树&#xD;&#xA;        temp = b-&amp;gt;lchild;  //交换左、右孩子结点&#xD;&#xA;        b-&amp;gt;lchild = b-&amp;gt;rchild;&#xD;&#xA;        b-&amp;gt;rchild = temp;&#xD;&#xA;    }&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;418--二叉树按二叉链表形式存储求先序遍历序列中第-k-1k二叉树中结点个数-个结点的值&#34;&gt;4.1.8  二叉树按二叉链表形式存储，求先序遍历序列中第 k (1&amp;lt;=k&amp;lt;=二叉树中结点个数) 个结点的值。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xD;&#xA;设置一个全局变量i记录已访问过的结点的序号，其初值是根结点在先序序列中的序号，即1.当二叉树b为空时返回特殊字符，，当i==k时，表示找到了满足条件的结点，返回b-&amp;gt;data;当ik时，递归地在左子树中查找，若找到则返回该值，否则继续递归地在右子树中查找，并返回其结果。&#xD;&#xA;本题实质上就是一个遍历算法的实现，只不过用一个全局变量来记录访问的序号，求其他遍历序列的第k个结点也采用相似的方法。二叉树的遍历算法可以引申出大量的算法题，因此考生务必要熟练掌握二又树的遍历算法。&#xD;&#xA;*/&#xD;&#xA;int i=1;  //遍历序号的全局变量&#xD;&#xA;int PreNode(BiTree b,int k)&#xD;&#xA;{&#xD;&#xA;    if(b==NULL) //空结点，则返回特殊字符&#xD;&#xA;        return &amp;#39;#&amp;#39;; //相等，则当前结点即为第k个结点&#xD;&#xA;    if(i==k)&#xD;&#xA;        return b-&amp;gt;data;&#xD;&#xA;    i++; //下一个结点&#xD;&#xA;    ch = PreNode(b-&amp;gt;lchild,k); //左子树中递归寻找&#xD;&#xA;    if(ch !=&amp;#39;#&amp;#39;) //在左子树中，则返回该值&#xD;&#xA;        return ch;&#xD;&#xA;    ch = PreNode(b-&amp;gt;rchild,k); //在右子树中递归寻找&#xD;&#xA;    &#x9;return ch;&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;419-二叉树按二叉链表形式存储对于树中每个元素值为-x-的结点删去以它为根的子树并释放相应的空间&#34;&gt;4.1.9 二叉树按二叉链表形式存储，对于树中每个元素值为 x 的结点，删去以它为根的子树，并释放相应的空间。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xD;&#xA;删除以元素值x为根的子树，只要能删除其左、右子树，就可以释放值为x的根结点，因此宜采用后序遍历。&#xD;&#xA;算法思想：删除值为x的结点，意味着应将其父结点的左（右）子女指针置空，用层次遍历易于找到某结点的父结点。&#xD;&#xA;本题要求删除树中每个元素值为x的结点的子树，因此要遍历完整棵二叉树。&#xD;&#xA;*/&#xD;&#xA; void DeleteXTree(BiTree bt)   //删除以bt为根的子树&#xD;&#xA; {&#xD;&#xA;     if(bt){&#xD;&#xA;         DeleteTree(bt-&amp;gt;lchild);&#xD;&#xA;         DeleteTree(bt-&amp;gt;rchild); //删除bt的左子树、右子树&#xD;&#xA;         free(bt);  //释放被删结点所占的存储空间&#xD;&#xA;     }&#xD;&#xA; }&#xD;&#xA;&#xD;&#xA;//在二叉树上查找所有以x为元素值的结点，并删除以其为根的子树&#xD;&#xA;void Search(BiTree bt,int x)&#xD;&#xA;{&#xD;&#xA;    BiTree Q[]; //Q是存放二叉树结点指针的队列，容量足够大&#xD;&#xA;    if(bt){&#xD;&#xA;        if(bt-&amp;gt;data == x){  //若根结点值为x，则删除整棵树&#xD;&#xA;            DeleteXTree(p-&amp;gt;lchild);&#xD;&#xA;        &#x9;exit(0);    &#xD;&#xA;        }&#xD;&#xA;        Init Queue(Q);&#xD;&#xA;        EnQueue(Q,bt);&#xD;&#xA;        while(!IsEmpty(Q)){&#xD;&#xA;            DeQueue(Q,p);&#xD;&#xA;            if(p-&amp;gt;lchild) //若左子女非空&#xD;&#xA;                if(p-&amp;gt;lchild-&amp;gt;data == x){ //左子树符合则删除左子树&#xD;&#xA;                    DeleteXTree(p-&amp;gt;lchild);&#xD;&#xA;                    p-&amp;gt;lchild = NULL;&#xD;&#xA;                }  //父结点的左子女置空&#xD;&#xA;                else&#xD;&#xA;            &#x9;&#x9;EnQueue(Q,p-&amp;gt;lchild); //左子树入队列&#xD;&#xA;            if(p-&amp;gt;rchild) //若右子女非空&#xD;&#xA;                if(p-&amp;gt;rchild-&amp;gt;data ==x){ //右子女符合则删除右子树&#xD;&#xA;                    DeleteXTree(p-&amp;gt;rchild);&#xD;&#xA;                    p-&amp;gt;rchild = NULL; //父结点的右子女置空&#xD;&#xA;                }&#xD;&#xA;            &#x9;else&#xD;&#xA;                    EnQueue(Q,p-&amp;gt;rchild); //右子女入队列&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;4110-二叉树中查找值为-x-的结点打印值为-x-的结点的所有祖先假设值为x的结点不多于一个&#34;&gt;4.1.10 二叉树中查找值为 x 的结点，打印值为 x 的结点的所有祖先，假设值为x的结点不多于一个。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xD;&#xA;算法思想：采用非递归后序遍历，最后访问根结点，访问到值为x的结点时，栈中所有元素均为该结点的祖先，依次出栈打印即可。因为查找的过程就是后序遍历的过程，因此使用的栈的深度不超过树的深度。&#xD;&#xA;*/&#xD;&#xA;typedef struct{&#xD;&#xA;    BiTree t;&#xD;&#xA;    int tag; //tag=0表示左子女已被访问，tag=1表示右子女已被访问&#xD;&#xA;}stack;&#xD;&#xA;void Search(BiTree bt,int x)&#xD;&#xA;{&#xD;&#xA;    stack s[]; //栈容量足够大&#xD;&#xA;    top = 0;&#xD;&#xA;    while(bt!=NULL || top&amp;gt;0) &#xD;&#xA;    {&#xD;&#xA;        while(bt!=NULL &amp;amp;&amp;amp; bt-&amp;gt;data !=x) //结点入栈&#xD;&#xA;        {&#xD;&#xA;            s[++top].t = bt;&#xD;&#xA;            s[top].tag = 0;&#xD;&#xA;            bt = bt-&amp;gt;lchild; //沿左分支向下&#xD;&#xA;        }&#xD;&#xA;        if(bt-&amp;gt;data ==x)&#xD;&#xA;        {&#xD;&#xA;        &#x9;printf(&amp;#34;所查结点的所有祖先结点的值为:\n&amp;#34;); //找到x&#xD;&#xA;            for(i=1;i&amp;lt;=top;i++)&#xD;&#xA;                printf(&amp;#34;%d&amp;#34;,s[i].t-&amp;gt;data); //输出祖先值后结束&#xD;&#xA;            exit(1);&#xD;&#xA;        }&#xD;&#xA;        while(top!=0 &amp;amp;&amp;amp; s[top].tag==1)&#xD;&#xA;            top--;  //退栈（空遍历）&#xD;&#xA;        if(top!=0)&#xD;&#xA;        {&#xD;&#xA;            s[top].tag =1;&#xD;&#xA;            bt = s[top].t-&amp;gt;rchild;  //沿右分支向下遍历&#xD;&#xA;        }&#xD;&#xA;    }//while&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;4111-二叉树中-p-和-q分别为指向该二叉树中任意两个结点的指针试编写算法找到-p-和-q的最近公共祖先结点-r-&#34;&gt;4.1.11 二叉树中 p 和 q分别为指向该二叉树中任意两个结点的指针，试编写算法找到 p 和 q的最近公共祖先结点 r 。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xD;&#xA;后序遍历最后访问根结点，即在递归算法中，根是压在栈底的。&#xD;&#xA;本题要找p和q的最近公共祖先结点r，不失一般性，设p在q的左边。&#xD;&#xA;算法思想：采用后序非递归算法，栈中存放二又树结点的指针，当访问到某结点时，栈中所有元素均为该结点的祖先。后序遍历必然先遍历到结点p，栈中元素均为p的祖先。先将栈复制到另一辅助栈中。继续遍历到结点q时，将栈中元素从栈顶开始逐个到辅助栈中去匹配，第一个匹配（即相等）的元素就是结点p和q的最近公共祖先。&#xD;&#xA;*/&#xD;&#xA;typedef struct{&#xD;&#xA;    BiTree t;&#xD;&#xA;    int tag; //tag=0表示左子女已被访问，tag=1表示右子女已被访问&#xD;&#xA;}stack;&#xD;&#xA;stack s[],s1[]; //栈，容量足够大&#xD;&#xA;BiTree Ancester(BiTree ROOT,BiTNode *p,BiTNode *q){&#xD;&#xA;    top = 0;&#xD;&#xA;    bt = ROOT;&#xD;&#xA;    while(bt!=NULL &amp;amp;&amp;amp; bt!=p &amp;amp;&amp;amp; bt!=q){    //结点入栈&#xD;&#xA;        while(bt != NULL){&#xD;&#xA;            S[++top].t = bt;&#xD;&#xA;            s[top].tag = 0;&#xD;&#xA;            bt= bt-&amp;gt;lchild;&#xD;&#xA;        } //沿左分支向下&#xD;&#xA;        while(top!=0 &amp;amp;&amp;amp; s[top].tag ==1){&#xD;&#xA;            //假定p在q的左侧，遇到p时，栈中元素均为p的祖先&#xD;&#xA;            if(s[top].t ==p){&#xD;&#xA;                for(i=1;i&amp;lt;=top;i++){&#xD;&#xA;                    s1[i] = s[i];&#xD;&#xA;                    top1 = top;&#xD;&#xA;                }                    //将栈s的元素转入辅助栈s1保存&#xD;&#xA;                if(s[top].t ==q)     //找到q结点&#xD;&#xA;                    for(i=top;i&amp;gt;0;i--){  //将栈中元素的树结点到s1中去匹配&#xD;&#xA;                        for(j=top1;j&amp;gt;0;j--)&#xD;&#xA;                            if(s1[j].t == s[i].t)&#xD;&#xA;                                return s[i].t; //p和q的最近公共祖先已找到&#xD;&#xA;                    }&#xD;&#xA;                &#x9;top--;  //退栈&#xD;&#xA;            }//while&#xD;&#xA;            if(top!=0){&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;s[top].tag = 1;&#xD;&#xA;                bt = s[top].t-&amp;gt;rchild;&#xD;&#xA;            }       //沿右分支向下遍历&#xD;&#xA;        }//while&#xD;&#xA;    return NULL;   //p和q无公共祖先&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;4112-二叉树按二叉链表形式存储试求非空二叉树b的宽度-即具有结点数最多的那一层的结点个数&#34;&gt;4.1.12 二叉树按二叉链表形式存储，试求非空二叉树b的宽度 (即具有结点数最多的那一层的结点个数)。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xD;&#xA;采用层次遍历的方法求出所有结点的层次，并将所有结点和对应的层次放在一个队列中。然后通过扫描队列求出各层的结点总数，最大的层结点总数即为二又树的宽度。&#xD;&#xA;注意:本题队列中的结点，在出队后仍需要保留在队列中，以便求二又树的宽度，所以设置的队列采用非环形队列，否则在出队后可能被其他结点覆盖，无法再求二又树的宽度。&#xD;&#xA;*/&#xD;&#xA;typedef struct（&#xD;&#xA;    BiTree data[MaxSize];&#x9;//i保存队列中的结点指针&#xD;&#xA;    int level[MaxSize];&#x9;&#x9;//保存data中相同下标结点的层次&#xD;&#xA;    int front,rear;&#xD;&#xA;}Qu;&#xD;&#xA;&#xD;&#xA;int BTWidth(BiTree b){&#xD;&#xA;&#x9;BiTree p;&#xD;&#xA;&#x9;int k,max,i,n;&#xD;&#xA;&#x9;Qu.front=Qu.rear= -1;&#x9;&#x9;//队列为空&#xD;&#xA;&#x9;Qu.rear++;&#xD;&#xA;&#x9;Qu.data[Qu.rear]=b;&#x9;&#x9;&#x9;//根结点指针入队&#xD;&#xA;&#x9;Qu.level[Qu.rear]=1; &#x9;&#x9;//根结点层次为1&#xD;&#xA;&#x9;while(Qu.front&amp;lt;Qu.rear){&#xD;&#xA;&#x9;&#x9;Qu.front++;&#x9;&#x9;&#x9;&#x9;//出队&#xD;&#xA;&#x9;&#x9;p=Qu.data[Qu.front];&#x9;//出队结点&#xD;&#xA;&#x9;&#x9;k=Qu.level[Qu.front];&#x9;//出队结点的层次&#xD;&#xA;&#x9;if(p-&amp;gt;lchild！=NULL){&#x9;&#x9;//左孩子进队列&#xD;&#xA;&#x9;&#x9;Qu.rear++;&#xD;&#xA;&#x9;&#x9;Qu.data[Qu.rear]=p-&amp;gt;lchild;&#xD;&#xA;&#x9;&#x9;Qu.level[Qu.rear]=k+1;&#xD;&#xA;    }&#xD;&#xA;        &#xD;&#xA;&#x9;if(p-&amp;gt;rchild！=NULL){&#x9;&#x9;//右孩子进队列&#xD;&#xA;&#x9;&#x9;Qu.rear++;&#xD;&#xA;&#x9;&#x9;Qu.data [Qu.rear]=p-&amp;gt;rchild;&#xD;&#xA;&#x9;&#x9;Qu.level[Qu.rear]=k+1;&#xD;&#xA;&#x9;}&#xD;&#xA;}//while&#xD;&#xA;    max=0;i=0;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//max保存同一层最多的结点个数&#xD;&#xA;    k = 1; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//k表示从第一层开始查找&#xD;&#xA;    while(i&amp;lt;=Qu.rear){&#x9;&#x9;&#x9;    //i扫描队中所有元素&#xD;&#xA;        n=0;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//n统计第k层的结点个数&#xD;&#xA;        while(i&amp;lt;=Qu.rear&amp;amp;6Qu.level[i]==k){&#xD;&#xA;            n++;&#xD;&#xA;            i++;&#xD;&#xA;        }&#xD;&#xA;        k=Qu.level[i];&#xD;&#xA;        if(n&amp;gt;max) max=n;&#x9;&#x9;&#x9;//保存最大的n&#xD;&#xA;    }&#xD;&#xA;&#x9;return max;&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;4113-设有一棵满二叉树所有结点值均不同已知其先序序列为pre设计一个算法求其后序序列post&#34;&gt;4.1.13 设有一棵满二叉树(所有结点值均不同),已知其先序序列为pre,设计一个算法求其后序序列post.&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xD;&#xA;对一般二叉树，仅根据先序或后序序列，不能确定另一个遍历序列。但对满二叉树，任意一个结点的左、右子树均含有相等的结点数，同时，先序序列的第一个结点作为后序序列的最后一个结点，由此得到将先序序列pre[11..h1]转换为后序序列post[12..h2]的递归模型如下:&#xD;&#xA;f(pre,l1,h1,post,l2,h2) =不做任何事情           h1&amp;lt;l1时&#xD;&#xA;f(pre,l1,h1,post,l2,h2) = post[h2] = pre[11]  其他情况&#xD;&#xA;&#x9;取中间位置half=(h1-12)/2:&#xD;&#xA;&#x9;将pre[l1+1,l1+ha1f]左子树转换为post[l2,l2+half-1],&#xD;&#xA;&#x9;即f(pre,l1+1,l1+half,post,12,l2+half-1);&#xD;&#xA;&#x9;将pre[11+half+1，h1]右子树转换为post[12+half，h2-1]，&#xD;&#xA;&#x9;即f(pre,l1+half+1,h1,post,l2+half,h2-1)。&#xD;&#xA;其中,post[h2]=pre[l1]表示后序序列的最后一个结点(根结点)等于先序序列的第一个结点(根结点)。&#xD;&#xA;*/&#xD;&#xA;&#xD;&#xA;void PreToPost(int pre[],int l1,int h1,int post[]，int l2，int h2){&#xD;&#xA;&#x9;int half;&#xD;&#xA;&#x9;if(h1&amp;gt;=l1){&#xD;&#xA;&#x9;&#x9;post[h2]=pre[l1];&#xD;&#xA;&#x9;&#x9;half = (h1-l1)/2;&#xD;&#xA;&#x9;&#x9;PreroPost(pre,l1+1,l1+half,post,l2,l2+half-1);//转换左子树&#xD;&#xA;&#x9;&#x9;PreroPost(pre,l1+half+1,h1,post,l2+half,h2-1;//转换右子树&#xD;&#xA;     }&#xD;&#xA;}&#xD;&#xA;//测试&#xD;&#xA;char *pre=&amp;#34;ABCDEFG&amp;#34;;&#xD;&#xA;char post[MaxSize];&#xD;&#xA;PreToPost(pre,0,6,post,0,6);&#xD;&#xA;printf(&amp;#34;后序序列：&amp;#34;);&#xD;&#xA;for(int i=0;i&amp;lt;=6;i++)&#xD;&#xA;&#x9;printf(&amp;#34;%c&amp;#34;，post[i]);&#xD;&#xA;printf(&amp;#34;\n&amp;#34;);&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;4114-二叉树按二叉链表形式存储设计算法将二叉树的叶结点按从左到右的顺序连成一个单链表表头指针为head链接时用叶结点的右指针域来存放单链表指针&#34;&gt;4.1.14 二叉树按二叉链表形式存储，设计算法将二叉树的叶结点按从左到右的顺序连成一个单链表，表头指针为head，链接时用叶结点的右指针域来存放单链表指针。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xD;&#xA;算法思想:设置前驱结点指针pre，初始为空。第一个叶结点由指针head指向，遍历到叶结点时，就将它前驱的rchi1d指针指向它，最后一个叶结点的rchi1d为空。算法的时间复杂度为O(n),辅助变量使用head和pre，栈空间复杂度为O(n)。&#xD;&#xA;*/&#xD;&#xA;LinkedList head,pre=NULL;&#x9;&#x9;&#x9;&#x9;//全局变量&#xD;&#xA;LinkedList InOrder(BiTree bt){&#xD;&#xA;    if(bt){&#xD;&#xA;        Inorder(bt-&amp;gt;lchild);&#x9;&#x9;&#x9;//中序遍历左子树&#xD;&#xA;        if(bt-&amp;gt;lchild==NULL &amp;amp;&amp;amp; bt-&amp;gt;rchild==NULL)//叶结点&#xD;&#xA;            if(pre==NULL){&#xD;&#xA;                head=bt;&#xD;&#xA;                pre=bt;&#xD;&#xA;            } &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//处理第一个叶结点&#xD;&#xA;            else{&#xD;&#xA;                pre-&amp;gt;rchild=bt;&#xD;&#xA;                pre=bt;&#xD;&#xA;            }&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//将叶结点链入链表&#xD;&#xA;    Inorder(bt-&amp;gt;rchild);&#x9;&#x9;&#x9;&#x9;//中序遍历右子树&#xD;&#xA;    pre-&amp;gt;rchi1d=NULL;&#x9;&#x9;&#x9;&#x9;&#x9;//设置链表尾&#xD;&#xA;&#x9;return head;&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;4115-判断两棵二叉树是否相似的算法所谓二叉树t1和t2相似指的是t1和t2都是空的二叉树或都只有一个根节点或t1的左子树和t2的左子树是相似的且t1的右子树和t2的右子树是相似的&#34;&gt;4.1.15 判断两棵二叉树是否相似的算法，所谓二叉树T1和T2相似，指的是T1和T2都是空的二叉树或都只有一个根节点;或T1的左子树和T2的左子树是相似的，且T1的右子树和T2的右子树是相似的。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xD;&#xA;本题采用递归的思想求解，若T1和T2都是空树，则相似;若有一个为空另一个不空则必然不相似;否则递归地比较它们的左、右子树是否相似。递归函数的定义如下:&#xD;&#xA;1) 若T1=T2==NULL,则f(T1,T2) =1;&#xD;&#xA;2) 若T1和T2之一为NULL,另一个不为NULL,则f(T1,T2) =0;。&#xD;&#xA;3) 若T1和T2均不为NULL,则f(T1,T2) = f(T1-&amp;gt;1child,T2-&amp;gt;1child) &amp;amp;&amp;amp; f(T1-&amp;gt;rchild,T2-&amp;gt;rchild);&#xD;&#xA;*/&#xD;&#xA;int similar(BiTree T1,BiTree T2){&#xD;&#xA;&#x9;//采用递归的算法判断两个二叉树是否相似&#xD;&#xA;&#x9;int leftS,rightS;&#xD;&#xA;&#x9;if(T1==NULL &amp;amp;&amp;amp; T2==NULL)//两树皆空&#xD;&#xA;&#x9;&#x9;return 1;&#xD;&#xA;&#x9;else if(T1==NULL||T2==NULL）//只有一树为空&#xD;&#xA;&#x9;&#x9;return 0;&#xD;&#xA;&#x9;else{   &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//递归判断&#xD;&#xA;&#x9;&#x9;leftS = similar(T1-&amp;gt;lchild,T2-&amp;gt;lchild);&#xD;&#xA;&#x9;&#x9;rightS = similar(T1-&amp;gt;rchild,T2-&amp;gt;rchild);&#xD;&#xA;&#x9;&#x9;return leftS &amp;amp;&amp;amp; rightS;&#xD;&#xA;    }&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;4116-写出在中序线索二叉树里查找指定结点在后序的前驱结点的算法&#34;&gt;4.1.16 写出在中序线索二叉树里查找指定结点在后序的前驱结点的算法。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xD;&#xA;算法思想：在后序序列中，若结点p有右子女，则右子女是其前驱，若无右子女而有左子女，则左子女是其前驱。若结点p左、右子女均无，设其中序左线索指向某祖先结点f（p是f右子树中按中序遍历的第一个结点），若f有左子女，则其左子女是结点p在后序下的前驱;若f无左子女，则顺其前驱找双亲的双亲，一直找到双亲有左子女（这时左子女是p的前驱）。还有一种情况，若p是中序遍历的第一个结点，则结点p在中序和后序下均无前驱。&#xD;&#xA;*/&#xD;&#xA;BiThrTree InPostPre(BiThrTree t,BiThrTree p){&#xD;&#xA;    BiThrTree q;&#xD;&#xA;    if(p-&amp;gt;rtag == 0) //若p有右子女，则右子女是其后序前驱&#xD;&#xA;        q = p-&amp;gt;rchild;&#xD;&#xA;    else if(p-&amp;gt;ltag ==0) //若p只有左子女，左子女是其后序前驱&#xD;&#xA;        q = p-&amp;gt;lchild;&#xD;&#xA;    else if(p-&amp;gt;lchild ==NULL)&#xD;&#xA;        q = NULL;  //p是中序序列第一结点，无后序前驱&#xD;&#xA;    else //顺左线索向上找p的祖先，若存在，再找祖先的左子女&#xD;&#xA;    {&#xD;&#xA;        while(p-&amp;gt;ltag ==1 &amp;amp;&amp;amp; p-&amp;gt;lchild!=NULL)&#xD;&#xA;            p = p-&amp;gt;lchild;&#xD;&#xA;        if(p-&amp;gt;ltag ==0)&#xD;&#xA;            q = p-&amp;gt;lchild;  //p结点的祖先的左子女是其后序前驱&#xD;&#xA;        else&#xD;&#xA;            q = NULL;  //仅有单支树（p是叶子），已到根结点，p无后序前驱&#xD;&#xA;    }&#xD;&#xA;    return q;&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;421-二叉树按二叉链表形式存储设计求二叉树t的wpl的算法&#34;&gt;4.2.1 二叉树按二叉链表形式存储，设计求二叉树T的WPL的算法&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xD;&#xA;(1) 给出算法的基本设计思想&#xD;&#xA;(2) 给出二叉树结点的数据类型定义&#xD;&#xA;(3) C++语言描述算法,关键之处给出注释&#xD;&#xA;*/&#xD;&#xA;&#xD;&#xA;/*&#xD;&#xA;考查二叉树的带权路径长度，二叉树的带权路径长度为每个叶结点的深度与权值之积的总和，可以使用先序遍历解决问题。&#xD;&#xA;1）算法的基本设计思想。&#xD;&#xA;基于先序递归遍历的算法思想是用一个static变量记录wpl，把每个结点的深度作为递归函数的一个参数传递。&#xD;&#xA;算法步骤如下：&#xD;&#xA;① 若该结点是叶结点，则变量wpl加上该结点的深度与权值之积。&#xD;&#xA;② 若该结点是非叶结点，则左子树不为空时，对左子树调用递归算法，右子树不为空，对右子树调用递归算法，深度参数均为本结点的深度参数加1。&#xD;&#xA;③最后返回计算出的wpl即可。&#xD;&#xA;&#xD;&#xA;PS:当static关键字用于代码块内部的变量的声明时，用于修改变量的存储类型，即从自动变量修改为静态变量，但变量的链接属性和作用域不受影响。用这种方式声明的变量在程序执行之前创建，并在程序的整个执行期间一直存在，而不是每次在代码块开始执行时创建，在代码块执行完毕后销毁。也就是说，它保持局部变量内容的持久。静态局部变量的生存期虽然为整个源程序，但其作用域仍与局部变量相同，即只能在定义该变量的函数内使用该变量。退出该函数后，尽管该变量还继续存在，但不能使用它。&#xD;&#xA;*/&#xD;&#xA;// 二叉树结点的数据类型定义如下:&#xD;&#xA;typedef struct BiTNode{&#xD;&#xA;    int weight; &#xD;&#xA;    struct BiTNode *lchild,*rchild;&#xD;&#xA;}BiTNode,*BiTree;&#xD;&#xA;&#xD;&#xA;int WPL(BiTree root){&#xD;&#xA;&#x9;return wpl_PreOrder(root，0);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;int wpl_Preorder(BiTree root,int deep){&#xD;&#xA;&#x9;static int wpl=0;&#x9;&#x9;&#x9;&#x9;&#x9;//定义一个static变量存储wp1&#xD;&#xA;&#x9;if(root-&amp;gt;lchild==NULL &amp;amp;&amp;amp; root-&amp;gt;rchild==NULL)&#x9;//若为叶结点，累积wp1&#xD;&#xA;&#x9;&#x9;wpl += deep*root-&amp;gt;weight;&#xD;&#xA;    if(root-&amp;gt;lchild !=NULL)&#x9;&#x9;&#x9;&#x9;//若左子树不空，对左子树递归遍历&#xD;&#xA;        wp1_PreOrder(root-&amp;gt;1child,deep+1);&#xD;&#xA;     if(root-&amp;gt;rchild !=NULL)&#x9;//若右子树不空，对右子树递归遍历&#xD;&#xA;        wp1_PreOrder(root-&amp;gt;rchild,deep+1);&#xD;&#xA;    return wpl;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;422-将给定的表达式二叉树转换为等价的中缀表达式通过括号反映操作符的计算次序并输出&#34;&gt;4.2.2 将给定的表达式(二叉树)转换为等价的中缀表达式(通过括号反映操作符的计算次序)并输出。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xD;&#xA;题目给定条件：二叉树结点定义如下:&#xD;&#xA;typedef struct node{&#xD;&#xA;&#x9;char data[10];&#xD;&#xA;&#x9;struct node *left,*right;&#xD;&#xA;}&#xD;&#xA;(1) 给出算法的基本设计思想&#xD;&#xA;(2) C++语言描述算法,关键之处给出注释&#xD;&#xA;*/&#xD;&#xA;&#xD;&#xA;/*&#xD;&#xA;1)算法的基本设计思想:&#xD;&#xA;表达式树的中序序列加上必要的括号即为等价的中缀表达式。可以基于二叉树的中序遍历策略得到所需的表达式。&#xD;&#xA;表达式树中分支结点所对应的子表达式的计算次序，由该分支结点所处的位置决定。为得到正确的中缀表达式，需要在生成遍历序列的同时，在适当位置增加必要的括号。显然，表达式的最外层（对应根结点）和操作数（对应叶结点）不需要添加括号。&#xD;&#xA;2)算法实现:&#xD;&#xA;将二又树的中序遍历递归算法稍加改造即可得本题的答案。除根结点和叶结点外，遍历到其他结点时在遍历其左子树之前加上左括号，遍历完右子树后加上右括号。&#xD;&#xA;*/&#xD;&#xA;void BtreeToE(BTree *root){&#xD;&#xA;&#x9;BtreeToExp(root，1);  //根的高度为1&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;void BtreeToExp(BTree*root,int deep)&#xD;&#xA;{&#xD;&#xA;    if(root==NULL) return;   //空结点返回&#xD;&#xA;    else if(root-&amp;gt;left==NULL &amp;amp;&amp;amp; root-&amp;gt;right==NULL) //若为叶结点&#xD;&#xA;        printf(&amp;#34;%s&amp;#34;,root-&amp;gt;data);&#xD;&#xA;    else{&#xD;&#xA;        if(deep&amp;gt;1) printf(&amp;#34;(&amp;#34;);  //输出操作数，不加括号&#xD;&#xA;        BtreeToExp(root-&amp;gt;left,deep+1); //若有子表达式则加1层括号&#xD;&#xA;        printf(&amp;#34;%s&amp;#34;,root-&amp;gt;data);  //输出操作符&#xD;&#xA;        BtreeToExp(root-&amp;gt;right,deep+1);  &#xD;&#xA;        if(deep&amp;gt;1) printf(&amp;#34;)&amp;#34;);   //若有子表达式则加1层括号&#xD;&#xA;    }&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;431--编程以孩子兄弟表示法存储的森林的叶子结点数&#34;&gt;4.3.1  编程以孩子兄弟表示法存储的森林的叶子结点数&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xD;&#xA;当森林（树）以孩子兄弟表示法存储时，若结点没有孩(fch=nul1),则它必是叶子，总的叶子结点个数是孩子子树(fch)上的叶子数和兄弟子树(nsib)上的叶结点个数之和。&#xD;&#xA;*/&#xD;&#xA;&#xD;&#xA;typedef struct node&#xD;&#xA;{&#xD;&#xA;    int data;&#x9;&#x9;//数据域&#xD;&#xA;&#x9;int node *fch,*nsib;//孩子与兄弟域&#xD;&#xA;}*Tree;&#xD;&#xA;int Leaves(Tree t){  //计算以孩子兄弟表示法存储的森林的叶子数&#xD;&#xA;if(t==NULL)&#xD;&#xA;&#x9;return 0;&#x9; //树空返回0&#xD;&#xA;if(t-&amp;gt;fch==NULL) //若结点无孩子，则该结点必是叶子&#xD;&#xA;&#x9;return 1+Leaves(t-&amp;gt;nsib);//返回叶子结点和其兄弟子树中的叶子结点数&#xD;&#xA;else&#x9;&#x9;&#x9;//孩子子树和兄弟子树中叶子数之和&#xD;&#xA;    return Leaves(t-&amp;gt;fch)+Leaves(t-&amp;gt;nsib);&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;432-以孩子兄弟链表为存储结构请设计递归算法求树的深度&#34;&gt;4.3.2 以孩子兄弟链表为存储结构，请设计递归算法求树的深度&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xD;&#xA;由孩子兄弟链表表示的树，求高度的算法思想如下:采用递归算法，若树为空，高度为零;否则,高度为第一子女树高度加1和兄弟子树高度的大者。其非递归算法使用队列,逐层遍历树,取得树的高度。&#xD;&#xA;*/&#xD;&#xA;&#xD;&#xA;int Height(CSTree bt){&#xD;&#xA;&#x9;//递归求以孩子兄弟链表表示的树的深度&#xD;&#xA;&#x9;int hc,hs;&#xD;&#xA;&#x9;if(bt==NULL)&#xD;&#xA;&#x9;&#x9;return 0;&#xD;&#xA;&#x9;else{&#x9;//否则，高度取子女高度+1和兄弟子树高度的大者&#xD;&#xA;&#x9;&#x9;hc = height(bt-&amp;gt;firstchild);&#x9;//第一子女树高&#xD;&#xA;&#x9;&#x9;hs = height(bt-&amp;gt;nextsibling);&#x9;//兄弟树高&#xD;&#xA;    if(hc+1&amp;gt;hs)&#xD;&#xA;        return hc+1;&#xD;&#xA;    else&#xD;&#xA;        return hs;&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;433-已知一棵树的层次序列及每个结点的度编写算法构造此时的孩子-兄弟链接&#34;&gt;4.3.3 已知一棵树的层次序列及每个结点的度，编写算法构造此时的孩子-兄弟链接&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xD;&#xA;本题与树的层次序列有关。可设立一个辅助数组pointer[]存储新建树的各结点的地址，再根据层次序列与每个结点的度，逐个链接结点。&#xD;&#xA;*/&#xD;&#xA;&#xD;&#xA;#define maxNodes 15&#xD;&#xA;void createcSTree_Degree(Csfree&amp;amp;T,int e[],int degree[],int n){&#xD;&#xA;//根据树结点的层次序列e[]和各结点的度degree[]构造树的孩子-兄弟链表&#xD;&#xA;//参数n是树结点个数&#xD;&#xA;CSNode *pointer = new CSNode[maxNodes];//判断pointer[i]为空的语句未写&#xD;&#xA;int i，j，d，k=0;&#xD;&#xA;for(i=0;i&amp;lt;n;i++){&#x9;&#x9;//初始化&#xD;&#xA;&#x9;pointer[i]=new csNode;//判断pointer[i]为空的语句未写&#xD;&#xA;&#x9;pointer[i]-&amp;gt;data=e[i];&#xD;&#xA;&#x9;pointer[i]-&amp;gt;lchild=pointer[i]-&amp;gt;rsibling=NULL;&#xD;&#xA;}&#xD;&#xA;    &#xD;&#xA;for(i=0;i&amp;lt;n;i++){&#xD;&#xA;&#x9;d=degree[i];//结点i的度数&#xD;&#xA;&#x9;if(d){&#xD;&#xA;&#x9;&#x9;k++;//k为子女结点序号&#xD;&#xA;&#x9;&#x9;pointer[i]-&amp;gt;1child=pointer[k];//建立i与子女k间的链接&#xD;&#xA;&#x9;&#x9;for(j=2;j&amp;lt;=d;j++){&#xD;&#xA;&#x9;&#x9;&#x9;k++;&#xD;&#xA;&#x9;&#x9;&#x9;pointer[k-1]-&amp;gt;rsibling = pointer[k];&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#x9;T = pointer[0];&#xD;&#xA;&#x9;delete [] pointer;&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;441-判断给定的二叉树是否是二叉排序树&#34;&gt;4.4.1 判断给定的二叉树是否是二叉排序树&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xD;&#xA;对二叉排序树来说，其中序遍历序列为一个递增有序序列。因此，对给定的二叉树进行中序遍历，若始终能保持前一个值比后一个值小，则说明该二又树是一棵二又排序树。&#xD;&#xA;*/&#xD;&#xA;int predt=-32767;//predt为全局变量，保存当前结点中序前驱的值，初值为-无穷。&#xD;&#xA;int JudgeBST(BiTree bt){&#xD;&#xA;&#x9;int b1,b2;&#xD;&#xA;&#x9;if(bt==NULL)//空树&#xD;&#xA;    &#x9;return 1;&#xD;&#xA;&#x9;else{&#xD;&#xA;&#x9;&#x9;b1=JudgeBST(bt-&amp;gt;1child);//判断左子树是否是二又排序树&#xD;&#xA;&#x9;&#x9;if(b1==0 || predt&amp;gt;=bt-&amp;gt;data)//以若左子树返回值为0或前驱大于等于当前结点&#xD;&#xA;&#x9;&#x9;&#x9;return 0; //不是二叉排序树&#xD;&#xA;&#x9;&#x9;predt=bt-&amp;gt;data;//保存当前结点的关键字&#xD;&#xA;&#x9;&#x9;b2=JudgeBST(bt-&amp;gt;rchild);//判断右子树&#xD;&#xA;&#x9;&#x9;return b2;   //返回右子树的结果&#xD;&#xA;    }&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;442-设计一个算法求出指定结点在给定二叉排序树中的层次&#34;&gt;4.4.2 设计一个算法，求出指定结点在给定二叉排序树中的层次&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xD;&#xA;算法思想：设二又树采用二又链表存储结构。在二叉排序树中，查找一次就下降一层。因此，查找该结点所用的次数就是该结点在二又排序树中的层次。采用二叉排序树非递归查找算法，用n保存查找层次，每查找一次，n就加1，直到找到相应的结点。&#xD;&#xA;*/&#xD;&#xA;&#xD;&#xA;int level(BiTree bt,BSTNode *p){&#xD;&#xA;&#x9;//本算法计算给定结点在二叉排序树中的层次&#xD;&#xA;&#x9;int n=0;//统计查找次数&#xD;&#xA;&#x9;BiTree t=bt;&#xD;&#xA;&#x9;if(bt!=NULL){&#xD;&#xA;&#x9;&#x9;n++;&#xD;&#xA;&#x9;&#x9;while(t-&amp;gt;data!=p-&amp;gt;data){&#xD;&#xA;&#x9;&#x9;&#x9;if(t-&amp;gt;data &amp;lt; p-&amp;gt;data)//在左子树中查找&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;t = t-&amp;gt;lchild;&#xD;&#xA;&#x9;&#x9;&#x9;else &#x9;&#x9;&#x9;&#x9; //在右子树中查找&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;t = t-&amp;gt;rchild;&#xD;&#xA;&#x9;&#x9;&#x9;n++;//层次加1&#xD;&#xA;    &#x9;}&#xD;&#xA;    }&#xD;&#xA;    return n;&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;442-利用二叉树遍历的思想编写一个判断二叉树是否平衡二叉树的算法&#34;&gt;4.4.2 利用二叉树遍历的思想编写一个判断二叉树是否平衡二叉树的算法&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xD;&#xA;设置二叉树的平衡标记balance，标记返回二又树bt是否为平衡二叉树，若为平衡二叉树，&#xD;&#xA;则返回1，否则返回0：h为二又树bt的高度。采用后序遍历的递归算法：&#xD;&#xA;1）若bt为空，则高度为0，balance=1。&#xD;&#xA;2）若bt仅有根结点，则高度为1，balance=1。&#xD;&#xA;3）否则，对bt的左、右子树执行递归运算，返回左、右子树的高度和平衡标记，bt的高度&#xD;&#xA;为最高子树的高度加1。若左、右子树的高度差大于1，则balance=0;若左、右子树的&#xD;&#xA;高度差小于等于1，且左、右子树都平衡时，balance=1，否则balance=0。&#xD;&#xA;*/&#xD;&#xA;&#xD;&#xA;void Judge AVL（BiTree bt，int &amp;amp;balance，int sh）{&#xD;&#xA;//本算法判断一个给定的二叉树是否为平衡二叉树&#xD;&#xA;int b1=0，br=0，hl=0，hr=0;//左、右子树的平衡标记和高度&#xD;&#xA;if（bt==NULL）{//空树，高度为0&#xD;&#xA;h=0;&#xD;&#xA;balance=1;&#xD;&#xA;else if（bt-&amp;gt;1child==NULL&amp;amp;6bt-&amp;gt;xchild==NULL）{//仅有根结点，则高度为1&#xD;&#xA;h=1;&#xD;&#xA;balance=1;&#xD;&#xA;}&#xD;&#xA;Judge _AVL（bt-&amp;gt;1child，bl，h1）;//递归判断左子树&#xD;&#xA;Judge_AVL（bts&amp;gt;rchild，br，hr）;//递归判断右子树&#xD;&#xA;h=（h1&amp;gt;hr？hl:hr）+1;&#xD;&#xA;if（abs（hl-hr）&amp;lt;2）//若子树高度差的绝对值&amp;lt;2，则看左、右子树是否都平衡&#xD;&#xA;balance=bl&amp;amp;&amp;amp;br;//66为逻辑与，即左、右子树都平衡时，二叉树平衡&#xD;&#xA;else&#xD;&#xA;balance=0;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;443-设计一个算法求出给定二又排序树中最小和最大的关键字&#34;&gt;4.4.3 设计一个算法,求出给定二又排序树中最小和最大的关键字。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xD;&#xA;在一棵二又排序树中，最左下结点即为关键字最小的结点，最右下结点即为关键字最大的结点，本算法只要找出这两个结点即可，而不需要比较关键字。&#xD;&#xA;*/&#xD;&#xA;&#xD;&#xA;int MinKey(BSTNode *bt){&#xD;&#xA;    //求出二叉排序树中最小关键字结点&#xD;&#xA;    while(bt-&amp;gt;lchild != NULL)&#xD;&#xA;        bt=bt-&amp;gt;lchild;&#xD;&#xA;    return bt-&amp;gt;data;&#xD;&#xA;}&#xD;&#xA;          &#xD;&#xA;int MaxKey(BSTNode *bt){&#xD;&#xA;    //求出二叉排序树中最大关键字结点&#xD;&#xA;    while(bt-&amp;gt;rchild != NULL)&#xD;&#xA;    &#x9;bt = bt-&amp;gt;rchild;&#xD;&#xA;    return bt-&amp;gt;data;&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;444-设计一个算法从小到大输出二叉排序树中所有值小于-k-的关键字&#34;&gt;4.4.4 设计一个算法,从小到大输出二叉排序树中所有值小于 k 的关键字&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xD;&#xA;由二叉排序树的性质可知，右子树中所有的结点值均大于根结点值，左子树中所有的结点值均小于根结点值。为了从大到小输出，先遍历右子树，再访问根结点，后遍历左子树。&#xD;&#xA;*/&#xD;&#xA;&#xD;&#xA;void OutPut(BSTNode *bt, int k)&#xD;&#xA;{&#xD;&#xA;    //本算法从大到小输出二叉排序树中所有值不小于k的关键字&#xD;&#xA;    if(bt==NULL)&#xD;&#xA;    &#x9;return;&#xD;&#xA;    if(bt-&amp;gt;rchild != NULL)&#xD;&#xA;    &#x9;OutPut(bt-&amp;gt;rchild,k);&#x9;//递归输出右子树结点&#xD;&#xA;    if(bt-&amp;gt;data &amp;gt;= k)&#xD;&#xA;    &#x9;printf(&amp;#34;%d&amp;#34;,bt-&amp;gt;data);&#x9;//只输出大于等于k的结点值&#xD;&#xA;    if(bt-&amp;gt;lchild !=NULL)&#xD;&#xA;    &#x9;OutPut(bt-&amp;gt;lchild,k);//递归输出左子树的结点&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;445-编写一个递归算法在一棵有n个结点的随机建立起来的二又排序树上查找第k-1kn-小的元素并返回指向该结点的指针要求算法的平均时间复杂度为olog2n二又排序树的每个结点中除datalchildrchild等数据成员外增加一个count成员保存以该结点为根的子树上的结点个数&#34;&gt;4.4.5 编写一个递归算法，在一棵有n个结点的、随机建立起来的二又排序树上查找第k (1&amp;lt;k&amp;lt;n) 小的元素，并返回指向该结点的指针。要求算法的平均时间复杂度为O(log2n)，二又排序树的每个结点中除data、lchild、rchild等数据成员外，增加一个count成员，保存以该结点为根的子树上的结点个数。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xD;&#xA;在以t为根的子树上寻找第k小的元素，返回其所在结点的指针。k从11开始计算,在树结点中增加一个count数据成员，存储以该结点为根的子树的结点个数。&#xD;&#xA;最大查找长度取决于树的高度。由于二叉排序树是随机生成的，其高度应是O(log2n),时间复杂度为O(log2n)。&#xD;&#xA;*/&#xD;&#xA;BSTNode *Search_Small(BSTNode*t,int k){&#xD;&#xA;    if(k&amp;lt;1 || k&amp;gt;t-&amp;gt;count) return NULL;&#xD;&#xA;    if(t-&amp;gt;lchild==NULL){&#xD;&#xA;        if(k==1) return;&#xD;&#xA;        else return Search_Small(t-&amp;gt;rchild,k-1);&#xD;&#xA;    }&#xD;&#xA;    else{&#xD;&#xA;        if(t-&amp;gt;lchild-&amp;gt;count == k-1) &#xD;&#xA;            return t;&#xD;&#xA;        if(t-&amp;gt;lchild-&amp;gt;count &amp;gt; k-1) &#xD;&#xA;            return Search_Small(t-&amp;gt;lchild,k);&#xD;&#xA;        if(t-&amp;gt;lchild-&amp;gt;count &amp;lt; k-1)&#xD;&#xA;        &#x9;return Search_Small(t-&amp;gt;rchild,k-(t-&amp;gt;lchild-&amp;gt;count+1));&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;511-写出从图的邻接表表示转换成邻接矩阵表示的算法&#34;&gt;5.1.1 写出从图的邻接表表示转换成邻接矩阵表示的算法&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xD;&#xA;算法的基本思想：设图的顶点分别存储在数组v[n]中。首先初始化邻接矩阵。遍历邻接表，在依次遍历顶点v[i]的边链表时，修改邻接矩阵的第i行的元素值。若链表边结点的值为，则置arcs[i][j]=1。遍历完邻接表时，整个转换过程结束。此算法对于无向图、有向图均适用。&#xD;&#xA;*/&#xD;&#xA;&#xD;&#xA;void Convert（ALGraph &amp;amp;G，int arcs[M][N]）{&#xD;&#xA;    //此算法将邻接表方式表示的图G转换为邻接矩阵arcs&#xD;&#xA;    for(i=0; i&amp;lt;n; i++){&#x9;&#x9;//依次遍历各顶点表结点为头的边链表&#xD;&#xA;    &#x9;p =(G-&amp;gt;v[i]).firstarc;&#x9;//取出顶点i的第一条出边&#xD;&#xA;    &#x9;while(p!=NULL){&#x9;&#x9;&#x9;//遍历边链表&#xD;&#xA;            arcs[i][p-&amp;gt;data]=1;&#xD;&#xA;            p=p-&amp;gt;nextarc;&#x9;&#x9;//取下一条出边&#xD;&#xA;&#x9;}&#xD;&#xA;  }&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;521-写出从图的邻接表表示转换成邻接矩阵表示的算法&#34;&gt;5.2.1 写出从图的邻接表表示转换成邻接矩阵表示的算法&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xD;&#xA;算法的基本思想：设图的顶点分别存储在数组v[n]中。首先初始化邻接矩阵。遍历邻接表，在依次遍历顶点v[i]的边链表时，修改邻接矩阵的第i行的元素值。若链表边结点的值为，则置arcs[i][j]=1。遍历完邻接表时，整个转换过程结束。此算法对于无向图、有向图均适用。&#xD;&#xA;*/&#xD;&#xA;&#xD;&#xA;void Convert(ALGraph &amp;amp;G,int arcs[M][N]){&#xD;&#xA;    //此算法将邻接表方式表示的图G转换为邻接矩阵arcs&#xD;&#xA;    for(i=0; i&amp;lt;n; i++){&#x9;&#x9;//依次遍历各顶点表结点为头的边链表&#xD;&#xA;    &#x9;p =(G-&amp;gt;v[i]).firstarc;&#x9;//取出顶点i的第一条出边&#xD;&#xA;    &#x9;while(p!=NULL){&#x9;&#x9;&#x9;//遍历边链表&#xD;&#xA;            arcs[i][p-&amp;gt;data]=1;&#xD;&#xA;            p=p-&amp;gt;nextarc;&#x9;&#x9;//取下一条出边&#xD;&#xA;&#x9;}&#xD;&#xA;  }&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;521-试设计一个算法判断一个无向图g是否为一棵树若是一棵树则算法返回true否则返回false&#34;&gt;5.2.1 试设计一个算法，判断一个无向图G是否为一棵树。若是一棵树，则算法返回true，否则返回false。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xD;&#xA;一个无向图G是一棵树的条件是，G必须是无回路的连通图或有n-1条边的连通图。这里采用后者作为判断条件。对连通的判定，可用能否遍历全部顶点来实现。可以采用深度优先搜索算法在遍历图的过程中统计可能访问到的顶点个数和边的条数，若一次遍历就能访问到n个顶点和n-1条边，则可断定此图是一棵树。&#xD;&#xA;*/&#xD;&#xA;&#xD;&#xA;bool isTree(Graph&amp;amp; G){&#xD;&#xA;for(i=1;i&amp;lt;=G.vexnum;i++)&#xD;&#xA;&#x9;visited[i]=FALSE;&#x9;&#x9; //访问标记visited[]初始化&#xD;&#xA;int Vnum=0,Enum=0;&#x9;&#x9;&#x9; //记录顶点数和边数&#xD;&#xA;DFS(G,1,Vnum,Enum,visited);&#xD;&#xA;if(Vnum==G.vexnum &amp;amp;&amp;amp; Enum==2*(G.vexnum-1))&#xD;&#xA;&#x9;return true;&#x9;&#x9;&#x9; //符合树的条件&#xD;&#xA;else&#xD;&#xA;&#x9;return false;&#x9;&#x9;&#x9; //不符合树的条件&#xD;&#xA;void DFS(Graph&amp;amp; G,int v,int&amp;amp; Vnum,int&amp;amp; Enum,int visited[]){&#xD;&#xA;&#x9;//深度优先遍历图G，统计访问过的顶点数和边数，通过Vnum和Enum返回&#xD;&#xA;&#x9;visited[v]=TRUE;&#xD;&#xA;    Vnum++;&#x9;&#x9;&#x9;&#x9;&#x9; //作访问标记，顶点计数&#xD;&#xA;    int w=FirstNeighbor(G,v);//取v的第一个邻接顶点&#xD;&#xA;&#x9;while(w !=-1){&#x9;&#x9;&#x9; //当邻接顶点存在&#xD;&#xA;        Enum++;&#x9;&#x9;&#x9;&#x9; //边存在，边计数&#xD;&#xA;        if(!visited[w])  &#x9;//当该邻接顶点未访问过&#xD;&#xA;        &#x9;DFS(G,w,Vnum,Enum,visited);&#xD;&#xA;        w=NextNeighbor(G,v,w);&#xD;&#xA;    }&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;522-写出图的深度优先搜索dfs算法的非递归算法图采用邻接表形式--3&#34;&gt;5.2.2 写出图的深度优先搜索DFS算法的非递归算法（图采用邻接表形式）。  3&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xD;&#xA;在深度优先搜索的非递归算法中使用了一个栈s来记忆下一步可能访问的顶点，同时使用了一个访问标记数组visited[i]来记忆第i个顶点是否在栈内或曾经在栈内，若是则它以后不能再进栈。图采用邻接表形式。&#xD;&#xA;注意:由于使用了栈，使得遍历的方式从右端到左端进行，不同于常规的从左端到右端，但仍然是深度优先遍历。&#xD;&#xA;*/&#xD;&#xA;&#xD;&#xA;void DFS_Non_RC(AGraph&amp;amp; G,int v){&#xD;&#xA;    //从顶点v开始进行深度优先搜索，一次遍历一个连通分量的所有顶点&#xD;&#xA;    int w;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;// 顶点序号&#xD;&#xA;&#x9;InitStack(S);&#x9;&#x9;&#x9;&#x9;&#x9;// 初始化栈s&#xD;&#xA;&#x9;for(i=0; i&amp;lt;G.vexnum; i++)&#xD;&#xA;    &#x9;visited[i]=FALSE;&#x9;&#x9;&#x9;//初始化visited&#xD;&#xA;    Push(S,v); visited[v]=TRUE;     // v入栈并置Qisited[v]&#xD;&#xA;    while(!IsEmpty(S)){&#xD;&#xA;    &#x9;k=Pop(S);&#x9;&#x9;&#x9;&#x9;&#x9;// 栈中退出一个顶点&#xD;&#xA;   &#x9;&#x9;visit(k);&#x9;&#x9;&#x9;&#x9;&#x9;// 先饰问，再将其子结点入栈&#xD;&#xA;    &#x9;for(w=FirstNeighbor(G,k); w&amp;gt;=0; w=NextNeighor(G,k,w))&#xD;&#xA;            &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;// k所有邻接点&#xD;&#xA;            if(!visited[w]){&#x9;&#x9;// 未进过栈的顶点进栈&#xD;&#xA;            &#x9;Push(S,w);&#xD;&#xA;            &#x9;visited[w]=true;&#x9;// 作标记，以免再次入栈&#xD;&#xA;            }//if&#xD;&#xA;    }//while&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;523-分别采用基于深度优先遍历和广度优先遍历算法判别以邻接表方式存储的有向图中是否存在由顶点-vi-到顶点-vj-的路径-ij-注意算法中涉及的图的基本操作必须在此存储结构上实现&#34;&gt;5.2.3 分别采用基于深度优先遍历和广度优先遍历算法判别以邻接表方式存储的有向图中是否存在由顶点 vi 到顶点 vj 的路径 (i≠j) 。注意，算法中涉及的图的基本操作必须在此存储结构上实现。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xD;&#xA;两个不同的遍历算法都采用从顶点v，出发，依次遍历图中每个顶点，直到搜索到顶点vj，若能够搜索到vj，则说明存在由顶点vi到顶点j的路径。&#xD;&#xA;*/&#xD;&#xA;&#xD;&#xA;//深度优先遍历算法的实现如下&#xD;&#xA;int visited[MAXSIZE]={0};&#x9;&#x9;&#x9;//访问标记数组&#xD;&#xA;int Exist_Path_DFS(ALGraph G,int i,int j){&#xD;&#xA;    &#xD;&#xA;    int p;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//顶点序号&#xD;&#xA;    if(i==j)&#xD;&#xA;        return 1;&#x9;&#x9;&#x9;&#x9;&#x9;//i就是j&#xD;&#xA;    else{&#xD;&#xA;        visited[i]=1;&#x9;&#x9;&#x9;&#x9;//置访问标记&#xD;&#xA;        for (p=FirstNeighbor(G,i);p&amp;gt;=0;p=NextNeighbor(G,i,p)){&#xD;&#xA;            k = p.adjvex;&#xD;&#xA;            if(!visited[p] &amp;amp;&amp;amp; Exist_Path_DFS(G,p,j))&#xD;&#xA;                return 1;&#xD;&#xA;           }//for&#xD;&#xA;        }//else &#xD;&#xA;     return 0;&#xD;&#xA;}&#xD;&#xA;               &#xD;&#xA;&#xD;&#xA;//广度优先遍历算法的实现如下&#xD;&#xA;int visited[MAXSI2E]={0};&#x9;&#x9;//访问标记数组&#xD;&#xA;int Exist_Path_BFS(ALGraph G,int i,int j){&#xD;&#xA;//广度优先判断有同图G中顶点vi到顶点vj是否有路径，是则返回1，否则返回0&#xD;&#xA;    InitQueue(Q);&#xD;&#xA;    EnQueue(Q,i);&#x9;&#x9;&#x9;&#x9;//顶点i入队&#xD;&#xA;    while(!isEmpty(Q)){&#x9;&#x9;&#x9;//非空循环&#xD;&#xA;        DeQueue(Q,u);&#x9;&#x9;&#x9;//队头顶点出队&#xD;&#xA;        visited[u]=1;&#x9;&#x9;&#x9;//置访问标记&#xD;&#xA;    for(p=FirstNeighbor(G,i);p;p=NextNeighbor(G,i,p)){&#xD;&#xA;                                //检查所有邻接点&#xD;&#xA;            k=p.adjvex;&#xD;&#xA;            if(k==j)&#x9;&#x9;&#x9;//若k==j，则查找成功&#xD;&#xA;                return 1;&#xD;&#xA;        if(!visited[k])&#x9;&#x9;&#x9;//否则，顶点k入队&#xD;&#xA;            EnQueue(Q,k);&#xD;&#xA;    &#x9;}//for&#xD;&#xA;    }//while&#xD;&#xA;    return 0;&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;524-假设图用邻接表表示设计一个算法输出从顶点-vi-到顶点vj-的所有简单路径&#34;&gt;5.2.4 假设图用邻接表表示，设计一个算法，输出从顶点 Vi 到顶点Vj 的所有简单路径。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xD;&#xA;本题采用基于递归的深度优先遍历算法，从结点u出发，递归深度优先遍历图中结点，若访问到结点v，则输出该搜索路径上的结点。为此，设置一个path数组来存放路径上的结点(初始为空)，d表示路径长度(初始为-1)。&#xD;&#xA;*/&#xD;&#xA;&#xD;&#xA;void FindPath(AGraph *G,int u,int v,int path[],int d){&#xD;&#xA;    int w,i;&#xD;&#xA;    ArcNode *p;&#xD;&#xA;    d++;   &#x9;&#x9;&#x9;&#x9; &#x9;//路径长度增1&#xD;&#xA;    path[d]=u;&#x9;&#x9;&#x9; &#x9;//将当前顶点添加到路径中&#xD;&#xA;    visited[u]=1; &#x9;&#x9; &#x9;//置已访问标记&#xD;&#xA;    if(u==V)&#x9;&#x9;&#x9;&#x9;//找到一条路径则输出&#xD;&#xA;    &#x9;print(path[]);&#x9;&#x9;//输出路径上的结点&#xD;&#xA;    p=G-&amp;gt;adjlist[u].firstarc;//p指向v的第一个相邻点&#xD;&#xA;    while(p!=NULL){&#xD;&#xA;        w=p-&amp;gt;adjvex;&#x9;&#x9;//若顶点w未访问，递归访问它&#xD;&#xA;    if(visited[w]==0)&#xD;&#xA;    &#x9;FindPath(G,w,V,path,d);&#xD;&#xA;    &#x9;p = p-&amp;gt;nextarc;&#x9;&#x9;//p指向v的下一个相邻点&#xD;&#xA;    }&#xD;&#xA;    visited[u] = 0;&#x9;&#x9;&#x9;//恢复环境，使该顶点可重新使用&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;611-写出折半查找的递归算法初始调用时low为1high为-stlength&#34;&gt;6.1.1 写出折半查找的递归算法。初始调用时，low为1，high为 ST.length。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xD;&#xA;算法的基本思想：根据查找的起始位置和终止位置，将查找序列一分为二，判断所查找的关键字在哪一部分，然后用新的序列的起始位置和终止位置递归求解。&#xD;&#xA;算法把规模为n的复杂问题经过多次递归调用转化为规模减半的子问题求解。时间复杂度为O(log2n),算法中用到了一个递归工作栈，其规模与递归深度有关，也是O(log2n)。&#xD;&#xA;*/&#xD;&#xA;typedef struct{&#x9;&#x9;//查找表的数据结构&#xD;&#xA;    int *elem;&#x9;&#x9;//存储空间基址，建表时按实际长度分配，0号留空&#xD;&#xA;    int length;&#x9;&#x9;//表的长度&#xD;&#xA;}SSTable;&#xD;&#xA;&#xD;&#xA;int BinSearchRec(SSTable ST,int key,int low,int high){&#xD;&#xA;&#x9;//在有序表中递归折半查找其关键字为key的元素，返回其在表中序号&#xD;&#xA;    if(low&amp;gt;high)&#xD;&#xA;    &#x9;return 0;&#xD;&#xA;    mid=(low+high)/2;&#x9;&#x9; &#x9;//取中间位置&#xD;&#xA;    if(key&amp;gt;ST.elem[mid])&#x9;&#x9;//向后半部分查找&#xD;&#xA;    &#x9;Search(ST,key,mid+1,high);&#xD;&#xA;    else if(key&amp;lt;ST.elem[mid])&#x9;//向前半部分查找&#xD;&#xA;    &#x9;Search(ST,key,low,mid-1);&#xD;&#xA;    else&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//查找成功&#xD;&#xA;   &#x9;&#x9;return mid;&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;612-线性表中各结点的检索概率不等时可用如下策略提高顺序检索的效率若找到指定的结点则将该结点和其前驱结点若存在交换使得经常被检索的结点尽量位于表的前端试设计在顺序结构和链式结构的线性表上实现上述策略的顺序检索算法&#34;&gt;6.1.2 线性表中各结点的检索概率不等时，可用如下策略提高顺序检索的效率：若找到指定的结点，则将该结点和其前驱结点（若存在）交换，使得经常被检索的结点尽量位于表的前端。试设计在顺序结构和链式结构的线性表上实现上述策略的顺序检索算法。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xD;&#xA;算法的基本思想：检索时可先从表头开始向后顺序扫描，若找到指定的结点，则将该结点和其前趋结点（若存在）交换。采用顺序表存储结构的算法实现如下:&#xD;&#xA;*/&#xD;&#xA;&#xD;&#xA;int SeqSrch(int R[],int k){&#xD;&#xA;&#x9;//顺序查找线性表，找到后和其前面的元素交换&#xD;&#xA;&#x9;int i=0;&#xD;&#xA;&#x9;while((R[i].key!=k) &amp;amp;&amp;amp;(i&amp;lt;n))&#xD;&#xA;        i++;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//从前向后顺序查找指定结点&#xD;&#xA;&#x9;&#x9;if(i&amp;lt;n &amp;amp;&amp;amp; i&amp;gt;0){&#x9;&#x9;&#x9;&#x9;//若找到，则交换&#xD;&#xA;&#x9;&#x9;&#x9;temp=R[i];&#xD;&#xA;            R[i]=R[i-1];&#xD;&#xA;            R[i-1]=temp;&#xD;&#xA;&#x9;&#x9;&#x9;return --i;&#x9;&#x9;&#x9;&#x9;//交换成功，返回交换后的位置&#xD;&#xA;&#x9;&#x9;else &#xD;&#xA;            return -1;&#x9;&#x9;  &#x9;   //交换失败&#xD;&#xA;}&#x9;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;711-试重新编写考点精析中的快速排序的划分算法使之每次选取的枢轴值都是随机地从当前子表中选择的&#34;&gt;7.1.1 试重新编写考点精析中的快速排序的划分算法，使之每次选取的枢轴值都是随机地从当前子表中选择的。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xD;&#xA;这类题目比较简单，为方便起见，可直接先随机地求出枢轴的下标，然后将枢轴值与A[low]交换，而后的思想就与前面的划分算法一样。&#xD;&#xA;*/&#xD;&#xA;&#xD;&#xA;int Partition2(int A[],int low,int high){&#xD;&#xA;&#x9;int rand_Index=low+rand() %(high-low+1);&#xD;&#xA;&#x9;Swap(A[rand Index],A[low]);//将枢轴值交换到第一个元素&#xD;&#xA;&#x9;int pivot=A[low];&#x9;&#x9;&#x9;//置当前表中的第一个元素为枢轴值&#xD;&#xA;&#x9;int i=low;&#x9;&#x9;&#x9;&#x9;&#x9;//使得表A[low…i]中的所有元素小于pivot，初始为空表&#xD;&#xA;for(int j=low+1;j&amp;lt;=high;j++)//从第毫个元素开始寻找小于基准的元素&#xD;&#xA;&#x9;if(A[j]&amp;lt;pivot)&#x9;&#x9;&#x9;&#x9;//找到后，交换到前面&#xD;&#xA;&#x9;&#x9;swap(A[++i],A[j]);&#xD;&#xA;&#x9;swap(A[i],A[low]);&#x9;&#x9;&#x9;//将基准元素插入到最终位置&#xD;&#xA;&#x9;return i;&#x9;&#x9;&#x9;&#x9;&#x9;//返回基准元素的位置&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;712-试编写一个算法使之能够在数组l1n中找出第-k-小的元素即从小到大排序后处于第k个位置的元素&#34;&gt;7.1.2 试编写一个算法，使之能够在数组L[1..n]中找出第 k 小的元素（即从小到大排序后处于第k个位置的元素）。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xD;&#xA;本题最直接的做法是用排序算法对数组先进行从小到大的排序，然后直接提取L(k)便得到了第k小元素，但其平均时间复杂度将达O(nlog2n)以上。此外，还可采用小顶堆的方法，每次堆顶元素都是最小值元素，时间复杂度为O(n+klog2n)。下面介绍一个更精彩的算法，它基于快速排序的划分操作。&#xD;&#xA;*/&#xD;&#xA;int kth_elem(int a[],int low,int high,ing k)&#xD;&#xA;{&#xD;&#xA;    int pivot = a[low];&#xD;&#xA;    int low temp=low;//由于下面会修改low与high，在递归时又要用到它们&#xD;&#xA;    int high_temp=high;&#xD;&#xA;    while(low&amp;lt;high){&#xD;&#xA;    &#x9;while(low&amp;lt;high &amp;amp;&amp;amp; a[high]&amp;gt;=pivot)&#xD;&#xA;    &#x9;&#x9;--high;&#xD;&#xA;        a[low] =a[high];&#xD;&#xA;        while(low&amp;lt;high &amp;amp;&amp;amp; a[low]&amp;lt;=pivot)&#xD;&#xA;            ++low;&#xD;&#xA;        a[high]=a[low];&#xD;&#xA;    }&#xD;&#xA;    a[low]=pivot;&#xD;&#xA;    //上面即为快速排序中的划分算法&#xD;&#xA;    //以下就是本算法思想中所述的内容&#xD;&#xA;    if(low==k)&#x9;&#x9;&#x9;//由于与k相同，直接返回pivot元素&#xD;&#xA;    &#x9;return a[low];&#xD;&#xA;    else if(low&amp;gt;k)&#x9;&#x9;//在前一部分表中递归寻找&#xD;&#xA;    &#x9;return kth_elem(a,low_temp,low-1,k);&#xD;&#xA;    else&#x9;&#x9;&#x9;&#x9;//在后一部分表中递归寻找&#xD;&#xA;    &#x9;return kth_elem(a,low+1,high_temp,k-low);&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;713-2016统考真题已知由nn2个正整数构成的集合aak-l-0kn将其划分为两个不相交的子集a1和a2元素个数分别是n1和n2a1和a中的元素之和分别为s1和s设计一个尽可能高效的划分算法满足n1-n2l最小且s1-s2最大要求6&#34;&gt;7.1.3 【2016统考真题】已知由n（n&amp;gt;2）个正整数构成的集合A={ak l 0&amp;lt;=k&amp;lt;n}，将其划分为两个不相交的子集A1和A2，元素个数分别是n1和n2，A1和A₂中的元素之和分别为S1和S₂。设计一个尽可能高效的划分算法，满足|n1-n2l最小且|S1-S2|最大。要求：6&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xD;&#xA;1）算法的基本设计思想&#xD;&#xA;由题意知，将最小的L[n/2]个元素放在A1中，其余的元素放在A2中，分组结果即可满足题目要求。仿照快速排序的思想，基于枢轴将n个整数划分为两个子集。根据划分后枢轴所处的位置i分别处理：&#xD;&#xA;① 若i = L[n/2]，则分组完成，算法结束。&#xD;&#xA;② 若i &amp;lt; L[n/2]，则枢轴及之前的所有元素均属于A1，继续对i之后的元素进行划分。&#xD;&#xA;③ 若i &amp;gt; L[n/2]，则枢轴及之后的所有元素均属于A2，继续对i之前的元素进行划分。基于该设计思想实现的算法，无须对全部元素进行全排序。其平均时间复杂度是O(n)，空间复杂度是O(1)。&#xD;&#xA;*/&#xD;&#xA;&#xD;&#xA;int setPartition(int a[],int n){&#xD;&#xA;&#x9;int pivotkey,low=0,low0=0,high=n-1,high0=n-1,flag=1,k=n/2,i;&#xD;&#xA;&#x9;int s1=0,s2=0;&#xD;&#xA;&#x9;while(flag){&#xD;&#xA;&#x9;&#x9;piovtkey = a[low];&#x9;&#x9;&#x9;&#x9;//选择枢轴&#xD;&#xA;&#x9;&#x9;while(low&amp;lt;high){&#x9;&#x9;&#x9;&#x9;//基于枢轴对数据进行划分&#xD;&#xA;&#x9;&#x9;while(low&amp;lt;high &amp;amp;&amp;amp; a[high]&amp;gt;=pivotkey)-high;&#xD;&#xA;&#x9;&#x9;if(low!=high) a[low]=a[high];&#xD;&#xA;&#x9;&#x9;while(low&amp;lt;high &amp;amp;&amp;amp; a[low]&amp;lt;=pivotkey)&#xD;&#xA;            ++low;&#xD;&#xA;&#x9;&#x9;if(low!=high)&#xD;&#xA;            a[high]=a[low];&#xD;&#xA;        }&#xD;&#xA;&#x9;&#x9;a[low]=pivotkey;&#xD;&#xA;&#x9;&#x9;if(low==k-1)//若枢轴是第n/2小元素，划分成功&#xD;&#xA;&#x9;&#x9;&#x9;flag=0;&#xD;&#xA;&#x9;&#x9;else{&#x9;//是否继续划分&#xD;&#xA;&#x9;&#x9;&#x9;if(low&amp;lt;k-1){&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;low0 = ++low;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;high = high0;&#xD;&#xA;           &#x9;}&#xD;&#xA;            else{&#xD;&#xA;                    high0 = --high;&#xD;&#xA;                    low=low0;&#xD;&#xA;                }&#xD;&#xA;      &#x9; }&#x9;&#xD;&#xA;    }&#xD;&#xA;        for(i=0;i&amp;lt;k;i++) s1 += a[i];&#xD;&#xA;        for(i=k;i&amp;lt;n;i++) s2 += a[i];&#xD;&#xA;&#x9;&#x9;return s2-s1;&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;714-荷兰国旗问题设有一个仅由红白蓝三种颜色的条块组成的条块序列请编写一个时间复杂度为on的算法使得这些条块按红白蓝的顺序排好即排成荷兰国旗图案&#34;&gt;7.1.4 荷兰国旗问题：设有一个仅由红、白、蓝三种颜色的条块组成的条块序列，请编写一个时间复杂度为O（n）的算法，使得这些条块按红、白、蓝的顺序排好，即排成荷兰国旗图案。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xD;&#xA;算法思想：顺序扫描线性表，将红色条块交换到线性表的最前面，蓝色条块交换到线性表的最后面。为此，设立三个指针，其中，j为工作指针，表示当前扫描的元素，i以前的元素全部为红色，k以后的元素全部为蓝色。根据所指示元素的颜色，决定将其交换到序列的前部或尾部。&#xD;&#xA;初始时i=0，k=n-1，算法的实现如下。&#xD;&#xA;*/&#xD;&#xA;&#xD;&#xA;typedef enum(RED,WHITE,BLUE}&#x9;color;&#x9;//设置枚举数组&#xD;&#xA;void Flag_Arrange(color a[],int n){&#xD;&#xA;&#x9;int i=0,j=0,k=n-1;&#xD;&#xA;    while(j&amp;lt;=k)&#xD;&#xA;&#x9;switch(a[j]){&#x9;&#x9;&#x9;&#x9;//判断条块的颜色&#xD;&#xA;        case RED:Swap(a[i],a[j]);i++; j++; break;&#xD;&#xA;&#x9;&#x9;//红色，则和i交换&#xD;&#xA;        case WHITE:j++;break;&#xD;&#xA;        case BLUE:Swap(a[j],a[k]);&#x9;k--;&#xD;&#xA;&#x9;&#x9;//蓝色，则和k交换&#xD;&#xA;&#x9;&#x9;//这里没有j++语句以防止交换后a[j]仍为蓝色的情况&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;721-编写双向冒泡排序算法在正反两个方向交替进行扫描即第一趟把关键字最大的元素放在序列的最后面第二趟把关键字最小的元素放在序列的最前面如此反复进行&#34;&gt;7.2.1 编写双向冒泡排序算法，在正反两个方向交替进行扫描，即第一趟把关键字最大的元素放在序列的最后面，第二趟把关键字最小的元素放在序列的最前面，如此反复进行。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xD;&#xA;这种排序方法又称双向起泡。奇数趟时，从前向后比较相邻元素的关键字，遇到逆序即交换，直到把序列中关键字最大的元素移动到序列尾部偶数趟时，从后往前比较相邻元素的关键字，遇到逆序即交换，直到把序列中关键字最小的元素移动到序列前端。程序代码如下：&#xD;&#xA;*/&#xD;&#xA;&#xD;&#xA;void BubbleSort(int A,int n){&#xD;&#xA;//双向起泡排序，交替进行正反两个方向的起泡过程&#xD;&#xA;    int low = 0,high = n-1;&#xD;&#xA;    bool flag = true;//一趟冒泡后记录元素是否交换标志&#xD;&#xA;    while(low&amp;lt;high &amp;amp;&amp;amp; flag){//循环跳出条件，当flag为false 说明已没有逆序&#xD;&#xA;    &#x9;flag=false;//每趟初始置flag为false&#xD;&#xA;    for(i=low;i&amp;lt;high;i++)//从前向后起泡&#xD;&#xA;    &#x9;if(a[i]&amp;gt;a[i+1]){&#x9;//发生逆序&#xD;&#xA;    &#x9;&#x9;swap(a[i],a[i+1]);//交换&#xD;&#xA;    &#x9;&#x9;flag=true;&#x9;//置flag&#xD;&#xA;   &#x9;&#x9; }&#xD;&#xA;    high--;&#x9;&#x9;&#x9;&#x9;//更新上界&#xD;&#xA;    for(i=high;i&amp;gt;low;i--)//从后往前起泡&#xD;&#xA;        if(a[i]&amp;lt;a[i-1]){&#x9;//发生逆序&#xD;&#xA;            swap(a[i],a[i-1]);&#x9;//交换&#xD;&#xA;            flag=true;&#x9;&#x9;   //置flag&#xD;&#xA;        }&#xD;&#xA;    low++;&#x9;&#x9;&#x9;&#x9;   &#x9;   //修改下界&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;722已知线性表按顺序存储且每个元素都是不相同的整数型元素设计把所有奇数移动到所有偶数前边的算法要求时间最少辅助空间最少&#34;&gt;7.2.2已知线性表按顺序存储，且每个元素都是不相同的整数型元素，设计把所有奇数移动到所有偶数前边的算法（要求时间最少，辅助空间最少）。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xD;&#xA;本题可采用基于快速排序的划分思想来设计算法，只需遍历一次即可，其时间复杂度为O(n)，空间复杂度为O(1)。假设表为L[1..n]，基本思想是：先从前向后找到一个偶数元素L(i)，再从后向前找到一个奇数元素L(j),将二者交换;重复上述过程直到i大于。&#xD;&#xA;*/&#xD;&#xA;&#xD;&#xA;void move(int A[],int len){&#xD;&#xA;&#x9;//对表A按奇偶进行一趟划分&#xD;&#xA;&#x9;int i=0,j=len-1;//i表示左端偶数元素的下标;j表示右端奇数元素的下标&#xD;&#xA;&#x9;while(i&amp;lt;j){&#xD;&#xA;&#x9;&#x9;while(i&amp;lt;j &amp;amp;&amp;amp; A[i]%2!=0) i++;//从前向后找到一个偶数元素&#xD;&#xA;&#x9;&#x9;while(i&amp;lt;j &amp;amp;&amp;amp; A[j]%2!=1)&#x9;j--;//从后向前找到一个奇数元素&#xD;&#xA;&#x9;&#x9;if(i&amp;lt;j){&#xD;&#xA;&#x9;&#x9;&#x9;Swap(A[i],A[j]);//交换这两个元素.&#xD;&#xA;&#x9;&#x9;&#x9;i++;&#xD;&#xA;            j--;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;731-编写一个算法在基于单链表表示的待排序关键字序列上进行简单选择排序&#34;&gt;7.3.1 编写一个算法，在基于单链表表示的待排序关键字序列上进行简单选择排序。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xD;&#xA;算法的思想是：每趟在原始链表中摘下关键字最大的结点，把它插入到结果链表的最前端。&#xD;&#xA;由于在原始链表中摘下的关键字越来越小，在结果链表前端插入的关键字也越来越小，因此最后形成的结果链表中的结点将按关键字非递减的顺序有序链接。&#xD;&#xA;假设单链表不带表头结点。&#xD;&#xA;*/&#xD;&#xA;&#xD;&#xA;void selectSort(LinkedList&amp;amp; L) {&#xD;&#xA;&#x9;//对不带表头结点的单链表工执行简单选择排序&#xD;&#xA;&#x9;LinkNode *h=L,*p,*q,*r,*s;&#xD;&#xA;&#x9;L=NULL;&#xD;&#xA;&#x9;while(h!=NULL){&#x9;&#x9;//持续扫描原链表&#xD;&#xA;&#x9;&#x9;p = s = h;&#xD;&#xA;        q = r = NULL;&#xD;&#xA;&#x9;&#x9;//指针s和r记忆最大结点和其前驱;p为工作指针，q为其前驱&#xD;&#xA;&#x9;&#x9;while(p !=NULL){&#x9;//扫描原链表寻找最大结点s&#xD;&#xA;&#x9;&#x9;if(p-&amp;gt;data&amp;gt;s-&amp;gt;data){ &#xD;&#xA;            s = p; &#xD;&#xA;            r = q;&#xD;&#xA;        }&#x9;&#x9;&#x9;&#x9;&#x9;//找到更大的，记忆它和它的前驱&#xD;&#xA;&#x9;&#x9;q = p;&#xD;&#xA;        p = p-&amp;gt;1ink; &#x9;&#x9;//继续寻找&#xD;&#xA;&#x9;}&#x9;&#xD;&#xA;&#x9;if(s==h)&#xD;&#xA;&#x9;&#x9;h = h-&amp;gt;1ink; &#x9;&#x9;//最大结点在原链表前端&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;r-&amp;gt;1ink = s-&amp;gt;1ink;&#x9;//最大结点在原链表表内&#xD;&#xA;&#x9;s-&amp;gt;1ink=L;&#xD;&#xA;    L=s;&#x9;&#x9;&#x9;&#x9;&#x9;//结点s插入到结果链前端&#xD;&#xA;    }&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;741-试设计一个算法判断一个数据序列是否构成一个小根堆&#34;&gt;7.4.1 试设计一个算法，判断一个数据序列是否构成一个小根堆。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xD;&#xA;将顺序表L[1..n]视为一个完全二叉树，扫描所有分支结点，遇到孩子结点的关键字小于根结点的关键字时返回false,扫描完后返回true。&#xD;&#xA;*/&#xD;&#xA;&#xD;&#xA;bool IsMinHeap(int A[]，int len){&#xD;&#xA;    if(len%2 == 0）{&#x9;&#x9;&#x9;//len为偶数，有一个单分支结点&#xD;&#xA;    &#x9;if(A[len/2]&amp;gt;A[len])&#x9;&#x9;&#x9;//判断单分支结点&#xD;&#xA;    &#x9;&#x9;return false;&#xD;&#xA;    for(i=len/2-1; i&amp;gt;=1; i--)&#x9;//判断所有双分支结点&#xD;&#xA;    &#x9;if(A[i]&amp;gt;A[2*i] || A[i]&amp;gt;A[2*i+1])&#xD;&#xA;    &#x9;&#x9;return false;&#xD;&#xA;    else{&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//1en为奇数时，没有单分支结点&#xD;&#xA;    &#x9;for(i=len/2; i&amp;gt;=1; i--)&#x9;&#x9;//判断所有双分支结点&#xD;&#xA;    &#x9;&#x9;if(A[i]&amp;gt;A[2*i] || A[i]&amp;gt;A[2*i+1])&#xD;&#xA;    &#x9;&#x9;&#x9;return false;&#xD;&#xA;    }&#xD;&#xA;    return true;&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;751-设顺序表用数组a表示表中元素存储在数组下标1mn的范围内前m个元素递增有序后n个元素递增有序设计一个算法使得整个顺序表有序&#34;&gt;7.5.1 设顺序表用数组A[]表示，表中元素存储在数组下标1~m+n的范围内，前m个元素递增有序，后n个元素递增有序，设计一个算法，使得整个顺序表有序。&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xD;&#xA;(1) 给出算法的基本设计思想&#xD;&#xA;(2) 根据设计思想，采用C/C++描述算法，关键之处给出注释。&#xD;&#xA;(3) 说明你所设计算法的时间复杂度与空间复杂度。&#xD;&#xA;*/&#xD;&#xA;&#xD;&#xA;/*&#xD;&#xA;算法的基本设计思想如下：将数组A[1..m+n]视为一个已经过m趟插入排序的表，则从m+l趟开始，将后n个元素依次插入前面的有序表中。&#xD;&#xA;时间复杂度由m和n共同决定，从上面的算法不难看出，在最坏情况下元素的比较次数为O(mn),而元素移动的次数为O(mn),所以时间复杂度为O(mn),由于算法只用到了常数个辅助空间，所以空间复杂度为O(1)。&#xD;&#xA;*/&#xD;&#xA;&#xD;&#xA;void Insert_Sort(int A[],int m,int n){&#xD;&#xA;    int i,j;&#xD;&#xA;    for(i = m+1;i&amp;lt;=m+n;i++）{&#x9;//依次将A[m+1.m+n]插入有序表&#xD;&#xA;        A[0]=A[i];&#x9;&#x9;&#x9;&#x9;&#x9;// 复制为哨兵&#xD;&#xA;        for(j=i-1;A[j]&amp;gt;A[0];j--) &#x9;// 从后往前插入&#xD;&#xA;            A[j+1] = A[j];&#x9;&#x9;&#x9;// 元素后移&#xD;&#xA;        A[j+1] = A[0];&#x9;&#x9;&#x9;    // 插入&#xD;&#xA;    }&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://maurice-xx.github.io/posts/%E7%AE%80%E7%AD%94/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://maurice-xx.github.io/posts/%E7%AE%80%E7%AD%94/</guid>
      <description>&lt;h1 id=&#34;简答&#34;&gt;简答&lt;/h1&gt;&#xA;&lt;h2 id=&#34;1绪论&#34;&gt;1.绪论&lt;/h2&gt;&#xA;&lt;h5 id=&#34;1数据的逻辑结构存储结构和运算之间的关系&#34;&gt;1.数据的逻辑结构、存储结构和运算之间的关系&lt;/h5&gt;&#xA;&lt;p&gt;1.逻辑结构为人们想象并且描述出来的数据元素与数据元素之间的关系。&lt;/p&gt;&#xA;&lt;p&gt;2.存储结构则是这种逻辑关系在计算机上的具体实现。所以一种逻辑关系对应了多种存储结构。&lt;/p&gt;&#xA;&lt;p&gt;3.一种逻辑关系对应一种存储结构在数据运算方面也不一样&lt;/p&gt;&#xA;&lt;h5 id=&#34;2线性表的特点&#34;&gt;2.线性表的特点：&lt;/h5&gt;&#xA;&lt;p&gt;一对一 除第一个元素外，每个元素有且仅有一个直接 前驱； 除最后一个元素外，每个元素有且仅有一个直 接后继 线性结构和非线性结构的区别。&lt;/p&gt;&#xA;&lt;h5 id=&#34;3线性结构和非线性结构的区别&#34;&gt;3.线性结构和非线性结构的区别？&lt;/h5&gt;&#xA;&lt;p&gt;线性结构（一对一、除了头尾，只有一个前驱和后继）： 线性表、栈、队列、串、数组&lt;/p&gt;&#xA;&lt;p&gt;非线性结构：一个结点元素可能有多个直接前驱和多个直 接后继 树、图&lt;/p&gt;&#xA;&lt;h5 id=&#34;4为什么在单循环链表中设置尾指针比设置头指针更好&#34;&gt;4.为什么在单循环链表中设置尾指针比设置头指针更好?&lt;/h5&gt;&#xA;&lt;p&gt;答:用尾指针来表示单循环链表可以使得查找链表的第一个数据节点和终端结点都很方便， 其尾指针为 rear, 则第一个数据节点和终端结点的位置分别是 rear-&amp;gt;next-&amp;gt;next 和 rear, 查找时间都 0(1)。 若无尾指针，则查找终端结点的时间为 0(n)。&lt;/p&gt;&#xA;&lt;h5 id=&#34;5头结点不带头结点的代码区别&#34;&gt;5.头结点、不带头结点的代码区别&lt;/h5&gt;&#xA;&lt;p&gt;对带头结点的链表，在表的任何结点之前插入结点或删除表 中任何结点，所要做的都是修改前一结点的指针域，因为任 何元素结点都有前驱结点。 若链表没有头结点，则首元素结点没有前驱结点，在其前插 入结点或删除该结点时需要单独写if语句。&lt;/p&gt;&#xA;&lt;h5 id=&#34;63-个概念的区别头指针头结点首结点第一个数据结点&#34;&gt;6.3 个概念的区别:头指针、头结点、首结点，第一个数据结点。&lt;/h5&gt;&#xA;&lt;p&gt;单链表分为带头结点的单链表和不带头结点的单链表，头结点的值域不存储 任何信息，从其后继结点开始存储信息。 不论带头结点的链表还是不带头结点的链表，头指针都指向链表的第一个结 点，带头结点的单链表头结点就是第一个结点，不带头结点的单链表第一个 结点就是首结点。ps：首结点就是第一个数据节点。&lt;/p&gt;&#xA;&lt;h5 id=&#34;7图片中的文字是顺序表的特点&#34;&gt;7.图片中的文字是：顺序表的特点：&lt;/h5&gt;&#xA;&lt;p&gt;①随机访问，即可以在O(1)&lt;em&gt;O&lt;/em&gt;(1)时间内找到第i个元素。&lt;/p&gt;&#xA;&lt;p&gt;②存储密度高，每个节点只存储数据元素&lt;/p&gt;&#xA;&lt;p&gt;③拓展容量不方便（即便采用动态分配的方式实现，拓展长度的时间复杂度也比较高）&lt;/p&gt;&#xA;&lt;p&gt;④插入、删除操作不方便，需要移动大量元素&lt;/p&gt;&#xA;&lt;h5 id=&#34;8为什么使用共享栈优点&#34;&gt;8.为什么使用共享栈？（优点）&lt;/h5&gt;&#xA;&lt;p&gt;使用栈的时候，我们也不能保证栈有足够 的空间，另外，栈是一个动态的存储结构， 各个栈的实际大小在使用的过程中都会发 生变化的，有时候其中一个已经上溢了， 而另外一个还没用怎么使用。这样必定会 造成空间的利用率降低。 共享栈就是让两个顺序栈，两个栈使用同 一段存储空间，利用“栈底不变，栈顶动 态增加的特性”节省存储空间，共享一个 一维数组空间。&lt;/p&gt;&#xA;&lt;h5 id=&#34;9如何知道循环队列是空还是满-简答题&#34;&gt;9.如何知道循环队列是空还是满 （简答题）&lt;/h5&gt;&#xA;&lt;p&gt;答： 第一，采用计数器来判断，空时，计数器为 0，满时，计数 器为 count;  第二，另设一个布尔变量来匹别队列的空和满;如果因删除导 致front=rear，则队空； 如果因插入导致front=rear，则队满 第三，少用一个元素的空间，约定入队前，测试尾指针在循 环意义下加 1 后 是否等于头指针，若相等则认为队满(注 意:rear 所指的单元始终为空);&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
